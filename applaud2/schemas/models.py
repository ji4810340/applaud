# This file is autogenerated by `applaudgen` from `app_store_connect_api.json`.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!

from __future__ import annotations

from pydantic import BaseModel, AnyUrl, EmailStr, Field, ConfigDict
from deprecated import deprecated
from .enums import *
from typing import Optional, Literal
import re
import datetime

def _camelcase(string):
    """ Convert string into camel case.

    Args:
        string: String to convert.

    Returns:
        string: Camel case string.

    """

    string = re.sub(r"^[\-_\.]", '', str(string))
    if not string:
        return string
    return (str(string[0]).lower()
            + re.sub(r"[\-_\.\s]([a-z])",
                    lambda matched: str(matched.group(1)).upper(),
                    string[1:]))

class ApplaudModel(BaseModel):
    model_config = ConfigDict(
        alias_generator=_camelcase,
        populate_by_name=True,
        # 允许额外字段，这样 API 返回的未知字段不会导致验证失败
        extra='allow',
    )

class ResourceLinks(ApplaudModel):
    self: Optional[str]

class PagingInformation(ApplaudModel):
    class Paging(ApplaudModel):
        limit: int
        total: Optional[int]
        next_cursor: Optional[str]

    paging: Paging

class HttpHeader(ApplaudModel):
    name: Optional[str]
    value: Optional[str]

class ImageAsset(ApplaudModel):
    template_url: Optional[str]
    width: Optional[int]
    height: Optional[int]

class AppMediaStateError(ApplaudModel):
    code: Optional[str]
    description: Optional[str]

class AppMediaAssetState(ApplaudModel):
    class State(StringEnum):
        AWAITING_UPLOAD = 'AWAITING_UPLOAD'
        UPLOAD_COMPLETE = 'UPLOAD_COMPLETE'
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'

    errors: Optional[list[AppMediaStateError]]
    warnings: Optional[list[AppMediaStateError]]
    state: Optional[State]

class UploadOperation(ApplaudModel):
    method: Optional[str]
    url: Optional[str]
    length: Optional[int]
    offset: Optional[int]
    request_headers: Optional[list[HttpHeader]]

class Device(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        platform: Optional[BundleIdPlatform]
        udid: Optional[str]
        device_class: Optional[DeviceClass]
        status: Optional[DeviceStatus]
        model: Optional[str]
        added_date: Optional[datetime.datetime]

    id: str
    type: Literal["devices"] = "devices"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class FileLocation(ApplaudModel):
    path: Optional[str]
    line_number: Optional[int]

class ScmProviderType(ApplaudModel):
    class Kind(StringEnum):
        BITBUCKET_CLOUD = 'BITBUCKET_CLOUD'
        BITBUCKET_SERVER = 'BITBUCKET_SERVER'
        GITHUB_CLOUD = 'GITHUB_CLOUD'
        GITHUB_ENTERPRISE = 'GITHUB_ENTERPRISE'
        GITLAB_CLOUD = 'GITLAB_CLOUD'
        GITLAB_SELF_MANAGED = 'GITLAB_SELF_MANAGED'

    kind: Optional[Kind]
    display_name: Optional[str]
    is_on_premise: Optional[bool]

class CiTagPatterns(ApplaudModel):
    class Pattern(ApplaudModel):
        pattern: Optional[str]
        is_prefix: Optional[bool]

    is_all_match: Optional[bool]
    patterns: Optional[list[Pattern]]

class CiBranchPatterns(ApplaudModel):
    class Pattern(ApplaudModel):
        pattern: Optional[str]
        is_prefix: Optional[bool]

    is_all_match: Optional[bool]
    patterns: Optional[list[Pattern]]

class CiStartConditionFileMatcher(ApplaudModel):
    directory: Optional[str]
    file_extension: Optional[str]
    file_name: Optional[str]

class CiFilesAndFoldersRule(ApplaudModel):
    class Mode(StringEnum):
        START_IF_ANY_FILE_MATCHES = 'START_IF_ANY_FILE_MATCHES'
        DO_NOT_START_IF_ALL_FILES_MATCH = 'DO_NOT_START_IF_ALL_FILES_MATCH'

    mode: Optional[Mode]
    matchers: Optional[list[CiStartConditionFileMatcher]]

class CiTestDestination(ApplaudModel):
    device_type_name: Optional[str]
    device_type_identifier: Optional[str]
    runtime_name: Optional[str]
    runtime_identifier: Optional[str]
    kind: Optional[CiTestDestinationKind]

class CiAction(ApplaudModel):
    class TestConfiguration(ApplaudModel):
        class Kind(StringEnum):
            USE_SCHEME_SETTINGS = 'USE_SCHEME_SETTINGS'
            SPECIFIC_TEST_PLANS = 'SPECIFIC_TEST_PLANS'

        kind: Optional[Kind]
        test_plan_name: Optional[str]
        test_destinations: Optional[list[CiTestDestination]]

    class Destination(StringEnum):
        ANY_IOS_DEVICE = 'ANY_IOS_DEVICE'
        ANY_IOS_SIMULATOR = 'ANY_IOS_SIMULATOR'
        ANY_TVOS_DEVICE = 'ANY_TVOS_DEVICE'
        ANY_TVOS_SIMULATOR = 'ANY_TVOS_SIMULATOR'
        ANY_WATCHOS_DEVICE = 'ANY_WATCHOS_DEVICE'
        ANY_WATCHOS_SIMULATOR = 'ANY_WATCHOS_SIMULATOR'
        ANY_MAC = 'ANY_MAC'
        ANY_MAC_CATALYST = 'ANY_MAC_CATALYST'
        ANY_VISIONOS_DEVICE = 'ANY_VISIONOS_DEVICE'
        ANY_VISIONOS_SIMULATOR = 'ANY_VISIONOS_SIMULATOR'

    class Platform(StringEnum):
        MACOS = 'MACOS'
        IOS = 'IOS'
        TVOS = 'TVOS'
        WATCHOS = 'WATCHOS'
        VISIONOS = 'VISIONOS'

    name: Optional[str]
    action_type: Optional[CiActionType]
    destination: Optional[Destination]
    build_distribution_audience: Optional[BuildAudienceType]
    test_configuration: Optional[TestConfiguration]
    scheme: Optional[str]
    platform: Optional[Platform]
    is_required_to_pass: Optional[bool]

class CiGitUser(ApplaudModel):
    display_name: Optional[str]
    avatar_url: Optional[AnyUrl]

class CiIssueCounts(ApplaudModel):
    analyzer_warnings: Optional[int]
    errors: Optional[int]
    test_failures: Optional[int]
    warnings: Optional[int]

class CapabilityOption(ApplaudModel):
    class Key(StringEnum):
        XCODE_5 = 'XCODE_5'
        XCODE_6 = 'XCODE_6'
        COMPLETE_PROTECTION = 'COMPLETE_PROTECTION'
        PROTECTED_UNLESS_OPEN = 'PROTECTED_UNLESS_OPEN'
        PROTECTED_UNTIL_FIRST_USER_AUTH = 'PROTECTED_UNTIL_FIRST_USER_AUTH'
        PRIMARY_APP_CONSENT = 'PRIMARY_APP_CONSENT'

    key: Optional[Key]
    name: Optional[str]
    description: Optional[str]
    enabled_by_default: Optional[bool]
    enabled: Optional[bool]
    supports_wildcard: Optional[bool]

class CapabilitySetting(ApplaudModel):
    class Key(StringEnum):
        ICLOUD_VERSION = 'ICLOUD_VERSION'
        DATA_PROTECTION_PERMISSION_LEVEL = 'DATA_PROTECTION_PERMISSION_LEVEL'
        APPLE_ID_AUTH_APP_CONSENT = 'APPLE_ID_AUTH_APP_CONSENT'

    class AllowedInstances(StringEnum):
        ENTRY = 'ENTRY'
        SINGLE = 'SINGLE'
        MULTIPLE = 'MULTIPLE'

    key: Optional[Key]
    name: Optional[str]
    description: Optional[str]
    enabled_by_default: Optional[bool]
    visible: Optional[bool]
    allowed_instances: Optional[AllowedInstances]
    min_instances: Optional[int]
    options: Optional[list[CapabilityOption]]

class CiBranchStartCondition(ApplaudModel):
    source: Optional[CiBranchPatterns]
    files_and_folders_rule: Optional[CiFilesAndFoldersRule]
    auto_cancel: Optional[bool]

class CiTagStartCondition(ApplaudModel):
    source: Optional[CiTagPatterns]
    files_and_folders_rule: Optional[CiFilesAndFoldersRule]
    auto_cancel: Optional[bool]

class CiPullRequestStartCondition(ApplaudModel):
    source: Optional[CiBranchPatterns]
    destination: Optional[CiBranchPatterns]
    files_and_folders_rule: Optional[CiFilesAndFoldersRule]
    auto_cancel: Optional[bool]

class CiScheduledStartCondition(ApplaudModel):
    class Schedule(ApplaudModel):
        class Frequency(StringEnum):
            WEEKLY = 'WEEKLY'
            DAILY = 'DAILY'
            HOURLY = 'HOURLY'

        frequency: Optional[Frequency]
        days: Optional[list[str]]
        hour: Optional[int]
        minute: Optional[int]
        timezone: Optional[str]

    source: Optional[CiBranchPatterns]
    schedule: Optional[Schedule]

class AccessibilityDeclaration(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            DRAFT = 'DRAFT'
            PUBLISHED = 'PUBLISHED'
            REPLACED = 'REPLACED'

        device_family: Optional[DeviceFamily]
        state: Optional[State]
        supports_audio_descriptions: Optional[bool]
        supports_captions: Optional[bool]
        supports_dark_interface: Optional[bool]
        supports_differentiate_without_color_alone: Optional[bool]
        supports_larger_text: Optional[bool]
        supports_reduced_motion: Optional[bool]
        supports_sufficient_contrast: Optional[bool]
        supports_voice_control: Optional[bool]
        supports_voiceover: Optional[bool]

    id: str
    type: Literal["accessibilityDeclarations"] = "accessibilityDeclarations"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class Actor(ApplaudModel):
    class Attributes(ApplaudModel):
        class ActorType(StringEnum):
            USER = 'USER'
            API_KEY = 'API_KEY'
            XCODE_CLOUD = 'XCODE_CLOUD'
            APPLE = 'APPLE'

        actor_type: Optional[ActorType]
        user_first_name: Optional[str]
        user_last_name: Optional[str]
        user_email: Optional[str]
        api_key_id: Optional[str]

    id: str
    type: Literal["actors"] = "actors"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AgeRatingDeclaration(ApplaudModel):
    class Attributes(ApplaudModel):
        class GunsOrOtherWeapons(StringEnum):
            NONE = 'NONE'
            INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
            FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
            INFREQUENT = 'INFREQUENT'
            FREQUENT = 'FREQUENT'

        class AgeRatingOverride(StringEnum):
            NONE = 'NONE'
            NINE_PLUS = 'NINE_PLUS'
            THIRTEEN_PLUS = 'THIRTEEN_PLUS'
            SIXTEEN_PLUS = 'SIXTEEN_PLUS'
            SEVENTEEN_PLUS = 'SEVENTEEN_PLUS'
            UNRATED = 'UNRATED'

        class AgeRatingOverrideV2(StringEnum):
            NONE = 'NONE'
            NINE_PLUS = 'NINE_PLUS'
            THIRTEEN_PLUS = 'THIRTEEN_PLUS'
            SIXTEEN_PLUS = 'SIXTEEN_PLUS'
            EIGHTEEN_PLUS = 'EIGHTEEN_PLUS'
            UNRATED = 'UNRATED'

        class KoreaAgeRatingOverride(StringEnum):
            NONE = 'NONE'
            FIFTEEN_PLUS = 'FIFTEEN_PLUS'
            NINETEEN_PLUS = 'NINETEEN_PLUS'

        advertising: Optional[bool]
        alcohol_tobacco_or_drug_use_or_references: Optional[AgeRatingDeclarationLevel]
        contests: Optional[AgeRatingDeclarationLevel]
        gambling: Optional[bool]
        gambling_simulated: Optional[AgeRatingDeclarationLevel]
        guns_or_other_weapons: Optional[GunsOrOtherWeapons]
        health_or_wellness_topics: Optional[bool]
        kids_age_band: Optional[KidsAgeBand]
        loot_box: Optional[bool]
        medical_or_treatment_information: Optional[AgeRatingDeclarationLevel]
        messaging_and_chat: Optional[bool]
        parental_controls: Optional[bool]
        profanity_or_crude_humor: Optional[AgeRatingDeclarationLevel]
        age_assurance: Optional[bool]
        sexual_content_graphic_and_nudity: Optional[AgeRatingDeclarationLevel]
        sexual_content_or_nudity: Optional[AgeRatingDeclarationLevel]
        horror_or_fear_themes: Optional[AgeRatingDeclarationLevel]
        mature_or_suggestive_themes: Optional[AgeRatingDeclarationLevel]
        unrestricted_web_access: Optional[bool]
        user_generated_content: Optional[bool]
        violence_cartoon_or_fantasy: Optional[AgeRatingDeclarationLevel]
        violence_realistic_prolonged_graphic_or_sadistic: Optional[AgeRatingDeclarationLevel]
        violence_realistic: Optional[AgeRatingDeclarationLevel]
        age_rating_override: Optional[AgeRatingOverride] = Field(None, deprecated=True)
        age_rating_override_v2: Optional[AgeRatingOverrideV2]
        korea_age_rating_override: Optional[KoreaAgeRatingOverride]
        developer_age_rating_info_url: Optional[AnyUrl]

    id: str
    type: Literal["ageRatingDeclarations"] = "ageRatingDeclarations"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AlternativeDistributionDomain(ApplaudModel):
    class Attributes(ApplaudModel):
        domain: Optional[str]
        reference_name: Optional[str]
        created_date: Optional[datetime.datetime]

    id: str
    type: Literal["alternativeDistributionDomains"] = "alternativeDistributionDomains"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AlternativeDistributionKey(ApplaudModel):
    class Attributes(ApplaudModel):
        public_key: Optional[str]

    id: str
    type: Literal["alternativeDistributionKeys"] = "alternativeDistributionKeys"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AlternativeDistributionPackageDelta(ApplaudModel):
    class Attributes(ApplaudModel):
        url: Optional[AnyUrl]
        url_expiration_date: Optional[datetime.datetime]
        alternative_distribution_key_blob: Optional[str]
        file_checksum: Optional[str]

    id: str
    type: Literal["alternativeDistributionPackageDeltas"] = "alternativeDistributionPackageDeltas"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AlternativeDistributionPackageVariant(ApplaudModel):
    class Attributes(ApplaudModel):
        url: Optional[AnyUrl]
        url_expiration_date: Optional[datetime.datetime]
        alternative_distribution_key_blob: Optional[str]
        file_checksum: Optional[str]

    id: str
    type: Literal["alternativeDistributionPackageVariants"] = "alternativeDistributionPackageVariants"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AlternativeDistributionPackageVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            COMPLETED = 'COMPLETED'
            REPLACED = 'REPLACED'

        url: Optional[AnyUrl]
        url_expiration_date: Optional[datetime.datetime]
        version: Optional[str]
        file_checksum: Optional[str]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class Variants(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["alternativeDistributionPackageVariants"] = "alternativeDistributionPackageVariants"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Deltas(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["alternativeDistributionPackageDeltas"] = "alternativeDistributionPackageDeltas"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AlternativeDistributionPackage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["alternativeDistributionPackages"] = "alternativeDistributionPackages"

            data: Optional[Data]

        variants: Optional[Variants]
        deltas: Optional[Deltas]
        alternative_distribution_package: Optional[AlternativeDistributionPackage]

    id: str
    type: Literal["alternativeDistributionPackageVersions"] = "alternativeDistributionPackageVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AlternativeDistributionPackage(ApplaudModel):
    class Relationships(ApplaudModel):
        class Versions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["alternativeDistributionPackageVersions"] = "alternativeDistributionPackageVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        versions: Optional[Versions]

    id: str
    type: Literal["alternativeDistributionPackages"] = "alternativeDistributionPackages"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AnalyticsReportInstance(ApplaudModel):
    class Attributes(ApplaudModel):
        class Granularity(StringEnum):
            DAILY = 'DAILY'
            WEEKLY = 'WEEKLY'
            MONTHLY = 'MONTHLY'

        granularity: Optional[Granularity]
        processing_date: Optional[datetime.date]

    class Relationships(ApplaudModel):
        class Segments(ApplaudModel):
            links: Optional[RelationshipLinks]

        segments: Optional[Segments]

    id: str
    type: Literal["analyticsReportInstances"] = "analyticsReportInstances"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AnalyticsReportSegment(ApplaudModel):
    class Attributes(ApplaudModel):
        checksum: Optional[str]
        size_in_bytes: Optional[int]
        url: Optional[AnyUrl]

    id: str
    type: Literal["analyticsReportSegments"] = "analyticsReportSegments"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AnalyticsReport(ApplaudModel):
    class Attributes(ApplaudModel):
        class Category(StringEnum):
            APP_USAGE = 'APP_USAGE'
            APP_STORE_ENGAGEMENT = 'APP_STORE_ENGAGEMENT'
            COMMERCE = 'COMMERCE'
            FRAMEWORK_USAGE = 'FRAMEWORK_USAGE'
            PERFORMANCE = 'PERFORMANCE'

        name: Optional[str]
        category: Optional[Category]

    class Relationships(ApplaudModel):
        class Instances(ApplaudModel):
            links: Optional[RelationshipLinks]

        instances: Optional[Instances]

    id: str
    type: Literal["analyticsReports"] = "analyticsReports"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppAvailabilityV2(ApplaudModel):
    class Attributes(ApplaudModel):
        available_in_new_territories: Optional[bool]

    class Relationships(ApplaudModel):
        class TerritoryAvailabilities(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territoryAvailabilities"] = "territoryAvailabilities"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        territory_availabilities: Optional[TerritoryAvailabilities]

    id: str
    type: Literal["appAvailabilities"] = "appAvailabilities"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppCategory(ApplaudModel):
    class Attributes(ApplaudModel):
        platforms: Optional[list[Platform]]

    class Relationships(ApplaudModel):
        class Subcategories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Parent(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        subcategories: Optional[Subcategories]
        parent: Optional[Parent]

    id: str
    type: Literal["appCategories"] = "appCategories"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppClipAdvancedExperienceImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    id: str
    type: Literal["appClipAdvancedExperienceImages"] = "appClipAdvancedExperienceImages"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AppClipAdvancedExperienceLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        language: Optional[AppClipAdvancedExperienceLanguage]
        title: Optional[str]
        subtitle: Optional[str]

    id: str
    type: Literal["appClipAdvancedExperienceLocalizations"] = "appClipAdvancedExperienceLocalizations"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AppClipAdvancedExperienceLocalizationInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        language: Optional[AppClipAdvancedExperienceLanguage]
        title: Optional[str]
        subtitle: Optional[str]

    type: Literal["appClipAdvancedExperienceLocalizations"] = "appClipAdvancedExperienceLocalizations"
    id: Optional[str]
    attributes: Optional[Attributes]

class AppClipAdvancedExperience(ApplaudModel):
    class Attributes(ApplaudModel):
        class Place(ApplaudModel):
            class MainAddress(ApplaudModel):
                class StructuredAddress(ApplaudModel):
                    street_address: Optional[list[str]]
                    floor: Optional[str]
                    neighborhood: Optional[str]
                    locality: Optional[str]
                    state_province: Optional[str]
                    postal_code: Optional[str]
                    country_code: Optional[str]

                full_address: Optional[str]
                structured_address: Optional[StructuredAddress]

            class DisplayPoint(ApplaudModel):
                class Coordinates(ApplaudModel):
                    latitude: Optional[float]
                    longitude: Optional[float]

                coordinates: Optional[Coordinates]
                source: Optional[AppClipAdvancedExperiencePlaceSource]

            class PhoneNumber(ApplaudModel):
                number: Optional[str]
                type: Optional[AppClipAdvancedExperiencePlacePhoneNumberType]
                intent: Optional[str]

            place_id: Optional[str]
            names: Optional[list[str]]
            main_address: Optional[MainAddress]
            display_point: Optional[DisplayPoint]
            map_action: Optional[AppClipAdvancedExperiencePlaceMapAction]
            relationship: Optional[AppClipAdvancedExperiencePlaceRelationship]
            phone_number: Optional[PhoneNumber]
            home_page: Optional[str]
            categories: Optional[list[str]]

        link: Optional[AnyUrl]
        version: Optional[int]
        status: Optional[AppClipAdvancedExperienceStatus]
        action: Optional[AppClipAction]
        is_powered_by: Optional[bool]
        place: Optional[Place]
        place_status: Optional[AppClipAdvancedExperiencePlaceStatus]
        business_category: Optional[AppClipAdvancedExperienceBusinessCategory]
        default_language: Optional[AppClipAdvancedExperienceLanguage]

    class Relationships(ApplaudModel):
        class AppClip(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClips"] = "appClips"

            data: Optional[Data]

        class HeaderImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipAdvancedExperienceImages"] = "appClipAdvancedExperienceImages"

            data: Optional[Data]

        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipAdvancedExperienceLocalizations"] = "appClipAdvancedExperienceLocalizations"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_clip: Optional[AppClip]
        header_image: Optional[HeaderImage]
        localizations: Optional[Localizations]

    id: str
    type: Literal["appClipAdvancedExperiences"] = "appClipAdvancedExperiences"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppClipAppStoreReviewDetail(ApplaudModel):
    class Attributes(ApplaudModel):
        invocation_urls: Optional[list[str]]

    class Relationships(ApplaudModel):
        class AppClipDefaultExperience(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

            data: Optional[Data]

        app_clip_default_experience: Optional[AppClipDefaultExperience]

    id: str
    type: Literal["appClipAppStoreReviewDetails"] = "appClipAppStoreReviewDetails"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppClipDefaultExperienceLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        subtitle: Optional[str]

    class Relationships(ApplaudModel):
        class AppClipDefaultExperience(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

            data: Optional[Data]

        class AppClipHeaderImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipHeaderImages"] = "appClipHeaderImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app_clip_default_experience: Optional[AppClipDefaultExperience]
        app_clip_header_image: Optional[AppClipHeaderImage]

    id: str
    type: Literal["appClipDefaultExperienceLocalizations"] = "appClipDefaultExperienceLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppClipDefaultExperience(ApplaudModel):
    class Attributes(ApplaudModel):
        action: Optional[AppClipAction]

    class Relationships(ApplaudModel):
        class AppClip(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClips"] = "appClips"

            data: Optional[Data]

        class ReleaseWithAppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppClipDefaultExperienceLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDefaultExperienceLocalizations"] = "appClipDefaultExperienceLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppClipAppStoreReviewDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipAppStoreReviewDetails"] = "appClipAppStoreReviewDetails"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app_clip: Optional[AppClip]
        release_with_app_store_version: Optional[ReleaseWithAppStoreVersion]
        app_clip_default_experience_localizations: Optional[AppClipDefaultExperienceLocalizations]
        app_clip_app_store_review_detail: Optional[AppClipAppStoreReviewDetail]

    id: str
    type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppClipDomainStatus(ApplaudModel):
    class Attributes(ApplaudModel):
        class Domain(ApplaudModel):
            domain: Optional[str]
            is_valid: Optional[bool]
            last_updated_date: Optional[datetime.datetime]
            error_code: Optional[AppClipDomainErrorCode]

        domains: Optional[list[Domain]]
        last_updated_date: Optional[datetime.datetime]

    id: str
    type: Literal["appClipDomainStatuses"] = "appClipDomainStatuses"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AppClipHeaderImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class AppClipDefaultExperienceLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDefaultExperienceLocalizations"] = "appClipDefaultExperienceLocalizations"

            data: Optional[Data]

        app_clip_default_experience_localization: Optional[AppClipDefaultExperienceLocalization]

    id: str
    type: Literal["appClipHeaderImages"] = "appClipHeaderImages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppClip(ApplaudModel):
    class Attributes(ApplaudModel):
        bundle_id: Optional[str]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class AppClipDefaultExperiences(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppClipAdvancedExperiences(ApplaudModel):
            links: Optional[RelationshipLinks]

        app: Optional[App]
        app_clip_default_experiences: Optional[AppClipDefaultExperiences]
        app_clip_advanced_experiences: Optional[AppClipAdvancedExperiences]

    id: str
    type: Literal["appClips"] = "appClips"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppCustomProductPageLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        promotional_text: Optional[str]

    class Relationships(ApplaudModel):
        class AppCustomProductPageVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

            data: Optional[Data]

        class AppScreenshotSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appScreenshotSets"] = "appScreenshotSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppPreviewSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPreviewSets"] = "appPreviewSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class SearchKeywords(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appKeywords"] = "appKeywords"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_custom_product_page_version: Optional[AppCustomProductPageVersion]
        app_screenshot_sets: Optional[AppScreenshotSets]
        app_preview_sets: Optional[AppPreviewSets]
        search_keywords: Optional[SearchKeywords]

    id: str
    type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppCustomProductPageLocalizationInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: str
        promotional_text: Optional[str]

    class Relationships(ApplaudModel):
        class AppCustomProductPageVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

            data: Optional[Data]

        app_custom_product_page_version: Optional[AppCustomProductPageVersion]

    attributes: Attributes
    type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"
    id: Optional[str]
    relationships: Optional[Relationships]

class AppCustomProductPageVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            IN_REVIEW = 'IN_REVIEW'
            ACCEPTED = 'ACCEPTED'
            APPROVED = 'APPROVED'
            REPLACED_WITH_NEW_VERSION = 'REPLACED_WITH_NEW_VERSION'
            REJECTED = 'REJECTED'

        version: Optional[str]
        state: Optional[State]
        deep_link: Optional[AnyUrl]

    class Relationships(ApplaudModel):
        class AppCustomProductPage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPages"] = "appCustomProductPages"

            data: Optional[Data]

        class AppCustomProductPageLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_custom_product_page: Optional[AppCustomProductPage]
        app_custom_product_page_localizations: Optional[AppCustomProductPageLocalizations]

    id: str
    type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppCustomProductPageVersionInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        deep_link: Optional[AnyUrl]

    class Relationships(ApplaudModel):
        class AppCustomProductPage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPages"] = "appCustomProductPages"

            data: Optional[Data]

        class AppCustomProductPageLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

            data: Optional[list[Data]]

        app_custom_product_page: Optional[AppCustomProductPage]
        app_custom_product_page_localizations: Optional[AppCustomProductPageLocalizations]

    type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"
    id: Optional[str]
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]

class AppCustomProductPage(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        url: Optional[AnyUrl]
        visible: Optional[bool]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class AppCustomProductPageVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app: Optional[App]
        app_custom_product_page_versions: Optional[AppCustomProductPageVersions]

    id: str
    type: Literal["appCustomProductPages"] = "appCustomProductPages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppEncryptionDeclarationDocument(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        asset_token: Optional[str]
        download_url: Optional[AnyUrl]
        source_file_checksum: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    id: str
    type: Literal["appEncryptionDeclarationDocuments"] = "appEncryptionDeclarationDocuments"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AppEncryptionDeclaration(ApplaudModel):
    class Attributes(ApplaudModel):
        app_description: Optional[str]
        created_date: Optional[datetime.datetime]
        uses_encryption: Optional[bool] = Field(None, deprecated=True)
        exempt: Optional[bool]
        contains_proprietary_cryptography: Optional[bool]
        contains_third_party_cryptography: Optional[bool]
        available_on_french_store: Optional[bool]
        platform: Optional[Platform] = Field(None, deprecated=True)
        uploaded_date: Optional[datetime.datetime] = Field(None, deprecated=True)
        document_url: Optional[str] = Field(None, deprecated=True)
        document_name: Optional[str] = Field(None, deprecated=True)
        document_type: Optional[str] = Field(None, deprecated=True)
        app_encryption_declaration_state: Optional[AppEncryptionDeclarationState]
        code_value: Optional[str]

    class Relationships(ApplaudModel):
        @deprecated
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        @deprecated
        class Builds(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppEncryptionDeclarationDocument(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEncryptionDeclarationDocuments"] = "appEncryptionDeclarationDocuments"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app: Optional[App] = Field(None, deprecated=True)
        builds: Optional[Builds] = Field(None, deprecated=True)
        app_encryption_declaration_document: Optional[AppEncryptionDeclarationDocument]

    id: str
    type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppEventLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]
        short_description: Optional[str]
        long_description: Optional[str]

    class Relationships(ApplaudModel):
        class AppEvent(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEvents"] = "appEvents"

            data: Optional[Data]

        class AppEventScreenshots(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEventScreenshots"] = "appEventScreenshots"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppEventVideoClips(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEventVideoClips"] = "appEventVideoClips"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_event: Optional[AppEvent]
        app_event_screenshots: Optional[AppEventScreenshots]
        app_event_video_clips: Optional[AppEventVideoClips]

    id: str
    type: Literal["appEventLocalizations"] = "appEventLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppEventScreenshot(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        image_asset: Optional[ImageAsset]
        asset_token: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]
        app_event_asset_type: Optional[AppEventAssetType]

    class Relationships(ApplaudModel):
        class AppEventLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEventLocalizations"] = "appEventLocalizations"

            data: Optional[Data]

        app_event_localization: Optional[AppEventLocalization]

    id: str
    type: Literal["appEventScreenshots"] = "appEventScreenshots"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppEventVideoClip(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        preview_frame_time_code: Optional[str]
        video_url: Optional[str]
        preview_frame_image: Optional[PreviewFrameImage]
        preview_image: Optional[ImageAsset] = Field(None, deprecated=True)
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState] = Field(None, deprecated=True)
        video_delivery_state: Optional[AppMediaVideoState]
        app_event_asset_type: Optional[AppEventAssetType]

    class Relationships(ApplaudModel):
        class AppEventLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEventLocalizations"] = "appEventLocalizations"

            data: Optional[Data]

        app_event_localization: Optional[AppEventLocalization]

    id: str
    type: Literal["appEventVideoClips"] = "appEventVideoClips"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppEvent(ApplaudModel):
    class Attributes(ApplaudModel):
        class TerritorySchedule(ApplaudModel):
            territories: Optional[list[str]]
            publish_start: Optional[datetime.datetime]
            event_start: Optional[datetime.datetime]
            event_end: Optional[datetime.datetime]

        class ArchivedTerritorySchedule(ApplaudModel):
            territories: Optional[list[str]]
            publish_start: Optional[datetime.datetime]
            event_start: Optional[datetime.datetime]
            event_end: Optional[datetime.datetime]

        class Badge(StringEnum):
            LIVE_EVENT = 'LIVE_EVENT'
            PREMIERE = 'PREMIERE'
            CHALLENGE = 'CHALLENGE'
            COMPETITION = 'COMPETITION'
            NEW_SEASON = 'NEW_SEASON'
            MAJOR_UPDATE = 'MAJOR_UPDATE'
            SPECIAL_EVENT = 'SPECIAL_EVENT'

        class EventState(StringEnum):
            DRAFT = 'DRAFT'
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            IN_REVIEW = 'IN_REVIEW'
            REJECTED = 'REJECTED'
            ACCEPTED = 'ACCEPTED'
            APPROVED = 'APPROVED'
            PUBLISHED = 'PUBLISHED'
            PAST = 'PAST'
            ARCHIVED = 'ARCHIVED'

        class Priority(StringEnum):
            HIGH = 'HIGH'
            NORMAL = 'NORMAL'

        class Purpose(StringEnum):
            APPROPRIATE_FOR_ALL_USERS = 'APPROPRIATE_FOR_ALL_USERS'
            ATTRACT_NEW_USERS = 'ATTRACT_NEW_USERS'
            KEEP_ACTIVE_USERS_INFORMED = 'KEEP_ACTIVE_USERS_INFORMED'
            BRING_BACK_LAPSED_USERS = 'BRING_BACK_LAPSED_USERS'

        reference_name: Optional[str]
        badge: Optional[Badge]
        event_state: Optional[EventState]
        deep_link: Optional[AnyUrl]
        purchase_requirement: Optional[str]
        primary_locale: Optional[str]
        priority: Optional[Priority]
        purpose: Optional[Purpose]
        territory_schedules: Optional[list[TerritorySchedule]]
        archived_territory_schedules: Optional[list[ArchivedTerritorySchedule]]

    class Relationships(ApplaudModel):
        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEventLocalizations"] = "appEventLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        localizations: Optional[Localizations]

    id: str
    type: Literal["appEvents"] = "appEvents"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppInfoLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]
        subtitle: Optional[str]
        privacy_policy_url: Optional[str]
        privacy_choices_url: Optional[str]
        privacy_policy_text: Optional[str]

    class Relationships(ApplaudModel):
        class AppInfo(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appInfos"] = "appInfos"

            data: Optional[Data]

        app_info: Optional[AppInfo]

    id: str
    type: Literal["appInfoLocalizations"] = "appInfoLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppInfo(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            ACCEPTED = 'ACCEPTED'
            DEVELOPER_REJECTED = 'DEVELOPER_REJECTED'
            IN_REVIEW = 'IN_REVIEW'
            PENDING_RELEASE = 'PENDING_RELEASE'
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            READY_FOR_DISTRIBUTION = 'READY_FOR_DISTRIBUTION'
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            REJECTED = 'REJECTED'
            REPLACED_WITH_NEW_INFO = 'REPLACED_WITH_NEW_INFO'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'

        class AustraliaAgeRating(StringEnum):
            FIFTEEN = 'FIFTEEN'
            EIGHTEEN = 'EIGHTEEN'

        class BrazilAgeRatingV2(StringEnum):
            SELF_RATED_L = 'SELF_RATED_L'
            SELF_RATED_TEN = 'SELF_RATED_TEN'
            SELF_RATED_TWELVE = 'SELF_RATED_TWELVE'
            SELF_RATED_FOURTEEN = 'SELF_RATED_FOURTEEN'
            SELF_RATED_SIXTEEN = 'SELF_RATED_SIXTEEN'
            SELF_RATED_EIGHTEEN = 'SELF_RATED_EIGHTEEN'
            OFFICIAL_L = 'OFFICIAL_L'
            OFFICIAL_TEN = 'OFFICIAL_TEN'
            OFFICIAL_TWELVE = 'OFFICIAL_TWELVE'
            OFFICIAL_FOURTEEN = 'OFFICIAL_FOURTEEN'
            OFFICIAL_SIXTEEN = 'OFFICIAL_SIXTEEN'
            OFFICIAL_EIGHTEEN = 'OFFICIAL_EIGHTEEN'

        class FranceAgeRating(StringEnum):
            EIGHTEEN = 'EIGHTEEN'

        class KoreaAgeRating(StringEnum):
            ALL = 'ALL'
            TWELVE = 'TWELVE'
            FIFTEEN = 'FIFTEEN'
            NINETEEN = 'NINETEEN'
            NOT_APPLICABLE = 'NOT_APPLICABLE'

        app_store_state: Optional[AppStoreVersionState] = Field(None, deprecated=True)
        state: Optional[State]
        app_store_age_rating: Optional[AppStoreAgeRating] = Field(None, deprecated=True)
        australia_age_rating: Optional[AustraliaAgeRating] = Field(None, deprecated=True)
        brazil_age_rating: Optional[BrazilAgeRating] = Field(None, deprecated=True)
        brazil_age_rating_v2: Optional[BrazilAgeRatingV2] = Field(None, deprecated=True)
        france_age_rating: Literal[FranceAgeRating.EIGHTEEN] = FranceAgeRating.EIGHTEEN
        korea_age_rating: Optional[KoreaAgeRating] = Field(None, deprecated=True)
        kids_age_band: Optional[KidsAgeBand]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class AgeRatingDeclaration(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ageRatingDeclarations"] = "ageRatingDeclarations"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppInfoLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appInfoLocalizations"] = "appInfoLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class PrimaryCategory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class PrimarySubcategoryOne(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class PrimarySubcategoryTwo(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class SecondaryCategory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class SecondarySubcategoryOne(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class SecondarySubcategoryTwo(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCategories"] = "appCategories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class TerritoryAgeRatings(ApplaudModel):
            links: Optional[RelationshipLinks]

        app: Optional[App]
        age_rating_declaration: Optional[AgeRatingDeclaration]
        app_info_localizations: Optional[AppInfoLocalizations]
        primary_category: Optional[PrimaryCategory]
        primary_subcategory_one: Optional[PrimarySubcategoryOne]
        primary_subcategory_two: Optional[PrimarySubcategoryTwo]
        secondary_category: Optional[SecondaryCategory]
        secondary_subcategory_one: Optional[SecondarySubcategoryOne]
        secondary_subcategory_two: Optional[SecondarySubcategoryTwo]
        territory_age_ratings: Optional[TerritoryAgeRatings]

    id: str
    type: Literal["appInfos"] = "appInfos"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppKeyword(ApplaudModel):
    id: str
    type: Literal["appKeywords"] = "appKeywords"
    links: Optional[ResourceLinks]

class AppPreviewSet(ApplaudModel):
    class Attributes(ApplaudModel):
        preview_type: Optional[PreviewType]

    class Relationships(ApplaudModel):
        class AppStoreVersionLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

            data: Optional[Data]

        class AppCustomProductPageLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

            data: Optional[Data]

        class AppStoreVersionExperimentTreatmentLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"

            data: Optional[Data]

        class AppPreviews(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPreviews"] = "appPreviews"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version_localization: Optional[AppStoreVersionLocalization]
        app_custom_product_page_localization: Optional[AppCustomProductPageLocalization]
        app_store_version_experiment_treatment_localization: Optional[AppStoreVersionExperimentTreatmentLocalization]
        app_previews: Optional[AppPreviews]

    id: str
    type: Literal["appPreviewSets"] = "appPreviewSets"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppPreview(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        preview_frame_time_code: Optional[str]
        mime_type: Optional[str]
        video_url: Optional[str]
        preview_frame_image: Optional[PreviewFrameImage]
        preview_image: Optional[ImageAsset] = Field(None, deprecated=True)
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState] = Field(None, deprecated=True)
        video_delivery_state: Optional[AppMediaVideoState]

    class Relationships(ApplaudModel):
        class AppPreviewSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPreviewSets"] = "appPreviewSets"

            data: Optional[Data]

        app_preview_set: Optional[AppPreviewSet]

    id: str
    type: Literal["appPreviews"] = "appPreviews"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppPricePointV3(ApplaudModel):
    class Attributes(ApplaudModel):
        customer_price: Optional[str]
        proceeds: Optional[str]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class Equalizations(ApplaudModel):
            links: Optional[RelationshipLinks]

        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        app: Optional[App]
        equalizations: Optional[Equalizations]
        territory: Optional[Territory]

    id: str
    type: Literal["appPricePoints"] = "appPricePoints"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppPriceSchedule(ApplaudModel):
    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class BaseTerritory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class ManualPrices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPrices"] = "appPrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AutomaticPrices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPrices"] = "appPrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app: Optional[App]
        base_territory: Optional[BaseTerritory]
        manual_prices: Optional[ManualPrices]
        automatic_prices: Optional[AutomaticPrices]

    id: str
    type: Literal["appPriceSchedules"] = "appPriceSchedules"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppPriceV2(ApplaudModel):
    class Attributes(ApplaudModel):
        manual: Optional[bool]
        start_date: Optional[datetime.date]
        end_date: Optional[datetime.date]

    class Relationships(ApplaudModel):
        class AppPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPricePoints"] = "appPricePoints"

            data: Optional[Data]

        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        app_price_point: Optional[AppPricePoint]
        territory: Optional[Territory]

    id: str
    type: Literal["appPrices"] = "appPrices"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppPriceV2InlineCreate(ApplaudModel):
    type: Literal["appPrices"] = "appPrices"
    id: Optional[str]

class AppScreenshotSet(ApplaudModel):
    class Attributes(ApplaudModel):
        screenshot_display_type: Optional[ScreenshotDisplayType]

    class Relationships(ApplaudModel):
        class AppStoreVersionLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

            data: Optional[Data]

        class AppCustomProductPageLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

            data: Optional[Data]

        class AppStoreVersionExperimentTreatmentLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"

            data: Optional[Data]

        class AppScreenshots(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appScreenshots"] = "appScreenshots"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version_localization: Optional[AppStoreVersionLocalization]
        app_custom_product_page_localization: Optional[AppCustomProductPageLocalization]
        app_store_version_experiment_treatment_localization: Optional[AppStoreVersionExperimentTreatmentLocalization]
        app_screenshots: Optional[AppScreenshots]

    id: str
    type: Literal["appScreenshotSets"] = "appScreenshotSets"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppScreenshot(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        image_asset: Optional[ImageAsset]
        asset_token: Optional[str]
        asset_type: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class AppScreenshotSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appScreenshotSets"] = "appScreenshotSets"

            data: Optional[Data]

        app_screenshot_set: Optional[AppScreenshotSet]

    id: str
    type: Literal["appScreenshots"] = "appScreenshots"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreReviewAttachment(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class AppStoreReviewDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreReviewDetails"] = "appStoreReviewDetails"

            data: Optional[Data]

        app_store_review_detail: Optional[AppStoreReviewDetail]

    id: str
    type: Literal["appStoreReviewAttachments"] = "appStoreReviewAttachments"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreReviewDetail(ApplaudModel):
    class Attributes(ApplaudModel):
        contact_first_name: Optional[str]
        contact_last_name: Optional[str]
        contact_phone: Optional[str]
        contact_email: Optional[str]
        demo_account_name: Optional[str]
        demo_account_password: Optional[str]
        demo_account_required: Optional[bool]
        notes: Optional[str]

    class Relationships(ApplaudModel):
        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        class AppStoreReviewAttachments(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreReviewAttachments"] = "appStoreReviewAttachments"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version: Optional[AppStoreVersion]
        app_store_review_attachments: Optional[AppStoreReviewAttachments]

    id: str
    type: Literal["appStoreReviewDetails"] = "appStoreReviewDetails"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreVersionExperimentTreatmentLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]

    class Relationships(ApplaudModel):
        class AppStoreVersionExperimentTreatment(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"

            data: Optional[Data]

        class AppScreenshotSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appScreenshotSets"] = "appScreenshotSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppPreviewSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPreviewSets"] = "appPreviewSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version_experiment_treatment: Optional[AppStoreVersionExperimentTreatment]
        app_screenshot_sets: Optional[AppScreenshotSets]
        app_preview_sets: Optional[AppPreviewSets]

    id: str
    type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreVersionExperimentTreatment(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        app_icon: Optional[ImageAsset]
        app_icon_name: Optional[str]
        promoted_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class AppStoreVersionExperiment(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            data: Optional[Data]

        class AppStoreVersionExperimentV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            data: Optional[Data]

        class AppStoreVersionExperimentTreatmentLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version_experiment: Optional[AppStoreVersionExperiment]
        app_store_version_experiment_v2: Optional[AppStoreVersionExperimentV2]
        app_store_version_experiment_treatment_localizations: Optional[AppStoreVersionExperimentTreatmentLocalizations]

    id: str
    type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreVersionExperimentV2(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            IN_REVIEW = 'IN_REVIEW'
            ACCEPTED = 'ACCEPTED'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'
            COMPLETED = 'COMPLETED'
            STOPPED = 'STOPPED'

        name: Optional[str]
        platform: Optional[Platform]
        traffic_proportion: Optional[int]
        state: Optional[State]
        review_required: Optional[bool]
        start_date: Optional[datetime.datetime]
        end_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class LatestControlVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        class ControlVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppStoreVersionExperimentTreatments(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app: Optional[App]
        latest_control_version: Optional[LatestControlVersion]
        control_versions: Optional[ControlVersions]
        app_store_version_experiment_treatments: Optional[AppStoreVersionExperimentTreatments]

    id: str
    type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

@deprecated
class AppStoreVersionExperiment(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            IN_REVIEW = 'IN_REVIEW'
            ACCEPTED = 'ACCEPTED'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'
            COMPLETED = 'COMPLETED'
            STOPPED = 'STOPPED'

        name: Optional[str]
        traffic_proportion: Optional[int]
        state: Optional[State]
        review_required: Optional[bool]
        start_date: Optional[datetime.datetime]
        end_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        class AppStoreVersionExperimentTreatments(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version: Optional[AppStoreVersion]
        app_store_version_experiment_treatments: Optional[AppStoreVersionExperimentTreatments]

    id: str
    type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreVersionLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        description: Optional[str]
        locale: Optional[str]
        keywords: Optional[str]
        marketing_url: Optional[AnyUrl]
        promotional_text: Optional[str]
        support_url: Optional[AnyUrl]
        whats_new: Optional[str]

    class Relationships(ApplaudModel):
        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        class AppScreenshotSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appScreenshotSets"] = "appScreenshotSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppPreviewSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appPreviewSets"] = "appPreviewSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class SearchKeywords(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appKeywords"] = "appKeywords"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_store_version: Optional[AppStoreVersion]
        app_screenshot_sets: Optional[AppScreenshotSets]
        app_preview_sets: Optional[AppPreviewSets]
        search_keywords: Optional[SearchKeywords]

    id: str
    type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreVersionPhasedRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        phased_release_state: Optional[PhasedReleaseState]
        start_date: Optional[datetime.datetime]
        total_pause_duration: Optional[int]
        current_day_number: Optional[int]

    id: str
    type: Literal["appStoreVersionPhasedReleases"] = "appStoreVersionPhasedReleases"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class AppStoreVersionPromotion(ApplaudModel):
    id: str
    type: Literal["appStoreVersionPromotions"] = "appStoreVersionPromotions"
    links: Optional[ResourceLinks]

@deprecated
class AppStoreVersionSubmission(ApplaudModel):
    class Relationships(ApplaudModel):
        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        app_store_version: Optional[AppStoreVersion]

    id: str
    type: Literal["appStoreVersionSubmissions"] = "appStoreVersionSubmissions"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppStoreVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        class ReviewType(StringEnum):
            APP_STORE = 'APP_STORE'
            NOTARIZATION = 'NOTARIZATION'

        platform: Optional[Platform]
        version_string: Optional[str]
        app_store_state: Optional[AppStoreVersionState] = Field(None, deprecated=True)
        app_version_state: Optional[AppVersionState]
        copyright: Optional[str]
        review_type: Optional[ReviewType]
        release_type: Optional[AppStoreVersionReleaseType]
        earliest_release_date: Optional[datetime.datetime]
        uses_idfa: Optional[bool] = Field(None, deprecated=True)
        downloadable: Optional[bool]
        created_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        @deprecated
        class AgeRatingDeclaration(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ageRatingDeclarations"] = "ageRatingDeclarations"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreVersionLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreVersionPhasedRelease(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionPhasedReleases"] = "appStoreVersionPhasedReleases"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class GameCenterAppVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class RoutingAppCoverage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["routingAppCoverages"] = "routingAppCoverages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreReviewDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreReviewDetails"] = "appStoreReviewDetails"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreVersionSubmission(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionSubmissions"] = "appStoreVersionSubmissions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppClipDefaultExperience(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreVersionExperiments(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppStoreVersionExperimentsV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class CustomerReviews(ApplaudModel):
            links: Optional[RelationshipLinks]

        class AlternativeDistributionPackage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["alternativeDistributionPackages"] = "alternativeDistributionPackages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app: Optional[App]
        age_rating_declaration: Optional[AgeRatingDeclaration] = Field(None, deprecated=True)
        app_store_version_localizations: Optional[AppStoreVersionLocalizations]
        build: Optional[Build]
        app_store_version_phased_release: Optional[AppStoreVersionPhasedRelease]
        game_center_app_version: Optional[GameCenterAppVersion]
        routing_app_coverage: Optional[RoutingAppCoverage]
        app_store_review_detail: Optional[AppStoreReviewDetail]
        app_store_version_submission: Optional[AppStoreVersionSubmission]
        app_clip_default_experience: Optional[AppClipDefaultExperience]
        app_store_version_experiments: Optional[AppStoreVersionExperiments]
        app_store_version_experiments_v2: Optional[AppStoreVersionExperimentsV2]
        customer_reviews: Optional[CustomerReviews]
        alternative_distribution_package: Optional[AlternativeDistributionPackage]

    id: str
    type: Literal["appStoreVersions"] = "appStoreVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AppTag(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        visible_in_app_store: Optional[bool]

    class Relationships(ApplaudModel):
        class Territories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        territories: Optional[Territories]

    id: str
    type: Literal["appTags"] = "appTags"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class App(ApplaudModel):
    class Attributes(ApplaudModel):
        accessibility_url: Optional[AnyUrl]
        name: Optional[str]
        bundle_id: Optional[str]
        sku: Optional[str]
        primary_locale: Optional[str]
        is_or_ever_was_made_for_kids: Optional[bool]
        subscription_status_url: Optional[AnyUrl]
        subscription_status_url_version: Optional[SubscriptionStatusUrlVersion]
        subscription_status_url_for_sandbox: Optional[AnyUrl]
        subscription_status_url_version_for_sandbox: Optional[SubscriptionStatusUrlVersion]
        content_rights_declaration: Optional[AppContentRightsDeclaration]
        streamlined_purchasing_enabled: Optional[bool]

    class Relationships(ApplaudModel):
        class AccessibilityDeclarations(ApplaudModel):
            links: Optional[RelationshipLinks]

        class AppEncryptionDeclarations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class CiProduct(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciProducts"] = "ciProducts"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BetaTesters(ApplaudModel):
            links: Optional[RelationshipLinks]

        class BetaGroups(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaGroups"] = "betaGroups"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppStoreVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppTags(ApplaudModel):
            links: Optional[RelationshipLinks]

        class PreReleaseVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["preReleaseVersions"] = "preReleaseVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaAppLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaAppLocalizations"] = "betaAppLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Builds(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaLicenseAgreement(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaLicenseAgreements"] = "betaLicenseAgreements"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BetaAppReviewDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaAppReviewDetails"] = "betaAppReviewDetails"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppInfos(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appInfos"] = "appInfos"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppClips(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClips"] = "appClips"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppPricePoints(ApplaudModel):
            links: Optional[RelationshipLinks]

        class EndUserLicenseAgreement(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["endUserLicenseAgreements"] = "endUserLicenseAgreements"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppPriceSchedule(ApplaudModel):
            links: Optional[RelationshipLinks]

        class AppAvailabilityV2(ApplaudModel):
            links: Optional[RelationshipLinks]

        @deprecated
        class InAppPurchases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class SubscriptionGroups(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionGroups"] = "subscriptionGroups"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterEnabledVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterEnabledVersions"] = "gameCenterEnabledVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class PerfPowerMetrics(ApplaudModel):
            links: Optional[RelationshipLinks]

        class AppCustomProductPages(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPages"] = "appCustomProductPages"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class InAppPurchasesV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class PromotedPurchases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["promotedPurchases"] = "promotedPurchases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppEvents(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEvents"] = "appEvents"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class ReviewSubmissions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["reviewSubmissions"] = "reviewSubmissions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class SubscriptionGracePeriod(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionGracePeriods"] = "subscriptionGracePeriods"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class CustomerReviews(ApplaudModel):
            links: Optional[RelationshipLinks]

        class CustomerReviewSummarizations(ApplaudModel):
            links: Optional[RelationshipLinks]

        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreVersionExperimentsV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AlternativeDistributionKey(ApplaudModel):
            links: Optional[RelationshipLinks]

        class AnalyticsReportRequests(ApplaudModel):
            links: Optional[RelationshipLinks]

        class MarketplaceSearchDetail(ApplaudModel):
            links: Optional[RelationshipLinks]

        class BuildUploads(ApplaudModel):
            links: Optional[RelationshipLinks]

        class BackgroundAssets(ApplaudModel):
            links: Optional[RelationshipLinks]

        class BetaFeedbackScreenshotSubmissions(ApplaudModel):
            links: Optional[RelationshipLinks]

        class BetaFeedbackCrashSubmissions(ApplaudModel):
            links: Optional[RelationshipLinks]

        class SearchKeywords(ApplaudModel):
            links: Optional[RelationshipLinks]

        class Webhooks(ApplaudModel):
            links: Optional[RelationshipLinks]

        accessibility_declarations: Optional[AccessibilityDeclarations]
        app_encryption_declarations: Optional[AppEncryptionDeclarations]
        ci_product: Optional[CiProduct]
        beta_testers: Optional[BetaTesters]
        beta_groups: Optional[BetaGroups]
        app_store_versions: Optional[AppStoreVersions]
        app_tags: Optional[AppTags]
        pre_release_versions: Optional[PreReleaseVersions]
        beta_app_localizations: Optional[BetaAppLocalizations]
        builds: Optional[Builds]
        beta_license_agreement: Optional[BetaLicenseAgreement]
        beta_app_review_detail: Optional[BetaAppReviewDetail]
        app_infos: Optional[AppInfos]
        app_clips: Optional[AppClips]
        app_price_points: Optional[AppPricePoints]
        end_user_license_agreement: Optional[EndUserLicenseAgreement]
        app_price_schedule: Optional[AppPriceSchedule]
        app_availability_v2: Optional[AppAvailabilityV2]
        in_app_purchases: Optional[InAppPurchases] = Field(None, deprecated=True)
        subscription_groups: Optional[SubscriptionGroups]
        game_center_enabled_versions: Optional[GameCenterEnabledVersions]
        perf_power_metrics: Optional[PerfPowerMetrics]
        app_custom_product_pages: Optional[AppCustomProductPages]
        in_app_purchases_v2: Optional[InAppPurchasesV2]
        promoted_purchases: Optional[PromotedPurchases]
        app_events: Optional[AppEvents]
        review_submissions: Optional[ReviewSubmissions]
        subscription_grace_period: Optional[SubscriptionGracePeriod]
        customer_reviews: Optional[CustomerReviews]
        customer_review_summarizations: Optional[CustomerReviewSummarizations]
        game_center_detail: Optional[GameCenterDetail]
        app_store_version_experiments_v2: Optional[AppStoreVersionExperimentsV2]
        alternative_distribution_key: Optional[AlternativeDistributionKey]
        analytics_report_requests: Optional[AnalyticsReportRequests]
        marketplace_search_detail: Optional[MarketplaceSearchDetail]
        build_uploads: Optional[BuildUploads]
        background_assets: Optional[BackgroundAssets]
        beta_feedback_screenshot_submissions: Optional[BetaFeedbackScreenshotSubmissions]
        beta_feedback_crash_submissions: Optional[BetaFeedbackCrashSubmissions]
        search_keywords: Optional[SearchKeywords]
        webhooks: Optional[Webhooks]

    id: str
    type: Literal["apps"] = "apps"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BackgroundAssetUploadFile(ApplaudModel):
    class Attributes(ApplaudModel):
        class AssetType(StringEnum):
            ASSET = 'ASSET'
            MANIFEST = 'MANIFEST'

        asset_delivery_state: Optional[AppMediaAssetState]
        asset_token: Optional[str]
        asset_type: Optional[AssetType]
        file_name: Optional[str]
        file_size: Optional[int]
        source_file_checksum: Optional[str] = Field(None, deprecated=True)
        source_file_checksums: Optional[Checksums]
        upload_operations: Optional[list[DeliveryFileUploadOperation]]

    id: str
    type: Literal["backgroundAssetUploadFiles"] = "backgroundAssetUploadFiles"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BackgroundAssetVersionAppStoreRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        state: Optional[BackgroundAssetVersionAppStoreReleaseState]

    class Relationships(ApplaudModel):
        class BackgroundAssetVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        background_asset_version: Optional[BackgroundAssetVersion]

    id: str
    type: Literal["backgroundAssetVersionAppStoreReleases"] = "backgroundAssetVersionAppStoreReleases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BackgroundAssetVersionExternalBetaRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        state: Optional[BackgroundAssetVersionExternalBetaReleaseState]

    class Relationships(ApplaudModel):
        class BackgroundAssetVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        background_asset_version: Optional[BackgroundAssetVersion]

    id: str
    type: Literal["backgroundAssetVersionExternalBetaReleases"] = "backgroundAssetVersionExternalBetaReleases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BackgroundAssetVersionInternalBetaRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            READY_FOR_TESTING = 'READY_FOR_TESTING'
            SUPERSEDED = 'SUPERSEDED'

        state: Optional[State]

    class Relationships(ApplaudModel):
        class BackgroundAssetVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        background_asset_version: Optional[BackgroundAssetVersion]

    id: str
    type: Literal["backgroundAssetVersionInternalBetaReleases"] = "backgroundAssetVersionInternalBetaReleases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BackgroundAssetVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        created_date: Optional[datetime.datetime]
        platforms: Optional[list[Platform]]
        state: Optional[BackgroundAssetVersionState]
        version: Optional[str]

    class Relationships(ApplaudModel):
        class BackgroundAsset(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssets"] = "backgroundAssets"

            data: Optional[Data]

        class InternalBetaRelease(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersionInternalBetaReleases"] = "backgroundAssetVersionInternalBetaReleases"

            data: Optional[Data]

        class ExternalBetaRelease(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersionExternalBetaReleases"] = "backgroundAssetVersionExternalBetaReleases"

            data: Optional[Data]

        class AppStoreRelease(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersionAppStoreReleases"] = "backgroundAssetVersionAppStoreReleases"

            data: Optional[Data]

        class AssetFile(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetUploadFiles"] = "backgroundAssetUploadFiles"

            data: Optional[Data]

        class ManifestFile(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetUploadFiles"] = "backgroundAssetUploadFiles"

            data: Optional[Data]

        class BackgroundAssetUploadFiles(ApplaudModel):
            links: Optional[RelationshipLinks]

        background_asset: Optional[BackgroundAsset]
        internal_beta_release: Optional[InternalBetaRelease]
        external_beta_release: Optional[ExternalBetaRelease]
        app_store_release: Optional[AppStoreRelease]
        asset_file: Optional[AssetFile]
        manifest_file: Optional[ManifestFile]
        background_asset_upload_files: Optional[BackgroundAssetUploadFiles]

    id: str
    type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BackgroundAsset(ApplaudModel):
    class Attributes(ApplaudModel):
        asset_pack_identifier: Optional[str]
        created_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class Versions(ApplaudModel):
            links: Optional[RelationshipLinks]

        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        class InternalBetaVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        class ExternalBetaVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        app: Optional[App]
        versions: Optional[Versions]
        app_store_version: Optional[AppStoreVersion]
        internal_beta_version: Optional[InternalBetaVersion]
        external_beta_version: Optional[ExternalBetaVersion]

    id: str
    type: Literal["backgroundAssets"] = "backgroundAssets"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaAppClipInvocationLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        title: Optional[str]
        locale: Optional[str]

    id: str
    type: Literal["betaAppClipInvocationLocalizations"] = "betaAppClipInvocationLocalizations"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BetaAppClipInvocationLocalizationInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: str
        title: str

    class Relationships(ApplaudModel):
        class BetaAppClipInvocation(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaAppClipInvocations"] = "betaAppClipInvocations"

            data: Optional[Data]

        beta_app_clip_invocation: Optional[BetaAppClipInvocation]

    attributes: Attributes
    type: Literal["betaAppClipInvocationLocalizations"] = "betaAppClipInvocationLocalizations"
    id: Optional[str]
    relationships: Optional[Relationships]

class BetaAppClipInvocation(ApplaudModel):
    class Attributes(ApplaudModel):
        url: Optional[AnyUrl]

    class Relationships(ApplaudModel):
        class BetaAppClipInvocationLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaAppClipInvocationLocalizations"] = "betaAppClipInvocationLocalizations"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        beta_app_clip_invocation_localizations: Optional[BetaAppClipInvocationLocalizations]

    id: str
    type: Literal["betaAppClipInvocations"] = "betaAppClipInvocations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaAppLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        feedback_email: Optional[str]
        marketing_url: Optional[str]
        privacy_policy_url: Optional[str]
        tv_os_privacy_policy: Optional[str]
        description: Optional[str]
        locale: Optional[str]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app: Optional[App]

    id: str
    type: Literal["betaAppLocalizations"] = "betaAppLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaAppReviewDetail(ApplaudModel):
    class Attributes(ApplaudModel):
        contact_first_name: Optional[str]
        contact_last_name: Optional[str]
        contact_phone: Optional[str]
        contact_email: Optional[str]
        demo_account_name: Optional[str]
        demo_account_password: Optional[str]
        demo_account_required: Optional[bool]
        notes: Optional[str]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app: Optional[App]

    id: str
    type: Literal["betaAppReviewDetails"] = "betaAppReviewDetails"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaAppReviewSubmission(ApplaudModel):
    class Attributes(ApplaudModel):
        beta_review_state: Optional[BetaReviewState]
        submitted_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        build: Optional[Build]

    id: str
    type: Literal["betaAppReviewSubmissions"] = "betaAppReviewSubmissions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaBuildLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        whats_new: Optional[str]
        locale: Optional[str]

    class Relationships(ApplaudModel):
        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        build: Optional[Build]

    id: str
    type: Literal["betaBuildLocalizations"] = "betaBuildLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaCrashLog(ApplaudModel):
    class Attributes(ApplaudModel):
        log_text: Optional[str]

    id: str
    type: Literal["betaCrashLogs"] = "betaCrashLogs"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BetaFeedbackCrashSubmission(ApplaudModel):
    class Attributes(ApplaudModel):
        created_date: Optional[datetime.datetime]
        comment: Optional[str]
        email: Optional[str]
        device_model: Optional[str]
        os_version: Optional[str]
        locale: Optional[str]
        time_zone: Optional[str]
        architecture: Optional[str]
        connection_type: Optional[DeviceConnectionType]
        paired_apple_watch: Optional[str]
        app_uptime_in_milliseconds: Optional[int]
        disk_bytes_available: Optional[int]
        disk_bytes_total: Optional[int]
        battery_percentage: Optional[int]
        screen_width_in_points: Optional[int]
        screen_height_in_points: Optional[int]
        app_platform: Optional[Platform]
        device_platform: Optional[Platform]
        device_family: Optional[DeviceFamily]
        build_bundle_id: Optional[str]

    class Relationships(ApplaudModel):
        class CrashLog(ApplaudModel):
            links: Optional[RelationshipLinks]

        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            data: Optional[Data]

        class Tester(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaTesters"] = "betaTesters"

            data: Optional[Data]

        crash_log: Optional[CrashLog]
        build: Optional[Build]
        tester: Optional[Tester]

    id: str
    type: Literal["betaFeedbackCrashSubmissions"] = "betaFeedbackCrashSubmissions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaFeedbackScreenshotSubmission(ApplaudModel):
    class Attributes(ApplaudModel):
        created_date: Optional[datetime.datetime]
        comment: Optional[str]
        email: Optional[str]
        device_model: Optional[str]
        os_version: Optional[str]
        locale: Optional[str]
        time_zone: Optional[str]
        architecture: Optional[str]
        connection_type: Optional[DeviceConnectionType]
        paired_apple_watch: Optional[str]
        app_uptime_in_milliseconds: Optional[int]
        disk_bytes_available: Optional[int]
        disk_bytes_total: Optional[int]
        battery_percentage: Optional[int]
        screen_width_in_points: Optional[int]
        screen_height_in_points: Optional[int]
        app_platform: Optional[Platform]
        device_platform: Optional[Platform]
        device_family: Optional[DeviceFamily]
        build_bundle_id: Optional[str]
        screenshots: Optional[list[BetaFeedbackScreenshotImage]]

    class Relationships(ApplaudModel):
        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            data: Optional[Data]

        class Tester(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaTesters"] = "betaTesters"

            data: Optional[Data]

        build: Optional[Build]
        tester: Optional[Tester]

    id: str
    type: Literal["betaFeedbackScreenshotSubmissions"] = "betaFeedbackScreenshotSubmissions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaGroup(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        created_date: Optional[datetime.datetime]
        is_internal_group: Optional[bool]
        has_access_to_all_builds: Optional[bool]
        public_link_enabled: Optional[bool]
        public_link_id: Optional[str]
        public_link_limit_enabled: Optional[bool]
        public_link_limit: Optional[int]
        public_link: Optional[str]
        feedback_enabled: Optional[bool]
        ios_builds_available_for_apple_silicon_mac: Optional[bool]
        ios_builds_available_for_apple_vision: Optional[bool]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Builds(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaTesters(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaTesters"] = "betaTesters"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaRecruitmentCriteria(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaRecruitmentCriteria"] = "betaRecruitmentCriteria"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BetaRecruitmentCriterionCompatibleBuildCheck(ApplaudModel):
            links: Optional[RelationshipLinks]

        app: Optional[App]
        builds: Optional[Builds]
        beta_testers: Optional[BetaTesters]
        beta_recruitment_criteria: Optional[BetaRecruitmentCriteria]
        beta_recruitment_criterion_compatible_build_check: Optional[BetaRecruitmentCriterionCompatibleBuildCheck]

    id: str
    type: Literal["betaGroups"] = "betaGroups"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaLicenseAgreement(ApplaudModel):
    class Attributes(ApplaudModel):
        agreement_text: Optional[str]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        app: Optional[App]

    id: str
    type: Literal["betaLicenseAgreements"] = "betaLicenseAgreements"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BetaRecruitmentCriterion(ApplaudModel):
    class Attributes(ApplaudModel):
        last_modified_date: Optional[datetime.datetime]
        device_family_os_version_filters: Optional[list[DeviceFamilyOsVersionFilter]]

    id: str
    type: Literal["betaRecruitmentCriteria"] = "betaRecruitmentCriteria"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BetaRecruitmentCriterionCompatibleBuildCheck(ApplaudModel):
    class Attributes(ApplaudModel):
        has_compatible_build: Optional[bool]

    id: str
    type: Literal["betaRecruitmentCriterionCompatibleBuildChecks"] = "betaRecruitmentCriterionCompatibleBuildChecks"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BetaRecruitmentCriterionOption(ApplaudModel):
    class Attributes(ApplaudModel):
        class DeviceFamilyOsVersion(ApplaudModel):
            device_family: Optional[DeviceFamily]
            os_versions: Optional[list[str]]

        device_family_os_versions: Optional[list[DeviceFamilyOsVersion]]

    id: str
    type: Literal["betaRecruitmentCriterionOptions"] = "betaRecruitmentCriterionOptions"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BetaTesterInvitation(ApplaudModel):
    id: str
    type: Literal["betaTesterInvitations"] = "betaTesterInvitations"
    links: Optional[ResourceLinks]

class BetaTester(ApplaudModel):
    class Attributes(ApplaudModel):
        first_name: Optional[str]
        last_name: Optional[str]
        email: Optional[EmailStr]
        invite_type: Optional[BetaInviteType]
        state: Optional[BetaTesterState]

    class Relationships(ApplaudModel):
        class Apps(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaGroups(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaGroups"] = "betaGroups"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Builds(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        apps: Optional[Apps]
        beta_groups: Optional[BetaGroups]
        builds: Optional[Builds]

    id: str
    type: Literal["betaTesters"] = "betaTesters"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BuildBetaDetail(ApplaudModel):
    class Attributes(ApplaudModel):
        auto_notify_enabled: Optional[bool]
        internal_build_state: Optional[InternalBetaState]
        external_build_state: Optional[ExternalBetaState]

    class Relationships(ApplaudModel):
        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        build: Optional[Build]

    id: str
    type: Literal["buildBetaDetails"] = "buildBetaDetails"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BuildBetaNotification(ApplaudModel):
    id: str
    type: Literal["buildBetaNotifications"] = "buildBetaNotifications"
    links: Optional[ResourceLinks]

class BuildBundleFileSize(ApplaudModel):
    class Attributes(ApplaudModel):
        device_model: Optional[str]
        os_version: Optional[str]
        download_bytes: Optional[int]
        install_bytes: Optional[int]

    id: str
    type: Literal["buildBundleFileSizes"] = "buildBundleFileSizes"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BuildBundle(ApplaudModel):
    class Attributes(ApplaudModel):
        bundle_id: Optional[str]
        bundle_type: Optional[BuildBundleType]
        sdk_build: Optional[str]
        platform_build: Optional[str]
        file_name: Optional[str]
        has_sirikit: Optional[bool]
        has_on_demand_resources: Optional[bool]
        has_prerendered_icon: Optional[bool]
        uses_location_services: Optional[bool]
        is_ios_build_mac_app_store_compatible: Optional[bool]
        includes_symbols: Optional[bool]
        d_sym_url: Optional[AnyUrl]
        supported_architectures: Optional[list[str]]
        required_capabilities: Optional[list[str]]
        device_protocols: Optional[list[str]]
        locales: Optional[list[str]]
        entitlements: Optional[dict[str, dict[str, str]]]
        ba_download_allowance: Optional[int]
        ba_max_install_size: Optional[int]

    class Relationships(ApplaudModel):
        class AppClipDomainCacheStatus(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDomainStatuses"] = "appClipDomainStatuses"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppClipDomainDebugStatus(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appClipDomainStatuses"] = "appClipDomainStatuses"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BetaAppClipInvocations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaAppClipInvocations"] = "betaAppClipInvocations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BuildBundleFileSizes(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildBundleFileSizes"] = "buildBundleFileSizes"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app_clip_domain_cache_status: Optional[AppClipDomainCacheStatus]
        app_clip_domain_debug_status: Optional[AppClipDomainDebugStatus]
        beta_app_clip_invocations: Optional[BetaAppClipInvocations]
        build_bundle_file_sizes: Optional[BuildBundleFileSizes]

    id: str
    type: Literal["buildBundles"] = "buildBundles"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BuildIcon(ApplaudModel):
    class Attributes(ApplaudModel):
        icon_asset: Optional[ImageAsset]
        icon_type: Optional[IconAssetType]
        masked: Optional[bool]
        name: Optional[str]

    id: str
    type: Literal["buildIcons"] = "buildIcons"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BuildUploadFile(ApplaudModel):
    class Attributes(ApplaudModel):
        class AssetType(StringEnum):
            ASSET = 'ASSET'
            ASSET_DESCRIPTION = 'ASSET_DESCRIPTION'
            ASSET_SPI = 'ASSET_SPI'

        class Uti(StringEnum):
            com_apple_binary_property_list = 'com.apple.binary-property-list'
            com_apple_ipa = 'com.apple.ipa'
            com_apple_pkg = 'com.apple.pkg'
            com_apple_xml_property_list = 'com.apple.xml-property-list'
            com_pkware_zip_archive = 'com.pkware.zip-archive'

        asset_delivery_state: Optional[AppMediaAssetState]
        asset_token: Optional[str]
        asset_type: Optional[AssetType]
        file_name: Optional[str]
        file_size: Optional[int]
        source_file_checksums: Optional[Checksums]
        upload_operations: Optional[list[DeliveryFileUploadOperation]]
        uti: Optional[Uti]

    id: str
    type: Literal["buildUploadFiles"] = "buildUploadFiles"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BuildUpload(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(ApplaudModel):
            errors: Optional[list[StateDetail]]
            warnings: Optional[list[StateDetail]]
            infos: Optional[list[StateDetail]]
            state: Optional[BuildUploadState]

        cf_bundle_short_version_string: Optional[str]
        cf_bundle_version: Optional[str]
        created_date: Optional[datetime.datetime]
        state: Optional[State]
        platform: Optional[Platform]
        uploaded_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class Build(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            data: Optional[Data]

        class AssetFile(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildUploadFiles"] = "buildUploadFiles"

            data: Optional[Data]

        class AssetDescriptionFile(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildUploadFiles"] = "buildUploadFiles"

            data: Optional[Data]

        class AssetSpiFile(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildUploadFiles"] = "buildUploadFiles"

            data: Optional[Data]

        class BuildUploadFiles(ApplaudModel):
            links: Optional[RelationshipLinks]

        build: Optional[Build]
        asset_file: Optional[AssetFile]
        asset_description_file: Optional[AssetDescriptionFile]
        asset_spi_file: Optional[AssetSpiFile]
        build_upload_files: Optional[BuildUploadFiles]

    id: str
    type: Literal["buildUploads"] = "buildUploads"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class Build(ApplaudModel):
    class Attributes(ApplaudModel):
        version: Optional[str]
        uploaded_date: Optional[datetime.datetime]
        expiration_date: Optional[datetime.datetime]
        expired: Optional[bool]
        min_os_version: Optional[str]
        ls_minimum_system_version: Optional[str]
        computed_min_mac_os_version: Optional[str]
        computed_min_vision_os_version: Optional[str]
        icon_asset_token: Optional[ImageAsset]
        processing_state: Optional[BuildProcessingState]
        build_audience_type: Optional[BuildAudienceType]
        uses_non_exempt_encryption: Optional[bool]

    class Relationships(ApplaudModel):
        class PreReleaseVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["preReleaseVersions"] = "preReleaseVersions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class IndividualTesters(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaTesters"] = "betaTesters"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaGroups(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaGroups"] = "betaGroups"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BetaBuildLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaBuildLocalizations"] = "betaBuildLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppEncryptionDeclaration(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BetaAppReviewSubmission(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["betaAppReviewSubmissions"] = "betaAppReviewSubmissions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BuildBetaDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildBetaDetails"] = "buildBetaDetails"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Icons(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildIcons"] = "buildIcons"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BuildBundles(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildBundles"] = "buildBundles"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BuildUpload(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["buildUploads"] = "buildUploads"

            data: Optional[Data]

        class PerfPowerMetrics(ApplaudModel):
            links: Optional[RelationshipLinks]

        class DiagnosticSignatures(ApplaudModel):
            links: Optional[RelationshipLinks]

        pre_release_version: Optional[PreReleaseVersion]
        individual_testers: Optional[IndividualTesters]
        beta_groups: Optional[BetaGroups]
        beta_build_localizations: Optional[BetaBuildLocalizations]
        app_encryption_declaration: Optional[AppEncryptionDeclaration]
        beta_app_review_submission: Optional[BetaAppReviewSubmission]
        app: Optional[App]
        build_beta_detail: Optional[BuildBetaDetail]
        app_store_version: Optional[AppStoreVersion]
        icons: Optional[Icons]
        build_bundles: Optional[BuildBundles]
        build_upload: Optional[BuildUpload]
        perf_power_metrics: Optional[PerfPowerMetrics]
        diagnostic_signatures: Optional[DiagnosticSignatures]

    id: str
    type: Literal["builds"] = "builds"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class BundleIdCapability(ApplaudModel):
    class Attributes(ApplaudModel):
        capability_type: Optional[CapabilityType]
        settings: Optional[list[CapabilitySetting]]

    id: str
    type: Literal["bundleIdCapabilities"] = "bundleIdCapabilities"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class BundleId(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        platform: Optional[BundleIdPlatform]
        identifier: Optional[str]
        seed_id: Optional[str]

    class Relationships(ApplaudModel):
        class Profiles(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["profiles"] = "profiles"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class BundleIdCapabilities(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["bundleIdCapabilities"] = "bundleIdCapabilities"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        profiles: Optional[Profiles]
        bundle_id_capabilities: Optional[BundleIdCapabilities]
        app: Optional[App]

    id: str
    type: Literal["bundleIds"] = "bundleIds"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class Certificate(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        certificate_type: Optional[CertificateType]
        display_name: Optional[str]
        serial_number: Optional[str]
        platform: Optional[BundleIdPlatform]
        expiration_date: Optional[datetime.datetime]
        certificate_content: Optional[str]
        activated: Optional[bool]

    class Relationships(ApplaudModel):
        class PassTypeId(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["passTypeIds"] = "passTypeIds"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        pass_type_id: Optional[PassTypeId]

    id: str
    type: Literal["certificates"] = "certificates"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CiArtifact(ApplaudModel):
    class Attributes(ApplaudModel):
        file_type: Optional[CiArtifactFileType]
        file_name: Optional[str]
        file_size: Optional[int]
        download_url: Optional[AnyUrl]

    id: str
    type: Literal["ciArtifacts"] = "ciArtifacts"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class CiBuildAction(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        action_type: Optional[CiActionType]
        started_date: Optional[datetime.datetime]
        finished_date: Optional[datetime.datetime]
        issue_counts: Optional[CiIssueCounts]
        execution_progress: Optional[CiExecutionProgress]
        completion_status: Optional[CiCompletionStatus]
        is_required_to_pass: Optional[bool]

    class Relationships(ApplaudModel):
        class BuildRun(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciBuildRuns"] = "ciBuildRuns"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Artifacts(ApplaudModel):
            links: Optional[RelationshipLinks]

        class Issues(ApplaudModel):
            links: Optional[RelationshipLinks]

        class TestResults(ApplaudModel):
            links: Optional[RelationshipLinks]

        build_run: Optional[BuildRun]
        artifacts: Optional[Artifacts]
        issues: Optional[Issues]
        test_results: Optional[TestResults]

    id: str
    type: Literal["ciBuildActions"] = "ciBuildActions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CiBuildRun(ApplaudModel):
    class Attributes(ApplaudModel):
        class SourceCommit(ApplaudModel):
            commit_sha: Optional[str]
            message: Optional[str]
            author: Optional[CiGitUser]
            committer: Optional[CiGitUser]
            web_url: Optional[AnyUrl]

        class DestinationCommit(ApplaudModel):
            commit_sha: Optional[str]
            message: Optional[str]
            author: Optional[CiGitUser]
            committer: Optional[CiGitUser]
            web_url: Optional[AnyUrl]

        number: Optional[int]
        created_date: Optional[datetime.datetime]
        started_date: Optional[datetime.datetime]
        finished_date: Optional[datetime.datetime]
        source_commit: Optional[SourceCommit]
        destination_commit: Optional[DestinationCommit]
        is_pull_request_build: Optional[bool]
        issue_counts: Optional[CiIssueCounts]
        execution_progress: Optional[CiExecutionProgress]
        completion_status: Optional[CiCompletionStatus]
        start_reason: Optional[CiBuildRunStartReason]
        cancel_reason: Optional[CiBuildRunCancelReason]

    class Relationships(ApplaudModel):
        class Builds(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Workflow(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciWorkflows"] = "ciWorkflows"

            data: Optional[Data]

        class Product(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciProducts"] = "ciProducts"

            data: Optional[Data]

        class SourceBranchOrTag(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmGitReferences"] = "scmGitReferences"

            data: Optional[Data]

        class DestinationBranch(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmGitReferences"] = "scmGitReferences"

            data: Optional[Data]

        class Actions(ApplaudModel):
            links: Optional[RelationshipLinks]

        class PullRequest(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmPullRequests"] = "scmPullRequests"

            data: Optional[Data]

        builds: Optional[Builds]
        workflow: Optional[Workflow]
        product: Optional[Product]
        source_branch_or_tag: Optional[SourceBranchOrTag]
        destination_branch: Optional[DestinationBranch]
        actions: Optional[Actions]
        pull_request: Optional[PullRequest]

    id: str
    type: Literal["ciBuildRuns"] = "ciBuildRuns"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CiIssue(ApplaudModel):
    class Attributes(ApplaudModel):
        issue_type: Optional[CiIssueType]
        message: Optional[str]
        file_source: Optional[FileLocation]
        category: Optional[str]

    id: str
    type: Literal["ciIssues"] = "ciIssues"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class CiMacOsVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        version: Optional[str]
        name: Optional[str]

    class Relationships(ApplaudModel):
        class XcodeVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciXcodeVersions"] = "ciXcodeVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        xcode_versions: Optional[XcodeVersions]

    id: str
    type: Literal["ciMacOsVersions"] = "ciMacOsVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CiProduct(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        created_date: Optional[datetime.datetime]
        product_type: Optional[CiProductType]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class BundleId(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["bundleIds"] = "bundleIds"

            data: Optional[Data]

        class Workflows(ApplaudModel):
            links: Optional[RelationshipLinks]

        class PrimaryRepositories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmRepositories"] = "scmRepositories"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AdditionalRepositories(ApplaudModel):
            links: Optional[RelationshipLinks]

        class BuildRuns(ApplaudModel):
            links: Optional[RelationshipLinks]

        app: Optional[App]
        bundle_id: Optional[BundleId]
        workflows: Optional[Workflows]
        primary_repositories: Optional[PrimaryRepositories]
        additional_repositories: Optional[AdditionalRepositories]
        build_runs: Optional[BuildRuns]

    id: str
    type: Literal["ciProducts"] = "ciProducts"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CiTestResult(ApplaudModel):
    class Attributes(ApplaudModel):
        class DestinationTestResult(ApplaudModel):
            uuid: Optional[str]
            device_name: Optional[str]
            os_version: Optional[str]
            status: Optional[CiTestStatus]
            duration: Optional[float]

        class_name: Optional[str]
        name: Optional[str]
        status: Optional[CiTestStatus]
        file_source: Optional[FileLocation]
        message: Optional[str]
        destination_test_results: Optional[list[DestinationTestResult]]

    id: str
    type: Literal["ciTestResults"] = "ciTestResults"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class CiWorkflow(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        description: Optional[str]
        branch_start_condition: Optional[CiBranchStartCondition]
        tag_start_condition: Optional[CiTagStartCondition]
        pull_request_start_condition: Optional[CiPullRequestStartCondition]
        scheduled_start_condition: Optional[CiScheduledStartCondition]
        manual_branch_start_condition: Optional[CiManualBranchStartCondition]
        manual_tag_start_condition: Optional[CiManualTagStartCondition]
        manual_pull_request_start_condition: Optional[CiManualPullRequestStartCondition]
        actions: Optional[list[CiAction]]
        is_enabled: Optional[bool]
        is_locked_for_editing: Optional[bool]
        clean: Optional[bool]
        container_file_path: Optional[str]
        last_modified_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class Product(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciProducts"] = "ciProducts"

            data: Optional[Data]

        class Repository(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmRepositories"] = "scmRepositories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class XcodeVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciXcodeVersions"] = "ciXcodeVersions"

            data: Optional[Data]

        class MacOsVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciMacOsVersions"] = "ciMacOsVersions"

            data: Optional[Data]

        class BuildRuns(ApplaudModel):
            links: Optional[RelationshipLinks]

        product: Optional[Product]
        repository: Optional[Repository]
        xcode_version: Optional[XcodeVersion]
        mac_os_version: Optional[MacOsVersion]
        build_runs: Optional[BuildRuns]

    id: str
    type: Literal["ciWorkflows"] = "ciWorkflows"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CiXcodeVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        class TestDestination(ApplaudModel):
            class AvailableRuntime(ApplaudModel):
                runtime_name: Optional[str]
                runtime_identifier: Optional[str]

            device_type_name: Optional[str]
            device_type_identifier: Optional[str]
            available_runtimes: Optional[list[AvailableRuntime]]
            kind: Optional[CiTestDestinationKind]

        version: Optional[str]
        name: Optional[str]
        test_destinations: Optional[list[TestDestination]]

    class Relationships(ApplaudModel):
        class MacOsVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["ciMacOsVersions"] = "ciMacOsVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        mac_os_versions: Optional[MacOsVersions]

    id: str
    type: Literal["ciXcodeVersions"] = "ciXcodeVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CustomerReviewResponseV1(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PUBLISHED = 'PUBLISHED'
            PENDING_PUBLISH = 'PENDING_PUBLISH'

        response_body: Optional[str]
        last_modified_date: Optional[datetime.datetime]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class Review(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["customerReviews"] = "customerReviews"

            data: Optional[Data]

        review: Optional[Review]

    id: str
    type: Literal["customerReviewResponses"] = "customerReviewResponses"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CustomerReviewSummarization(ApplaudModel):
    class Attributes(ApplaudModel):
        created_date: Optional[datetime.datetime]
        locale: Optional[str]
        platform: Optional[Platform]
        text: Optional[str]

    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        territory: Optional[Territory]

    id: str
    type: Literal["customerReviewSummarizations"] = "customerReviewSummarizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class CustomerReview(ApplaudModel):
    class Attributes(ApplaudModel):
        rating: Optional[int]
        title: Optional[str]
        body: Optional[str]
        reviewer_nickname: Optional[str]
        created_date: Optional[datetime.datetime]
        territory: Optional[TerritoryCode]

    class Relationships(ApplaudModel):
        class Response(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["customerReviewResponses"] = "customerReviewResponses"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        response: Optional[Response]

    id: str
    type: Literal["customerReviews"] = "customerReviews"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class DiagnosticLog(ApplaudModel):
    id: str
    type: Literal["diagnosticLogs"] = "diagnosticLogs"
    links: Optional[ResourceLinks]

class DiagnosticSignature(ApplaudModel):
    class Attributes(ApplaudModel):
        diagnostic_type: Optional[DiagnosticType]
        signature: Optional[str]
        weight: Optional[float]
        insight: Optional[DiagnosticInsight]

    class Relationships(ApplaudModel):
        class Logs(ApplaudModel):
            links: Optional[RelationshipLinks]

        logs: Optional[Logs]

    id: str
    type: Literal["diagnosticSignatures"] = "diagnosticSignatures"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class EndAppAvailabilityPreOrder(ApplaudModel):
    id: str
    type: Literal["endAppAvailabilityPreOrders"] = "endAppAvailabilityPreOrders"
    links: Optional[ResourceLinks]

class EndUserLicenseAgreement(ApplaudModel):
    class Attributes(ApplaudModel):
        agreement_text: Optional[str]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class Territories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app: Optional[App]
        territories: Optional[Territories]

    id: str
    type: Literal["endUserLicenseAgreements"] = "endUserLicenseAgreements"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterAchievementImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class GameCenterAchievementLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievementLocalizations"] = "gameCenterAchievementLocalizations"

            data: Optional[Data]

        game_center_achievement_localization: Optional[GameCenterAchievementLocalization]

    id: str
    type: Literal["gameCenterAchievementImages"] = "gameCenterAchievementImages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterAchievementLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]
        before_earned_description: Optional[str]
        after_earned_description: Optional[str]

    class Relationships(ApplaudModel):
        class GameCenterAchievement(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class GameCenterAchievementImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievementImages"] = "gameCenterAchievementImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_achievement: Optional[GameCenterAchievement]
        game_center_achievement_image: Optional[GameCenterAchievementImage]

    id: str
    type: Literal["gameCenterAchievementLocalizations"] = "gameCenterAchievementLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterAchievementRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        live: Optional[bool]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterAchievement(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

            data: Optional[Data]

        game_center_detail: Optional[GameCenterDetail]
        game_center_achievement: Optional[GameCenterAchievement]

    id: str
    type: Literal["gameCenterAchievementReleases"] = "gameCenterAchievementReleases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterAchievement(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]
        vendor_identifier: Optional[str]
        points: Optional[int]
        show_before_earned: Optional[bool]
        repeatable: Optional[bool]
        archived: Optional[bool]
        activity_properties: Optional[StringToStringMap]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterGroups"] = "gameCenterGroups"

            data: Optional[Data]

        @deprecated
        class GroupAchievement(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievementLocalizations"] = "gameCenterAchievementLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Releases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievementReleases"] = "gameCenterAchievementReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Activity(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivities"] = "gameCenterActivities"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_detail: Optional[GameCenterDetail]
        game_center_group: Optional[GameCenterGroup]
        group_achievement: Optional[GroupAchievement] = Field(None, deprecated=True)
        localizations: Optional[Localizations]
        releases: Optional[Releases]
        activity: Optional[Activity]

    id: str
    type: Literal["gameCenterAchievements"] = "gameCenterAchievements"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterActivity(ApplaudModel):
    class Attributes(ApplaudModel):
        class PlayStyle(StringEnum):
            ASYNCHRONOUS = 'ASYNCHRONOUS'
            SYNCHRONOUS = 'SYNCHRONOUS'

        reference_name: Optional[str]
        vendor_identifier: Optional[str]
        play_style: Optional[PlayStyle]
        minimum_players_count: Optional[int]
        maximum_players_count: Optional[int]
        supports_party_code: Optional[bool]
        archived: Optional[bool]
        properties: Optional[StringToStringMap]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterGroups"] = "gameCenterGroups"

            data: Optional[Data]

        class Achievements(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Leaderboards(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Versions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        game_center_detail: Optional[GameCenterDetail]
        game_center_group: Optional[GameCenterGroup]
        achievements: Optional[Achievements]
        leaderboards: Optional[Leaderboards]
        versions: Optional[Versions]

    id: str
    type: Literal["gameCenterActivities"] = "gameCenterActivities"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterActivityImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    id: str
    type: Literal["gameCenterActivityImages"] = "gameCenterActivityImages"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class GameCenterActivityLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]
        description: Optional[str]

    class Relationships(ApplaudModel):
        class Version(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"

            data: Optional[Data]

        class Image(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityImages"] = "gameCenterActivityImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        version: Optional[Version]
        image: Optional[Image]

    id: str
    type: Literal["gameCenterActivityLocalizations"] = "gameCenterActivityLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterActivityVersionRelease(ApplaudModel):
    class Relationships(ApplaudModel):
        class Version(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"

            data: Optional[Data]

        version: Optional[Version]

    id: str
    type: Literal["gameCenterActivityVersionReleases"] = "gameCenterActivityVersionReleases"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterActivityVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        version: Optional[int]
        state: Optional[GameCenterVersionState]
        fallback_url: Optional[str]

    class Relationships(ApplaudModel):
        class Activity(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivities"] = "gameCenterActivities"

            data: Optional[Data]

        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityLocalizations"] = "gameCenterActivityLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class DefaultImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityImages"] = "gameCenterActivityImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Releases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityVersionReleases"] = "gameCenterActivityVersionReleases"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        activity: Optional[Activity]
        localizations: Optional[Localizations]
        default_image: Optional[DefaultImage]
        releases: Optional[Releases]

    id: str
    type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterAppVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        enabled: Optional[bool]

    class Relationships(ApplaudModel):
        class CompatibilityVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        compatibility_versions: Optional[CompatibilityVersions]
        app_store_version: Optional[AppStoreVersion]

    id: str
    type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterChallengeImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    id: str
    type: Literal["gameCenterChallengeImages"] = "gameCenterChallengeImages"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class GameCenterChallengeLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]
        description: Optional[str]

    class Relationships(ApplaudModel):
        class Version(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

            data: Optional[Data]

        class Image(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeImages"] = "gameCenterChallengeImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        version: Optional[Version]
        image: Optional[Image]

    id: str
    type: Literal["gameCenterChallengeLocalizations"] = "gameCenterChallengeLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterChallengeVersionRelease(ApplaudModel):
    class Relationships(ApplaudModel):
        class Version(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

            data: Optional[Data]

        version: Optional[Version]

    id: str
    type: Literal["gameCenterChallengeVersionReleases"] = "gameCenterChallengeVersionReleases"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterChallengeVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        version: Optional[int]
        state: Optional[GameCenterVersionState]

    class Relationships(ApplaudModel):
        class Challenge(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallenges"] = "gameCenterChallenges"

            data: Optional[Data]

        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeLocalizations"] = "gameCenterChallengeLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Releases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeVersionReleases"] = "gameCenterChallengeVersionReleases"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class DefaultImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeImages"] = "gameCenterChallengeImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        challenge: Optional[Challenge]
        localizations: Optional[Localizations]
        releases: Optional[Releases]
        default_image: Optional[DefaultImage]

    id: str
    type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterChallenge(ApplaudModel):
    class Attributes(ApplaudModel):
        class ChallengeType(StringEnum):
            LEADERBOARD = 'LEADERBOARD'

        reference_name: Optional[str]
        vendor_identifier: Optional[str]
        archived: Optional[bool]
        challenge_type: Literal[ChallengeType.LEADERBOARD] = ChallengeType.LEADERBOARD
        repeatable: Optional[bool]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterGroups"] = "gameCenterGroups"

            data: Optional[Data]

        class Versions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Leaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_detail: Optional[GameCenterDetail]
        game_center_group: Optional[GameCenterGroup]
        versions: Optional[Versions]
        leaderboard: Optional[Leaderboard]

    id: str
    type: Literal["gameCenterChallenges"] = "gameCenterChallenges"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterDetail(ApplaudModel):
    class Attributes(ApplaudModel):
        arcade_enabled: Optional[bool]
        challenge_enabled: Optional[bool] = Field(None, deprecated=True)

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class GameCenterAppVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterGroups"] = "gameCenterGroups"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class GameCenterLeaderboards(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterLeaderboardSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterAchievements(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterActivities(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivities"] = "gameCenterActivities"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterChallenges(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallenges"] = "gameCenterChallenges"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class DefaultLeaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            data: Optional[Data]

        class DefaultGroupLeaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            data: Optional[Data]

        class AchievementReleases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievementReleases"] = "gameCenterAchievementReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class ActivityReleases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivityVersionReleases"] = "gameCenterActivityVersionReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class ChallengeReleases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallengeVersionReleases"] = "gameCenterChallengeVersionReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class LeaderboardReleases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardReleases"] = "gameCenterLeaderboardReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class LeaderboardSetReleases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSetReleases"] = "gameCenterLeaderboardSetReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class ChallengesMinimumPlatformVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        app: Optional[App]
        game_center_app_versions: Optional[GameCenterAppVersions]
        game_center_group: Optional[GameCenterGroup]
        game_center_leaderboards: Optional[GameCenterLeaderboards]
        game_center_leaderboard_sets: Optional[GameCenterLeaderboardSets]
        game_center_achievements: Optional[GameCenterAchievements]
        game_center_activities: Optional[GameCenterActivities]
        game_center_challenges: Optional[GameCenterChallenges]
        default_leaderboard: Optional[DefaultLeaderboard]
        default_group_leaderboard: Optional[DefaultGroupLeaderboard]
        achievement_releases: Optional[AchievementReleases]
        activity_releases: Optional[ActivityReleases]
        challenge_releases: Optional[ChallengeReleases]
        leaderboard_releases: Optional[LeaderboardReleases]
        leaderboard_set_releases: Optional[LeaderboardSetReleases]
        challenges_minimum_platform_versions: Optional[ChallengesMinimumPlatformVersions]

    id: str
    type: Literal["gameCenterDetails"] = "gameCenterDetails"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

@deprecated
class GameCenterEnabledVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        platform: Optional[Platform]
        version_string: Optional[str]
        icon_asset: Optional[ImageAsset]

    class Relationships(ApplaudModel):
        class CompatibleVersions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterEnabledVersions"] = "gameCenterEnabledVersions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        compatible_versions: Optional[CompatibleVersions]
        app: Optional[App]

    id: str
    type: Literal["gameCenterEnabledVersions"] = "gameCenterEnabledVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterGroup(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]

    class Relationships(ApplaudModel):
        class GameCenterDetails(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterLeaderboards(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterLeaderboardSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterAchievements(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterActivities(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivities"] = "gameCenterActivities"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterChallenges(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallenges"] = "gameCenterChallenges"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        game_center_details: Optional[GameCenterDetails]
        game_center_leaderboards: Optional[GameCenterLeaderboards]
        game_center_leaderboard_sets: Optional[GameCenterLeaderboardSets]
        game_center_achievements: Optional[GameCenterAchievements]
        game_center_activities: Optional[GameCenterActivities]
        game_center_challenges: Optional[GameCenterChallenges]

    id: str
    type: Literal["gameCenterGroups"] = "gameCenterGroups"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardEntrySubmission(ApplaudModel):
    class Attributes(ApplaudModel):
        bundle_id: Optional[str]
        challenge_ids: Optional[list[str]]
        context: Optional[str]
        scoped_player_id: Optional[str]
        score: Optional[str]
        submitted_date: Optional[datetime.datetime]
        vendor_identifier: Optional[str]

    id: str
    type: Literal["gameCenterLeaderboardEntrySubmissions"] = "gameCenterLeaderboardEntrySubmissions"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class GameCenterLeaderboardLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardLocalizations"] = "gameCenterLeaderboardLocalizations"

            data: Optional[Data]

        game_center_leaderboard_localization: Optional[GameCenterLeaderboardLocalization]

    id: str
    type: Literal["gameCenterLeaderboardImages"] = "gameCenterLeaderboardImages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]
        formatter_override: Optional[GameCenterLeaderboardFormatter]
        formatter_suffix: Optional[str]
        formatter_suffix_singular: Optional[str]
        description: Optional[str]

    class Relationships(ApplaudModel):
        class GameCenterLeaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            data: Optional[Data]

        class GameCenterLeaderboardImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardImages"] = "gameCenterLeaderboardImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_leaderboard: Optional[GameCenterLeaderboard]
        game_center_leaderboard_image: Optional[GameCenterLeaderboardImage]

    id: str
    type: Literal["gameCenterLeaderboardLocalizations"] = "gameCenterLeaderboardLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        live: Optional[bool]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterLeaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            data: Optional[Data]

        game_center_detail: Optional[GameCenterDetail]
        game_center_leaderboard: Optional[GameCenterLeaderboard]

    id: str
    type: Literal["gameCenterLeaderboardReleases"] = "gameCenterLeaderboardReleases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardSetImage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class GameCenterLeaderboardSetLocalization(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSetLocalizations"] = "gameCenterLeaderboardSetLocalizations"

            data: Optional[Data]

        game_center_leaderboard_set_localization: Optional[GameCenterLeaderboardSetLocalization]

    id: str
    type: Literal["gameCenterLeaderboardSetImages"] = "gameCenterLeaderboardSetImages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardSetLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        locale: Optional[str]
        name: Optional[str]

    class Relationships(ApplaudModel):
        class GameCenterLeaderboardSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            data: Optional[Data]

        class GameCenterLeaderboardSetImage(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSetImages"] = "gameCenterLeaderboardSetImages"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_leaderboard_set: Optional[GameCenterLeaderboardSet]
        game_center_leaderboard_set_image: Optional[GameCenterLeaderboardSetImage]

    id: str
    type: Literal["gameCenterLeaderboardSetLocalizations"] = "gameCenterLeaderboardSetLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardSetMemberLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        locale: Optional[str]

    class Relationships(ApplaudModel):
        class GameCenterLeaderboardSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class GameCenterLeaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_leaderboard_set: Optional[GameCenterLeaderboardSet]
        game_center_leaderboard: Optional[GameCenterLeaderboard]

    id: str
    type: Literal["gameCenterLeaderboardSetMemberLocalizations"] = "gameCenterLeaderboardSetMemberLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardSetRelease(ApplaudModel):
    class Attributes(ApplaudModel):
        live: Optional[bool]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterLeaderboardSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            data: Optional[Data]

        game_center_detail: Optional[GameCenterDetail]
        game_center_leaderboard_set: Optional[GameCenterLeaderboardSet]

    id: str
    type: Literal["gameCenterLeaderboardSetReleases"] = "gameCenterLeaderboardSetReleases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboardSet(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]
        vendor_identifier: Optional[str]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterGroups"] = "gameCenterGroups"

            data: Optional[Data]

        @deprecated
        class GroupLeaderboardSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSetLocalizations"] = "gameCenterLeaderboardSetLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class GameCenterLeaderboards(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Releases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSetReleases"] = "gameCenterLeaderboardSetReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        game_center_detail: Optional[GameCenterDetail]
        game_center_group: Optional[GameCenterGroup]
        group_leaderboard_set: Optional[GroupLeaderboardSet] = Field(None, deprecated=True)
        localizations: Optional[Localizations]
        game_center_leaderboards: Optional[GameCenterLeaderboards]
        releases: Optional[Releases]

    id: str
    type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterLeaderboard(ApplaudModel):
    class Attributes(ApplaudModel):
        class SubmissionType(StringEnum):
            BEST_SCORE = 'BEST_SCORE'
            MOST_RECENT_SCORE = 'MOST_RECENT_SCORE'

        class ScoreSortType(StringEnum):
            ASC = 'ASC'
            DESC = 'DESC'

        class Visibility(StringEnum):
            SHOW_FOR_ALL = 'SHOW_FOR_ALL'
            HIDE_FOR_ALL = 'HIDE_FOR_ALL'

        default_formatter: Optional[GameCenterLeaderboardFormatter]
        reference_name: Optional[str]
        vendor_identifier: Optional[str]
        submission_type: Optional[SubmissionType]
        score_sort_type: Optional[ScoreSortType]
        score_range_start: Optional[str]
        score_range_end: Optional[str]
        recurrence_start_date: Optional[datetime.datetime]
        recurrence_duration: Optional[str]
        recurrence_rule: Optional[str]
        archived: Optional[bool]
        activity_properties: Optional[StringToStringMap]
        visibility: Optional[Visibility]

    class Relationships(ApplaudModel):
        class GameCenterDetail(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterDetails"] = "gameCenterDetails"

            data: Optional[Data]

        class GameCenterGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterGroups"] = "gameCenterGroups"

            data: Optional[Data]

        @deprecated
        class GroupLeaderboard(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class GameCenterLeaderboardSets(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Localizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardLocalizations"] = "gameCenterLeaderboardLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Releases(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterLeaderboardReleases"] = "gameCenterLeaderboardReleases"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Activity(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterActivities"] = "gameCenterActivities"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Challenge(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterChallenges"] = "gameCenterChallenges"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        game_center_detail: Optional[GameCenterDetail]
        game_center_group: Optional[GameCenterGroup]
        group_leaderboard: Optional[GroupLeaderboard] = Field(None, deprecated=True)
        game_center_leaderboard_sets: Optional[GameCenterLeaderboardSets]
        localizations: Optional[Localizations]
        releases: Optional[Releases]
        activity: Optional[Activity]
        challenge: Optional[Challenge]

    id: str
    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterMatchmakingQueue(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]
        classic_matchmaking_bundle_ids: Optional[list[str]]

    class Relationships(ApplaudModel):
        class RuleSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

            data: Optional[Data]

        class ExperimentRuleSet(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

            data: Optional[Data]

        rule_set: Optional[RuleSet]
        experiment_rule_set: Optional[ExperimentRuleSet]

    id: str
    type: Literal["gameCenterMatchmakingQueues"] = "gameCenterMatchmakingQueues"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterMatchmakingRuleSetTest(ApplaudModel):
    class Attributes(ApplaudModel):
        matchmaking_results: Optional[list[MatchmakingResult]]

    id: str
    type: Literal["gameCenterMatchmakingRuleSetTests"] = "gameCenterMatchmakingRuleSetTests"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class GameCenterMatchmakingRuleSet(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]
        rule_language_version: Optional[int]
        min_players: Optional[int]
        max_players: Optional[int]

    class Relationships(ApplaudModel):
        class Teams(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterMatchmakingTeams"] = "gameCenterMatchmakingTeams"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Rules(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterMatchmakingRules"] = "gameCenterMatchmakingRules"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class MatchmakingQueues(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterMatchmakingQueues"] = "gameCenterMatchmakingQueues"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        teams: Optional[Teams]
        rules: Optional[Rules]
        matchmaking_queues: Optional[MatchmakingQueues]

    id: str
    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class GameCenterMatchmakingRule(ApplaudModel):
    class Attributes(ApplaudModel):
        class Type(StringEnum):
            COMPATIBLE = 'COMPATIBLE'
            DISTANCE = 'DISTANCE'
            MATCH = 'MATCH'
            TEAM = 'TEAM'

        reference_name: Optional[str]
        description: Optional[str]
        type: Optional[Type]
        expression: Optional[str]
        weight: Optional[float]

    id: str
    type: Literal["gameCenterMatchmakingRules"] = "gameCenterMatchmakingRules"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class GameCenterMatchmakingTeam(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]
        min_players: Optional[int]
        max_players: Optional[int]

    id: str
    type: Literal["gameCenterMatchmakingTeams"] = "gameCenterMatchmakingTeams"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class GameCenterMatchmakingTestPlayerProperty(ApplaudModel):
    id: str
    type: Literal["gameCenterMatchmakingTestPlayerProperties"] = "gameCenterMatchmakingTestPlayerProperties"
    links: Optional[ResourceLinks]

class GameCenterMatchmakingTestPlayerPropertyInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        player_id: str
        properties: Optional[list[Property]]

    attributes: Attributes
    type: Literal["gameCenterMatchmakingTestPlayerProperties"] = "gameCenterMatchmakingTestPlayerProperties"
    id: Optional[str]

class GameCenterMatchmakingTestRequestInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        class Locale(StringEnum):
            AR_SA = 'AR-SA'
            CA_ES = 'CA-ES'
            CS_CZ = 'CS-CZ'
            DA_DK = 'DA-DK'
            DE_DE = 'DE-DE'
            EL_GR = 'EL-GR'
            EN_AU = 'EN-AU'
            EN_GB = 'EN-GB'
            EN_US = 'EN-US'
            EN_KY = 'EN-KY'
            ES_ES = 'ES-ES'
            ES_MX = 'ES-MX'
            FI_FI = 'FI-FI'
            FR_CA = 'FR-CA'
            FR_FR = 'FR-FR'
            HI_IN = 'HI-IN'
            HR_HR = 'HR-HR'
            HU_HU = 'HU-HU'
            ID_ID = 'ID-ID'
            IT_IT = 'IT-IT'
            IW_IL = 'IW-IL'
            JA_JP = 'JA-JP'
            KO_KR = 'KO-KR'
            MS_MY = 'MS-MY'
            NL_NL = 'NL-NL'
            NO_NO = 'NO-NO'
            PL_PL = 'PL-PL'
            PT_BR = 'PT-BR'
            PT_PT = 'PT-PT'
            RO_RO = 'RO-RO'
            RU_RU = 'RU-RU'
            SK_SK = 'SK-SK'
            SV_SE = 'SV-SE'
            TH_TH = 'TH-TH'
            TR_TR = 'TR-TR'
            UK_UA = 'UK-UA'
            ZH_CN = 'ZH-CN'
            ZH_TW = 'ZH-TW'
            ZH_HK = 'ZH-HK'

        request_name: str
        app_version: str
        seconds_in_queue: int
        bundle_id: str
        platform: Platform
        locale: Optional[Locale]
        location: Optional[Location]
        min_players: Optional[int]
        max_players: Optional[int]
        player_count: Optional[int]

    class Relationships(ApplaudModel):
        class MatchmakingPlayerProperties(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["gameCenterMatchmakingTestPlayerProperties"] = "gameCenterMatchmakingTestPlayerProperties"

            data: Optional[list[Data]]

        matchmaking_player_properties: Optional[MatchmakingPlayerProperties]

    attributes: Attributes
    type: Literal["gameCenterMatchmakingTestRequests"] = "gameCenterMatchmakingTestRequests"
    id: Optional[str]
    relationships: Optional[Relationships]

class GameCenterPlayerAchievementSubmission(ApplaudModel):
    class Attributes(ApplaudModel):
        bundle_id: Optional[str]
        challenge_ids: Optional[list[str]]
        percentage_achieved: Optional[int]
        scoped_player_id: Optional[str]
        submitted_date: Optional[datetime.datetime]
        vendor_identifier: Optional[str]

    id: str
    type: Literal["gameCenterPlayerAchievementSubmissions"] = "gameCenterPlayerAchievementSubmissions"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class InAppPurchaseAppStoreReviewScreenshot(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        image_asset: Optional[ImageAsset]
        asset_token: Optional[str]
        asset_type: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class InAppPurchaseV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        in_app_purchase_v2: Optional[InAppPurchaseV2]

    id: str
    type: Literal["inAppPurchaseAppStoreReviewScreenshots"] = "inAppPurchaseAppStoreReviewScreenshots"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchaseAvailability(ApplaudModel):
    class Attributes(ApplaudModel):
        available_in_new_territories: Optional[bool]

    class Relationships(ApplaudModel):
        class AvailableTerritories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        available_territories: Optional[AvailableTerritories]

    id: str
    type: Literal["inAppPurchaseAvailabilities"] = "inAppPurchaseAvailabilities"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchaseContent(ApplaudModel):
    class Attributes(ApplaudModel):
        file_name: Optional[str]
        file_size: Optional[int]
        url: Optional[AnyUrl]
        last_modified_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class InAppPurchaseV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        in_app_purchase_v2: Optional[InAppPurchaseV2]

    id: str
    type: Literal["inAppPurchaseContents"] = "inAppPurchaseContents"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchaseImage(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            AWAITING_UPLOAD = 'AWAITING_UPLOAD'
            UPLOAD_COMPLETE = 'UPLOAD_COMPLETE'
            FAILED = 'FAILED'
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'

        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        asset_token: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class InAppPurchase(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        in_app_purchase: Optional[InAppPurchase]

    id: str
    type: Literal["inAppPurchaseImages"] = "inAppPurchaseImages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchaseLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'

        name: Optional[str]
        locale: Optional[str]
        description: Optional[str]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class InAppPurchaseV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        in_app_purchase_v2: Optional[InAppPurchaseV2]

    id: str
    type: Literal["inAppPurchaseLocalizations"] = "inAppPurchaseLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchasePricePoint(ApplaudModel):
    class Attributes(ApplaudModel):
        customer_price: Optional[str]
        proceeds: Optional[str]

    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class Equalizations(ApplaudModel):
            links: Optional[RelationshipLinks]

        territory: Optional[Territory]
        equalizations: Optional[Equalizations]

    id: str
    type: Literal["inAppPurchasePricePoints"] = "inAppPurchasePricePoints"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchasePriceSchedule(ApplaudModel):
    class Relationships(ApplaudModel):
        class BaseTerritory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class ManualPrices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchasePrices"] = "inAppPurchasePrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AutomaticPrices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchasePrices"] = "inAppPurchasePrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        base_territory: Optional[BaseTerritory]
        manual_prices: Optional[ManualPrices]
        automatic_prices: Optional[AutomaticPrices]

    id: str
    type: Literal["inAppPurchasePriceSchedules"] = "inAppPurchasePriceSchedules"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchasePrice(ApplaudModel):
    class Attributes(ApplaudModel):
        start_date: Optional[datetime.date]
        end_date: Optional[datetime.date]
        manual: Optional[bool]

    class Relationships(ApplaudModel):
        class InAppPurchasePricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchasePricePoints"] = "inAppPurchasePricePoints"

            data: Optional[Data]

        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        in_app_purchase_price_point: Optional[InAppPurchasePricePoint]
        territory: Optional[Territory]

    id: str
    type: Literal["inAppPurchasePrices"] = "inAppPurchasePrices"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchasePriceInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        start_date: Optional[datetime.date]
        end_date: Optional[datetime.date]

    class Relationships(ApplaudModel):
        class InAppPurchaseV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        class InAppPurchasePricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchasePricePoints"] = "inAppPurchasePricePoints"

            data: Optional[Data]

        in_app_purchase_v2: Optional[InAppPurchaseV2]
        in_app_purchase_price_point: Optional[InAppPurchasePricePoint]

    type: Literal["inAppPurchasePrices"] = "inAppPurchasePrices"
    id: Optional[str]
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]

class InAppPurchaseSubmission(ApplaudModel):
    class Relationships(ApplaudModel):
        class InAppPurchaseV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        in_app_purchase_v2: Optional[InAppPurchaseV2]

    id: str
    type: Literal["inAppPurchaseSubmissions"] = "inAppPurchaseSubmissions"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

@deprecated
class InAppPurchase(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]
        product_id: Optional[str]
        in_app_purchase_type: Optional[InAppPurchaseType]
        state: Optional[InAppPurchaseState]

    class Relationships(ApplaudModel):
        class Apps(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        apps: Optional[Apps]

    id: str
    type: Literal["inAppPurchases"] = "inAppPurchases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class InAppPurchaseV2(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        product_id: Optional[str]
        in_app_purchase_type: Optional[InAppPurchaseType]
        state: Optional[InAppPurchaseState]
        review_note: Optional[str]
        family_sharable: Optional[bool]
        content_hosting: Optional[bool]

    class Relationships(ApplaudModel):
        class InAppPurchaseLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchaseLocalizations"] = "inAppPurchaseLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class PricePoints(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchasePricePoints"] = "inAppPurchasePricePoints"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Content(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchaseContents"] = "inAppPurchaseContents"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class AppStoreReviewScreenshot(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchaseAppStoreReviewScreenshots"] = "inAppPurchaseAppStoreReviewScreenshots"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class PromotedPurchase(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["promotedPurchases"] = "promotedPurchases"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class IapPriceSchedule(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchasePriceSchedules"] = "inAppPurchasePriceSchedules"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class InAppPurchaseAvailability(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchaseAvailabilities"] = "inAppPurchaseAvailabilities"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Images(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchaseImages"] = "inAppPurchaseImages"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        in_app_purchase_localizations: Optional[InAppPurchaseLocalizations]
        price_points: Optional[PricePoints]
        content: Optional[Content]
        app_store_review_screenshot: Optional[AppStoreReviewScreenshot]
        promoted_purchase: Optional[PromotedPurchase]
        iap_price_schedule: Optional[IapPriceSchedule]
        in_app_purchase_availability: Optional[InAppPurchaseAvailability]
        images: Optional[Images]

    id: str
    type: Literal["inAppPurchases"] = "inAppPurchases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class MarketplaceSearchDetail(ApplaudModel):
    class Attributes(ApplaudModel):
        catalog_url: Optional[AnyUrl]

    id: str
    type: Literal["marketplaceSearchDetails"] = "marketplaceSearchDetails"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

@deprecated
class MarketplaceWebhook(ApplaudModel):
    class Attributes(ApplaudModel):
        endpoint_url: Optional[AnyUrl]

    id: str
    type: Literal["marketplaceWebhooks"] = "marketplaceWebhooks"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class MerchantId(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        identifier: Optional[str]

    class Relationships(ApplaudModel):
        class Certificates(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["certificates"] = "certificates"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        certificates: Optional[Certificates]

    id: str
    type: Literal["merchantIds"] = "merchantIds"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class Nomination(ApplaudModel):
    class Attributes(ApplaudModel):
        class Type(StringEnum):
            APP_LAUNCH = 'APP_LAUNCH'
            APP_ENHANCEMENTS = 'APP_ENHANCEMENTS'
            NEW_CONTENT = 'NEW_CONTENT'

        class State(StringEnum):
            DRAFT = 'DRAFT'
            SUBMITTED = 'SUBMITTED'
            ARCHIVED = 'ARCHIVED'

        name: Optional[str]
        type: Optional[Type]
        description: Optional[str]
        created_date: Optional[datetime.datetime]
        last_modified_date: Optional[datetime.datetime]
        submitted_date: Optional[datetime.datetime]
        state: Optional[State]
        publish_start_date: Optional[datetime.datetime]
        publish_end_date: Optional[datetime.datetime]
        device_families: Optional[list[DeviceFamily]]
        locales: Optional[list[str]]
        supplemental_materials_uris: Optional[list[str]]
        has_in_app_events: Optional[bool]
        launch_in_select_markets_first: Optional[bool]
        notes: Optional[str]
        pre_order_enabled: Optional[bool]

    class Relationships(ApplaudModel):
        class RelatedApps(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class CreatedByActor(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["actors"] = "actors"

            data: Optional[Data]

        class LastModifiedByActor(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["actors"] = "actors"

            data: Optional[Data]

        class SubmittedByActor(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["actors"] = "actors"

            data: Optional[Data]

        class InAppEvents(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEvents"] = "appEvents"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class SupportedTerritories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        related_apps: Optional[RelatedApps]
        created_by_actor: Optional[CreatedByActor]
        last_modified_by_actor: Optional[LastModifiedByActor]
        submitted_by_actor: Optional[SubmittedByActor]
        in_app_events: Optional[InAppEvents]
        supported_territories: Optional[SupportedTerritories]

    id: str
    type: Literal["nominations"] = "nominations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class PassTypeId(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        identifier: Optional[str]

    class Relationships(ApplaudModel):
        class Certificates(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["certificates"] = "certificates"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        certificates: Optional[Certificates]

    id: str
    type: Literal["passTypeIds"] = "passTypeIds"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class PerfPowerMetric(ApplaudModel):
    class Attributes(ApplaudModel):
        platform: Literal[PerfPowerMetricPlatform.IOS] = PerfPowerMetricPlatform.IOS
        metric_type: Optional[PerfPowerMetricType]
        device_type: Optional[str]

    id: str
    type: Literal["perfPowerMetrics"] = "perfPowerMetrics"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class PrereleaseVersion(ApplaudModel):
    class Attributes(ApplaudModel):
        version: Optional[str]
        platform: Optional[Platform]

    class Relationships(ApplaudModel):
        class Builds(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["builds"] = "builds"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        builds: Optional[Builds]
        app: Optional[App]

    id: str
    type: Literal["preReleaseVersions"] = "preReleaseVersions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class Profile(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        platform: Optional[BundleIdPlatform]
        profile_type: Optional[ProfileType]
        profile_state: Optional[ProfileState]
        profile_content: Optional[str]
        uuid: Optional[str]
        created_date: Optional[datetime.datetime]
        expiration_date: Optional[datetime.datetime]

    class Relationships(ApplaudModel):
        class BundleId(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["bundleIds"] = "bundleIds"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Devices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["devices"] = "devices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Certificates(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["certificates"] = "certificates"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        bundle_id: Optional[BundleId]
        devices: Optional[Devices]
        certificates: Optional[Certificates]

    id: str
    type: Literal["profiles"] = "profiles"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class PromotedPurchase(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            APPROVED = 'APPROVED'
            IN_REVIEW = 'IN_REVIEW'
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            REJECTED = 'REJECTED'

        visible_for_all_users: Optional[bool]
        enabled: Optional[bool]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class InAppPurchaseV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["inAppPurchases"] = "inAppPurchases"

            data: Optional[Data]

        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        in_app_purchase_v2: Optional[InAppPurchaseV2]
        subscription: Optional[Subscription]

    id: str
    type: Literal["promotedPurchases"] = "promotedPurchases"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class ReviewSubmissionItem(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            ACCEPTED = 'ACCEPTED'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'
            REMOVED = 'REMOVED'

        state: Optional[State]

    class Relationships(ApplaudModel):
        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        class AppCustomProductPageVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

            data: Optional[Data]

        class AppStoreVersionExperiment(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            data: Optional[Data]

        class AppStoreVersionExperimentV2(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

            data: Optional[Data]

        class AppEvent(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appEvents"] = "appEvents"

            data: Optional[Data]

        class BackgroundAssetVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

            data: Optional[Data]

        app_store_version: Optional[AppStoreVersion]
        app_custom_product_page_version: Optional[AppCustomProductPageVersion]
        app_store_version_experiment: Optional[AppStoreVersionExperiment]
        app_store_version_experiment_v2: Optional[AppStoreVersionExperimentV2]
        app_event: Optional[AppEvent]
        background_asset_version: Optional[BackgroundAssetVersion]

    id: str
    type: Literal["reviewSubmissionItems"] = "reviewSubmissionItems"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class ReviewSubmission(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            READY_FOR_REVIEW = 'READY_FOR_REVIEW'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            IN_REVIEW = 'IN_REVIEW'
            UNRESOLVED_ISSUES = 'UNRESOLVED_ISSUES'
            CANCELING = 'CANCELING'
            COMPLETING = 'COMPLETING'
            COMPLETE = 'COMPLETE'

        platform: Optional[Platform]
        submitted_date: Optional[datetime.datetime]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class Items(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["reviewSubmissionItems"] = "reviewSubmissionItems"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppStoreVersionForReview(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        class SubmittedByActor(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["actors"] = "actors"

            data: Optional[Data]

        class LastUpdatedByActor(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["actors"] = "actors"

            data: Optional[Data]

        app: Optional[App]
        items: Optional[Items]
        app_store_version_for_review: Optional[AppStoreVersionForReview]
        submitted_by_actor: Optional[SubmittedByActor]
        last_updated_by_actor: Optional[LastUpdatedByActor]

    id: str
    type: Literal["reviewSubmissions"] = "reviewSubmissions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class RoutingAppCoverage(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class AppStoreVersion(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["appStoreVersions"] = "appStoreVersions"

            data: Optional[Data]

        app_store_version: Optional[AppStoreVersion]

    id: str
    type: Literal["routingAppCoverages"] = "routingAppCoverages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SandboxTesterV2(ApplaudModel):
    class Attributes(ApplaudModel):
        class SubscriptionRenewalRate(StringEnum):
            MONTHLY_RENEWAL_EVERY_ONE_HOUR = 'MONTHLY_RENEWAL_EVERY_ONE_HOUR'
            MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES = 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES'
            MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES = 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES'
            MONTHLY_RENEWAL_EVERY_FIVE_MINUTES = 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES'
            MONTHLY_RENEWAL_EVERY_THREE_MINUTES = 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES'

        first_name: Optional[str]
        last_name: Optional[str]
        ac_account_name: Optional[str]
        territory: Optional[TerritoryCode]
        apple_pay_compatible: Optional[bool]
        interrupt_purchases: Optional[bool]
        subscription_renewal_rate: Optional[SubscriptionRenewalRate]

    id: str
    type: Literal["sandboxTesters"] = "sandboxTesters"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class SandboxTestersClearPurchaseHistoryRequestV2(ApplaudModel):
    id: str
    type: Literal["sandboxTestersClearPurchaseHistoryRequest"] = "sandboxTestersClearPurchaseHistoryRequest"
    links: Optional[ResourceLinks]

class ScmGitReference(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        canonical_name: Optional[str]
        is_deleted: Optional[bool]
        kind: Optional[CiGitRefKind]

    class Relationships(ApplaudModel):
        class Repository(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmRepositories"] = "scmRepositories"

            data: Optional[Data]

        repository: Optional[Repository]

    id: str
    type: Literal["scmGitReferences"] = "scmGitReferences"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class ScmProvider(ApplaudModel):
    class Attributes(ApplaudModel):
        scm_provider_type: Optional[ScmProviderType]
        url: Optional[AnyUrl]

    class Relationships(ApplaudModel):
        class Repositories(ApplaudModel):
            links: Optional[RelationshipLinks]

        repositories: Optional[Repositories]

    id: str
    type: Literal["scmProviders"] = "scmProviders"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class ScmRepository(ApplaudModel):
    class Attributes(ApplaudModel):
        last_accessed_date: Optional[datetime.datetime]
        http_clone_url: Optional[AnyUrl]
        ssh_clone_url: Optional[AnyUrl]
        owner_name: Optional[str]
        repository_name: Optional[str]

    class Relationships(ApplaudModel):
        class ScmProvider(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmProviders"] = "scmProviders"

            data: Optional[Data]

        class DefaultBranch(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmGitReferences"] = "scmGitReferences"

            data: Optional[Data]

        class GitReferences(ApplaudModel):
            links: Optional[RelationshipLinks]

        class PullRequests(ApplaudModel):
            links: Optional[RelationshipLinks]

        scm_provider: Optional[ScmProvider]
        default_branch: Optional[DefaultBranch]
        git_references: Optional[GitReferences]
        pull_requests: Optional[PullRequests]

    id: str
    type: Literal["scmRepositories"] = "scmRepositories"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionAppStoreReviewScreenshot(ApplaudModel):
    class Attributes(ApplaudModel):
        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        image_asset: Optional[ImageAsset]
        asset_token: Optional[str]
        asset_type: Optional[str]
        upload_operations: Optional[list[UploadOperation]]
        asset_delivery_state: Optional[AppMediaAssetState]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        subscription: Optional[Subscription]

    id: str
    type: Literal["subscriptionAppStoreReviewScreenshots"] = "subscriptionAppStoreReviewScreenshots"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionAvailability(ApplaudModel):
    class Attributes(ApplaudModel):
        available_in_new_territories: Optional[bool]

    class Relationships(ApplaudModel):
        class AvailableTerritories(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        available_territories: Optional[AvailableTerritories]

    id: str
    type: Literal["subscriptionAvailabilities"] = "subscriptionAvailabilities"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionGracePeriod(ApplaudModel):
    class Attributes(ApplaudModel):
        class RenewalType(StringEnum):
            ALL_RENEWALS = 'ALL_RENEWALS'
            PAID_TO_PAID_ONLY = 'PAID_TO_PAID_ONLY'

        opt_in: Optional[bool]
        sandbox_opt_in: Optional[bool]
        duration: Optional[SubscriptionGracePeriodDuration]
        renewal_type: Optional[RenewalType]

    id: str
    type: Literal["subscriptionGracePeriods"] = "subscriptionGracePeriods"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class SubscriptionGroupLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'

        name: Optional[str]
        custom_app_name: Optional[str]
        locale: Optional[str]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class SubscriptionGroup(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionGroups"] = "subscriptionGroups"

            data: Optional[Data]

        subscription_group: Optional[SubscriptionGroup]

    id: str
    type: Literal["subscriptionGroupLocalizations"] = "subscriptionGroupLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionGroupSubmission(ApplaudModel):
    id: str
    type: Literal["subscriptionGroupSubmissions"] = "subscriptionGroupSubmissions"
    links: Optional[ResourceLinks]

class SubscriptionGroup(ApplaudModel):
    class Attributes(ApplaudModel):
        reference_name: Optional[str]

    class Relationships(ApplaudModel):
        class Subscriptions(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class SubscriptionGroupLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionGroupLocalizations"] = "subscriptionGroupLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        subscriptions: Optional[Subscriptions]
        subscription_group_localizations: Optional[SubscriptionGroupLocalizations]

    id: str
    type: Literal["subscriptionGroups"] = "subscriptionGroups"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionImage(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            AWAITING_UPLOAD = 'AWAITING_UPLOAD'
            UPLOAD_COMPLETE = 'UPLOAD_COMPLETE'
            FAILED = 'FAILED'
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'

        file_size: Optional[int]
        file_name: Optional[str]
        source_file_checksum: Optional[str]
        asset_token: Optional[str]
        image_asset: Optional[ImageAsset]
        upload_operations: Optional[list[UploadOperation]]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        subscription: Optional[Subscription]

    id: str
    type: Literal["subscriptionImages"] = "subscriptionImages"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionIntroductoryOffer(ApplaudModel):
    class Attributes(ApplaudModel):
        start_date: Optional[datetime.date]
        end_date: Optional[datetime.date]
        duration: Optional[SubscriptionOfferDuration]
        offer_mode: Optional[SubscriptionOfferMode]
        number_of_periods: Optional[int]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        subscription: Optional[Subscription]
        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    id: str
    type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionIntroductoryOfferInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        duration: SubscriptionOfferDuration
        number_of_periods: int
        offer_mode: SubscriptionOfferMode
        start_date: Optional[datetime.date]
        end_date: Optional[datetime.date]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        subscription: Optional[Subscription]
        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    attributes: Attributes
    type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"
    id: Optional[str]
    relationships: Optional[Relationships]

class SubscriptionLocalization(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            PREPARE_FOR_SUBMISSION = 'PREPARE_FOR_SUBMISSION'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            APPROVED = 'APPROVED'
            REJECTED = 'REJECTED'

        name: Optional[str]
        locale: Optional[str]
        description: Optional[str]
        state: Optional[State]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        subscription: Optional[Subscription]

    id: str
    type: Literal["subscriptionLocalizations"] = "subscriptionLocalizations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionOfferCodeCustomCode(ApplaudModel):
    class Attributes(ApplaudModel):
        custom_code: Optional[str]
        number_of_codes: Optional[int]
        created_date: Optional[datetime.datetime]
        expiration_date: Optional[datetime.date]
        active: Optional[bool]

    class Relationships(ApplaudModel):
        class OfferCode(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"

            data: Optional[Data]

        offer_code: Optional[OfferCode]

    id: str
    type: Literal["subscriptionOfferCodeCustomCodes"] = "subscriptionOfferCodeCustomCodes"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionOfferCodeOneTimeUseCodeValue(ApplaudModel):
    id: str
    type: Literal["subscriptionOfferCodeOneTimeUseCodeValues"] = "subscriptionOfferCodeOneTimeUseCodeValues"
    links: Optional[ResourceLinks]

class SubscriptionOfferCodeOneTimeUseCode(ApplaudModel):
    class Attributes(ApplaudModel):
        number_of_codes: Optional[int]
        created_date: Optional[datetime.datetime]
        expiration_date: Optional[datetime.date]
        active: Optional[bool]

    class Relationships(ApplaudModel):
        class OfferCode(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"

            data: Optional[Data]

        class Values(ApplaudModel):
            links: Optional[RelationshipLinks]

        offer_code: Optional[OfferCode]
        values: Optional[Values]

    id: str
    type: Literal["subscriptionOfferCodeOneTimeUseCodes"] = "subscriptionOfferCodeOneTimeUseCodes"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionOfferCodePrice(ApplaudModel):
    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    id: str
    type: Literal["subscriptionOfferCodePrices"] = "subscriptionOfferCodePrices"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionOfferCodePriceInlineCreate(ApplaudModel):
    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    type: Literal["subscriptionOfferCodePrices"] = "subscriptionOfferCodePrices"
    id: Optional[str]
    relationships: Optional[Relationships]

class SubscriptionOfferCode(ApplaudModel):
    class Attributes(ApplaudModel):
        name: Optional[str]
        customer_eligibilities: Optional[list[SubscriptionCustomerEligibility]]
        offer_eligibility: Optional[SubscriptionOfferEligibility]
        duration: Optional[SubscriptionOfferDuration]
        offer_mode: Optional[SubscriptionOfferMode]
        number_of_periods: Optional[int]
        total_number_of_codes: Optional[int]
        active: Optional[bool]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        class OneTimeUseCodes(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionOfferCodeOneTimeUseCodes"] = "subscriptionOfferCodeOneTimeUseCodes"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class CustomCodes(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionOfferCodeCustomCodes"] = "subscriptionOfferCodeCustomCodes"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Prices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionOfferCodePrices"] = "subscriptionOfferCodePrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        subscription: Optional[Subscription]
        one_time_use_codes: Optional[OneTimeUseCodes]
        custom_codes: Optional[CustomCodes]
        prices: Optional[Prices]

    id: str
    type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionPricePoint(ApplaudModel):
    class Attributes(ApplaudModel):
        customer_price: Optional[str]
        proceeds: Optional[str]
        proceeds_year2: Optional[str]

    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class Equalizations(ApplaudModel):
            links: Optional[RelationshipLinks]

        territory: Optional[Territory]
        equalizations: Optional[Equalizations]

    id: str
    type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionPricePointInlineCreate(ApplaudModel):
    type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"
    id: Optional[str]

class SubscriptionPrice(ApplaudModel):
    class Attributes(ApplaudModel):
        start_date: Optional[datetime.date]
        preserved: Optional[bool]

    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    id: str
    type: Literal["subscriptionPrices"] = "subscriptionPrices"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionPriceInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        start_date: Optional[datetime.date]
        preserve_current_price: Optional[bool]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        subscription: Optional[Subscription]
        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    type: Literal["subscriptionPrices"] = "subscriptionPrices"
    id: Optional[str]
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]

class SubscriptionPromotionalOfferPrice(ApplaudModel):
    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    id: str
    type: Literal["subscriptionPromotionalOfferPrices"] = "subscriptionPromotionalOfferPrices"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionPromotionalOfferPriceInlineCreate(ApplaudModel):
    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    type: Literal["subscriptionPromotionalOfferPrices"] = "subscriptionPromotionalOfferPrices"
    id: Optional[str]
    relationships: Optional[Relationships]

class SubscriptionPromotionalOffer(ApplaudModel):
    class Attributes(ApplaudModel):
        duration: Optional[SubscriptionOfferDuration]
        name: Optional[str]
        number_of_periods: Optional[int]
        offer_code: Optional[str]
        offer_mode: Optional[SubscriptionOfferMode]

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        class Prices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPromotionalOfferPrices"] = "subscriptionPromotionalOfferPrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        subscription: Optional[Subscription]
        prices: Optional[Prices]

    id: str
    type: Literal["subscriptionPromotionalOffers"] = "subscriptionPromotionalOffers"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionPromotionalOfferInlineCreate(ApplaudModel):
    class Attributes(ApplaudModel):
        duration: SubscriptionOfferDuration
        offer_code: str
        name: str
        number_of_periods: int
        offer_mode: SubscriptionOfferMode

    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        class Prices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPromotionalOfferPrices"] = "subscriptionPromotionalOfferPrices"

            data: Optional[list[Data]]

        subscription: Optional[Subscription]
        prices: Optional[Prices]

    attributes: Attributes
    type: Literal["subscriptionPromotionalOffers"] = "subscriptionPromotionalOffers"
    id: Optional[str]
    relationships: Optional[Relationships]

class SubscriptionSubmission(ApplaudModel):
    class Relationships(ApplaudModel):
        class Subscription(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptions"] = "subscriptions"

            data: Optional[Data]

        subscription: Optional[Subscription]

    id: str
    type: Literal["subscriptionSubmissions"] = "subscriptionSubmissions"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class Subscription(ApplaudModel):
    class Attributes(ApplaudModel):
        class State(StringEnum):
            MISSING_METADATA = 'MISSING_METADATA'
            READY_TO_SUBMIT = 'READY_TO_SUBMIT'
            WAITING_FOR_REVIEW = 'WAITING_FOR_REVIEW'
            IN_REVIEW = 'IN_REVIEW'
            DEVELOPER_ACTION_NEEDED = 'DEVELOPER_ACTION_NEEDED'
            PENDING_BINARY_APPROVAL = 'PENDING_BINARY_APPROVAL'
            APPROVED = 'APPROVED'
            DEVELOPER_REMOVED_FROM_SALE = 'DEVELOPER_REMOVED_FROM_SALE'
            REMOVED_FROM_SALE = 'REMOVED_FROM_SALE'
            REJECTED = 'REJECTED'

        class SubscriptionPeriod(StringEnum):
            ONE_WEEK = 'ONE_WEEK'
            ONE_MONTH = 'ONE_MONTH'
            TWO_MONTHS = 'TWO_MONTHS'
            THREE_MONTHS = 'THREE_MONTHS'
            SIX_MONTHS = 'SIX_MONTHS'
            ONE_YEAR = 'ONE_YEAR'

        name: Optional[str]
        product_id: Optional[str]
        family_sharable: Optional[bool]
        state: Optional[State]
        subscription_period: Optional[SubscriptionPeriod]
        review_note: Optional[str]
        group_level: Optional[int]

    class Relationships(ApplaudModel):
        class SubscriptionLocalizations(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionLocalizations"] = "subscriptionLocalizations"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class AppStoreReviewScreenshot(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionAppStoreReviewScreenshots"] = "subscriptionAppStoreReviewScreenshots"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class Group(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionGroups"] = "subscriptionGroups"

            data: Optional[Data]

        class IntroductoryOffers(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class PromotionalOffers(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPromotionalOffers"] = "subscriptionPromotionalOffers"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class OfferCodes(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Prices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPrices"] = "subscriptionPrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class PricePoints(ApplaudModel):
            links: Optional[RelationshipLinks]

        class PromotedPurchase(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["promotedPurchases"] = "promotedPurchases"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class SubscriptionAvailability(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionAvailabilities"] = "subscriptionAvailabilities"

            links: Optional[RelationshipLinks]
            data: Optional[Data]

        class WinBackOffers(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["winBackOffers"] = "winBackOffers"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        class Images(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionImages"] = "subscriptionImages"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        subscription_localizations: Optional[SubscriptionLocalizations]
        app_store_review_screenshot: Optional[AppStoreReviewScreenshot]
        group: Optional[Group]
        introductory_offers: Optional[IntroductoryOffers]
        promotional_offers: Optional[PromotionalOffers]
        offer_codes: Optional[OfferCodes]
        prices: Optional[Prices]
        price_points: Optional[PricePoints]
        promoted_purchase: Optional[PromotedPurchase]
        subscription_availability: Optional[SubscriptionAvailability]
        win_back_offers: Optional[WinBackOffers]
        images: Optional[Images]

    id: str
    type: Literal["subscriptions"] = "subscriptions"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class Territory(ApplaudModel):
    class Attributes(ApplaudModel):
        currency: Optional[str]

    id: str
    type: Literal["territories"] = "territories"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class TerritoryInlineCreate(ApplaudModel):
    type: Literal["territories"] = "territories"
    id: Optional[str]

class TerritoryAgeRating(ApplaudModel):
    class Attributes(ApplaudModel):
        app_store_age_rating: Optional[AppStoreAgeRating]

    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        territory: Optional[Territory]

    id: str
    type: Literal["territoryAgeRatings"] = "territoryAgeRatings"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class TerritoryAvailability(ApplaudModel):
    class Attributes(ApplaudModel):
        available: Optional[bool]
        release_date: Optional[datetime.date]
        pre_order_enabled: Optional[bool]
        pre_order_publish_date: Optional[datetime.date]
        content_statuses: Optional[list[str]]

    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        territory: Optional[Territory]

    id: str
    type: Literal["territoryAvailabilities"] = "territoryAvailabilities"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class TerritoryAvailabilityInlineCreate(ApplaudModel):
    type: Literal["territoryAvailabilities"] = "territoryAvailabilities"
    id: Optional[str]

class UserInvitation(ApplaudModel):
    class Attributes(ApplaudModel):
        email: Optional[EmailStr]
        first_name: Optional[str]
        last_name: Optional[str]
        expiration_date: Optional[datetime.datetime]
        roles: Optional[list[UserRole]]
        all_apps_visible: Optional[bool]
        provisioning_allowed: Optional[bool]

    class Relationships(ApplaudModel):
        class VisibleApps(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        visible_apps: Optional[VisibleApps]

    id: str
    type: Literal["userInvitations"] = "userInvitations"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class User(ApplaudModel):
    class Attributes(ApplaudModel):
        username: Optional[str]
        first_name: Optional[str]
        last_name: Optional[str]
        roles: Optional[list[UserRole]]
        all_apps_visible: Optional[bool]
        provisioning_allowed: Optional[bool]

    class Relationships(ApplaudModel):
        class VisibleApps(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        visible_apps: Optional[VisibleApps]

    id: str
    type: Literal["users"] = "users"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class WebhookDelivery(ApplaudModel):
    class Attributes(ApplaudModel):
        class Request(ApplaudModel):
            url: Optional[AnyUrl]

        class Response(ApplaudModel):
            http_status_code: Optional[int]
            body: Optional[str]

        class DeliveryState(StringEnum):
            SUCCEEDED = 'SUCCEEDED'
            FAILED = 'FAILED'
            PENDING = 'PENDING'

        created_date: Optional[datetime.datetime]
        delivery_state: Optional[DeliveryState]
        error_message: Optional[str]
        redelivery: Optional[bool]
        sent_date: Optional[datetime.datetime]
        request: Optional[Request]
        response: Optional[Response]

    class Relationships(ApplaudModel):
        class Event(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["webhookEvents"] = "webhookEvents"

            data: Optional[Data]

        event: Optional[Event]

    id: str
    type: Literal["webhookDeliveries"] = "webhookDeliveries"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class WebhookEvent(ApplaudModel):
    class Attributes(ApplaudModel):
        event_type: Optional[WebhookEventType]
        payload: Optional[str]
        ping: Optional[bool]
        created_date: Optional[datetime.datetime]

    id: str
    type: Literal["webhookEvents"] = "webhookEvents"
    attributes: Optional[Attributes]
    links: Optional[ResourceLinks]

class WebhookPing(ApplaudModel):
    id: str
    type: Literal["webhookPings"] = "webhookPings"
    links: Optional[ResourceLinks]

class Webhook(ApplaudModel):
    class Attributes(ApplaudModel):
        enabled: Optional[bool]
        event_types: Optional[list[WebhookEventType]]
        name: Optional[str]
        url: Optional[AnyUrl]

    class Relationships(ApplaudModel):
        class App(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["apps"] = "apps"

            data: Optional[Data]

        class Deliveries(ApplaudModel):
            links: Optional[RelationshipLinks]

        app: Optional[App]
        deliveries: Optional[Deliveries]

    id: str
    type: Literal["webhooks"] = "webhooks"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class WinBackOfferPrice(ApplaudModel):
    class Relationships(ApplaudModel):
        class Territory(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["territories"] = "territories"

            data: Optional[Data]

        class SubscriptionPricePoint(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

            data: Optional[Data]

        territory: Optional[Territory]
        subscription_price_point: Optional[SubscriptionPricePoint]

    id: str
    type: Literal["winBackOfferPrices"] = "winBackOfferPrices"
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class WinBackOfferPriceInlineCreate(ApplaudModel):
    type: Literal["winBackOfferPrices"] = "winBackOfferPrices"
    id: Optional[str]

class WinBackOffer(ApplaudModel):
    class Attributes(ApplaudModel):
        class Priority(StringEnum):
            HIGH = 'HIGH'
            NORMAL = 'NORMAL'

        class PromotionIntent(StringEnum):
            NOT_PROMOTED = 'NOT_PROMOTED'
            USE_AUTO_GENERATED_ASSETS = 'USE_AUTO_GENERATED_ASSETS'

        reference_name: Optional[str]
        offer_id: Optional[str]
        duration: Optional[SubscriptionOfferDuration]
        offer_mode: Optional[SubscriptionOfferMode]
        period_count: Optional[int]
        customer_eligibility_paid_subscription_duration_in_months: Optional[int]
        customer_eligibility_time_since_last_subscribed_in_months: Optional[IntegerRange]
        customer_eligibility_wait_between_offers_in_months: Optional[int]
        start_date: Optional[datetime.date]
        end_date: Optional[datetime.date]
        priority: Optional[Priority]
        promotion_intent: Optional[PromotionIntent]

    class Relationships(ApplaudModel):
        class Prices(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["winBackOfferPrices"] = "winBackOfferPrices"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        prices: Optional[Prices]

    id: str
    type: Literal["winBackOffers"] = "winBackOffers"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class ErrorSourceParameter(ApplaudModel):
    parameter: str

class ErrorSourcePointer(ApplaudModel):
    pointer: str

class ErrorLinks(ApplaudModel):
    class AssociatedOption2(ApplaudModel):
        class Meta(ApplaudModel):
            source: Optional[str]

        href: Optional[str]
        meta: Optional[Meta]

    about: Optional[str]
    associated: Optional[Union[str, AssociatedOption2]]

class PagedDocumentLinks(ApplaudModel):
    self: str
    first: Optional[str]
    next: Optional[str]

class DocumentLinks(ApplaudModel):
    self: str

class RelationshipLinks(ApplaudModel):
    self: Optional[str]
    related: Optional[str]

class AppMediaPreviewFrameImageState(ApplaudModel):
    class State(StringEnum):
        PROCESSING = 'PROCESSING'
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'

    errors: Optional[list[AppMediaStateError]]
    warnings: Optional[list[AppMediaStateError]]
    state: Optional[State]

class AppMediaVideoState(ApplaudModel):
    class State(StringEnum):
        AWAITING_UPLOAD = 'AWAITING_UPLOAD'
        UPLOAD_COMPLETE = 'UPLOAD_COMPLETE'
        PROCESSING = 'PROCESSING'
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'

    errors: Optional[list[AppMediaStateError]]
    warnings: Optional[list[AppMediaStateError]]
    state: Optional[State]

class BetaFeedbackScreenshotImage(ApplaudModel):
    url: Optional[str]
    width: Optional[int]
    height: Optional[int]
    expiration_date: Optional[datetime.datetime]

class Checksums(ApplaudModel):
    class File(ApplaudModel):
        hash: Optional[str]
        algorithm: Optional[ChecksumAlgorithm]

    class Composite(ApplaudModel):
        class Algorithm(StringEnum):
            MD5 = 'MD5'

        hash: Optional[str]
        algorithm: Literal[Algorithm.MD5] = Algorithm.MD5

    file: Optional[File]
    composite: Optional[Composite]

class CiManualBranchStartCondition(ApplaudModel):
    source: Optional[CiBranchPatterns]

class CiManualPullRequestStartCondition(ApplaudModel):
    source: Optional[CiBranchPatterns]
    destination: Optional[CiBranchPatterns]

class CiManualTagStartCondition(ApplaudModel):
    source: Optional[CiTagPatterns]

class DeliveryFileUploadOperation(ApplaudModel):
    method: Optional[str]
    url: Optional[str]
    length: Optional[int]
    offset: Optional[int]
    request_headers: Optional[list[HttpHeader]]
    expiration: Optional[datetime.datetime]
    part_number: Optional[int]
    entity_tag: Optional[str]

class DeviceFamilyOsVersionFilter(ApplaudModel):
    device_family: Optional[DeviceFamily]
    minimum_os_inclusive: Optional[str]
    maximum_os_inclusive: Optional[str]

class DiagnosticInsight(ApplaudModel):
    class ReferenceVersion(ApplaudModel):
        version: Optional[str]
        value: Optional[float]

    insight_type: Optional[DiagnosticInsightType]
    direction: Optional[DiagnosticInsightDirection]
    reference_versions: Optional[list[ReferenceVersion]]

class DiagnosticLogCallStackNode(ApplaudModel):
    sample_count: Optional[int]
    is_blame_frame: Optional[bool]
    symbol_name: Optional[str]
    insights_category: Optional[str]
    offset_into_symbol: Optional[str]
    binary_name: Optional[str]
    file_name: Optional[str]
    binary_uuid: Optional[str]
    line_number: Optional[str]
    address: Optional[str]
    offset_into_binary_text_segment: Optional[str]
    raw_frame: Optional[str]
    sub_frames: Optional[list[DiagnosticLogCallStackNode]]

class GameCenterMatchmakingTeamAssignment(ApplaudModel):
    player_id: Optional[str]
    team: Optional[str]

class IntegerRange(ApplaudModel):
    minimum: Optional[int]
    maximum: Optional[int]

class Location(ApplaudModel):
    latitude: Optional[float]
    longitude: Optional[float]

class MetricsInsight(ApplaudModel):
    class Population(ApplaudModel):
        delta_percentage: Optional[float]
        percentile: Optional[str]
        summary_string: Optional[str]
        reference_average_value: Optional[float]
        latest_version_value: Optional[float]
        device: Optional[str]

    metric_category: Optional[MetricCategory]
    latest_version: Optional[str]
    metric: Optional[str]
    summary_string: Optional[str]
    reference_versions: Optional[str]
    max_latest_version_value: Optional[float]
    sub_system_label: Optional[str]
    high_impact: Optional[bool]
    populations: Optional[list[Population]]

class PreviewFrameImage(ApplaudModel):
    image: Optional[ImageAsset]
    state: Optional[AppMediaPreviewFrameImageState]

class Property(ApplaudModel):
    key: Optional[str]
    value: Optional[str]

class StateDetail(ApplaudModel):
    code: Optional[str]
    description: Optional[str]

class diagnosticLogs(ApplaudModel):
    class ProductData(ApplaudModel):
        class DiagnosticInsight(ApplaudModel):
            insights_url: Optional[str]
            insights_category: Optional[str]
            insights_string: Optional[str]

        class DiagnosticLog(ApplaudModel):
            class CallStackTree(ApplaudModel):
                class CallStack(ApplaudModel):
                    call_stack_root_frames: Optional[list[DiagnosticLogCallStackNode]]

                call_stack_per_thread: Optional[bool]
                call_stacks: Optional[list[CallStack]]

            class DiagnosticMetaData(ApplaudModel):
                bundle_id: Optional[str]
                event: Optional[str]
                os_version: Optional[str]
                app_version: Optional[str]
                writes_caused: Optional[str]
                device_type: Optional[str]
                platform_architecture: Optional[str]
                event_detail: Optional[str]
                build_version: Optional[str]

            call_stack_tree: Optional[list[CallStackTree]]
            diagnostic_meta_data: Optional[DiagnosticMetaData]

        signature_id: Optional[str]
        diagnostic_insights: Optional[list[DiagnosticInsight]]
        diagnostic_logs: Optional[list[DiagnosticLog]]

    product_data: Optional[list[ProductData]]
    version: Optional[str]

class xcodeMetrics(ApplaudModel):
    class Insights(ApplaudModel):
        trending_up: Optional[list[MetricsInsight]]
        regressions: Optional[list[MetricsInsight]]

    class ProductData(ApplaudModel):
        class MetricCategory(ApplaudModel):
            class Metric(ApplaudModel):
                class GoalKey(ApplaudModel):
                    goal_key: Optional[str]
                    lower_bound: Optional[int]
                    upper_bound: Optional[int]

                class Unit(ApplaudModel):
                    identifier: Optional[str]
                    display_name: Optional[str]

                class Dataset(ApplaudModel):
                    class FilterCriteria(ApplaudModel):
                        percentile: Optional[str]
                        device: Optional[str]
                        device_marketing_name: Optional[str]

                    class Point(ApplaudModel):
                        class PercentageBreakdown(ApplaudModel):
                            value: Optional[float]
                            sub_system_label: Optional[str]

                        version: Optional[str]
                        value: Optional[float]
                        error_margin: Optional[float]
                        percentage_breakdown: Optional[PercentageBreakdown]
                        goal: Optional[str]

                    class RecommendedMetricGoal(ApplaudModel):
                        value: Optional[float]
                        detail: Optional[str]

                    filter_criteria: Optional[FilterCriteria]
                    points: Optional[list[Point]]
                    recommended_metric_goal: Optional[RecommendedMetricGoal]

                identifier: Optional[str]
                goal_keys: Optional[list[GoalKey]]
                unit: Optional[Unit]
                datasets: Optional[list[Dataset]]

            identifier: Optional[MetricCategory]
            metrics: Optional[list[Metric]]

        platform: Optional[str]
        metric_categories: Optional[list[MetricCategory]]

    version: Optional[str]
    insights: Optional[Insights]
    product_data: Optional[list[ProductData]]


