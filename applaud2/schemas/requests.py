# This file is autogenerated by `applaudgen` from `app_store_connect_api.json`.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!

from __future__ import annotations

from deprecated import deprecated
from pydantic import Field
from .enums import *
from .models import *
from typing import Optional, Literal
import datetime

class ApplaudRequest(ApplaudModel):
    
    def request_dict(self) -> dict:
       return self.dict(by_alias=True, exclude_none=True)

class AccessibilityDeclarationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            device_family: DeviceFamily
            supports_audio_descriptions: Optional[bool]
            supports_captions: Optional[bool]
            supports_dark_interface: Optional[bool]
            supports_differentiate_without_color_alone: Optional[bool]
            supports_larger_text: Optional[bool]
            supports_reduced_motion: Optional[bool]
            supports_sufficient_contrast: Optional[bool]
            supports_voice_control: Optional[bool]
            supports_voiceover: Optional[bool]

        relationships: Relationships
        attributes: Attributes
        type: Literal["accessibilityDeclarations"] = "accessibilityDeclarations"

    data: Data

class AccessibilityDeclarationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            publish: Optional[bool]
            supports_audio_descriptions: Optional[bool]
            supports_captions: Optional[bool]
            supports_dark_interface: Optional[bool]
            supports_differentiate_without_color_alone: Optional[bool]
            supports_larger_text: Optional[bool]
            supports_reduced_motion: Optional[bool]
            supports_sufficient_contrast: Optional[bool]
            supports_voice_control: Optional[bool]
            supports_voiceover: Optional[bool]

        id: str
        type: Literal["accessibilityDeclarations"] = "accessibilityDeclarations"
        attributes: Optional[Attributes]

    data: Data

class AgeRatingDeclarationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class AlcoholTobaccoOrDrugUseOrReferences(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class Contests(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class GamblingSimulated(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class GunsOrOtherWeapons(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class MedicalOrTreatmentInformation(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class ProfanityOrCrudeHumor(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class SexualContentGraphicAndNudity(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class SexualContentOrNudity(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class HorrorOrFearThemes(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class MatureOrSuggestiveThemes(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class ViolenceCartoonOrFantasy(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class ViolenceRealisticProlongedGraphicOrSadistic(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class ViolenceRealistic(StringEnum):
                NONE = 'NONE'
                INFREQUENT_OR_MILD = 'INFREQUENT_OR_MILD'
                FREQUENT_OR_INTENSE = 'FREQUENT_OR_INTENSE'
                INFREQUENT = 'INFREQUENT'
                FREQUENT = 'FREQUENT'

            class AgeRatingOverride(StringEnum):
                NONE = 'NONE'
                NINE_PLUS = 'NINE_PLUS'
                THIRTEEN_PLUS = 'THIRTEEN_PLUS'
                SIXTEEN_PLUS = 'SIXTEEN_PLUS'
                SEVENTEEN_PLUS = 'SEVENTEEN_PLUS'
                UNRATED = 'UNRATED'

            class AgeRatingOverrideV2(StringEnum):
                NONE = 'NONE'
                NINE_PLUS = 'NINE_PLUS'
                THIRTEEN_PLUS = 'THIRTEEN_PLUS'
                SIXTEEN_PLUS = 'SIXTEEN_PLUS'
                EIGHTEEN_PLUS = 'EIGHTEEN_PLUS'
                UNRATED = 'UNRATED'

            class KoreaAgeRatingOverride(StringEnum):
                NONE = 'NONE'
                FIFTEEN_PLUS = 'FIFTEEN_PLUS'
                NINETEEN_PLUS = 'NINETEEN_PLUS'

            advertising: Optional[bool]
            alcohol_tobacco_or_drug_use_or_references: Optional[AlcoholTobaccoOrDrugUseOrReferences]
            contests: Optional[Contests]
            gambling: Optional[bool]
            gambling_simulated: Optional[GamblingSimulated]
            guns_or_other_weapons: Optional[GunsOrOtherWeapons]
            health_or_wellness_topics: Optional[bool]
            kids_age_band: Optional[KidsAgeBand]
            loot_box: Optional[bool]
            medical_or_treatment_information: Optional[MedicalOrTreatmentInformation]
            messaging_and_chat: Optional[bool]
            parental_controls: Optional[bool]
            profanity_or_crude_humor: Optional[ProfanityOrCrudeHumor]
            age_assurance: Optional[bool]
            sexual_content_graphic_and_nudity: Optional[SexualContentGraphicAndNudity]
            sexual_content_or_nudity: Optional[SexualContentOrNudity]
            horror_or_fear_themes: Optional[HorrorOrFearThemes]
            mature_or_suggestive_themes: Optional[MatureOrSuggestiveThemes]
            unrestricted_web_access: Optional[bool]
            user_generated_content: Optional[bool]
            violence_cartoon_or_fantasy: Optional[ViolenceCartoonOrFantasy]
            violence_realistic_prolonged_graphic_or_sadistic: Optional[ViolenceRealisticProlongedGraphicOrSadistic]
            violence_realistic: Optional[ViolenceRealistic]
            age_rating_override: Optional[AgeRatingOverride] = Field(None, deprecated=True)
            age_rating_override_v2: Optional[AgeRatingOverrideV2]
            korea_age_rating_override: Optional[KoreaAgeRatingOverride]
            developer_age_rating_info_url: Optional[AnyUrl]

        id: str
        type: Literal["ageRatingDeclarations"] = "ageRatingDeclarations"
        attributes: Optional[Attributes]

    data: Data

class AlternativeDistributionDomainCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            domain: str
            reference_name: str

        attributes: Attributes
        type: Literal["alternativeDistributionDomains"] = "alternativeDistributionDomains"

    data: Data

class AlternativeDistributionKeyCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            public_key: str

        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Optional[Data]

            app: Optional[App]

        attributes: Attributes
        type: Literal["alternativeDistributionKeys"] = "alternativeDistributionKeys"
        relationships: Optional[Relationships]

    data: Data

class AlternativeDistributionPackageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        relationships: Relationships
        type: Literal["alternativeDistributionPackages"] = "alternativeDistributionPackages"

    data: Data

class AnalyticsReportRequest(ApplaudRequest):
    class Attributes(ApplaudModel):
        class AccessType(StringEnum):
            ONE_TIME_SNAPSHOT = 'ONE_TIME_SNAPSHOT'
            ONGOING = 'ONGOING'

        access_type: Optional[AccessType]
        stopped_due_to_inactivity: Optional[bool]

    class Relationships(ApplaudModel):
        class Reports(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["analyticsReports"] = "analyticsReports"

            links: Optional[RelationshipLinks]
            meta: Optional[PagingInformation]
            data: Optional[list[Data]]

        reports: Optional[Reports]

    id: str
    type: Literal["analyticsReportRequests"] = "analyticsReportRequests"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class AnalyticsReportRequestCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            class AccessType(StringEnum):
                ONE_TIME_SNAPSHOT = 'ONE_TIME_SNAPSHOT'
                ONGOING = 'ONGOING'

            access_type: AccessType

        relationships: Relationships
        attributes: Attributes
        type: Literal["analyticsReportRequests"] = "analyticsReportRequests"

    data: Data

class AppAvailabilityV2CreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class TerritoryAvailabilities(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territoryAvailabilities"] = "territoryAvailabilities"

                data: list[Data]

            app: App
            territory_availabilities: TerritoryAvailabilities

        class Attributes(ApplaudModel):
            available_in_new_territories: bool

        relationships: Relationships
        attributes: Attributes
        type: Literal["appAvailabilities"] = "appAvailabilities"

    data: Data
    included: Optional[list[TerritoryAvailabilityInlineCreate]]

class AppClipAdvancedExperienceImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        attributes: Attributes
        type: Literal["appClipAdvancedExperienceImages"] = "appClipAdvancedExperienceImages"

    data: Data

class AppClipAdvancedExperienceImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appClipAdvancedExperienceImages"] = "appClipAdvancedExperienceImages"
        attributes: Optional[Attributes]

    data: Data

class AppClipAdvancedExperienceCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppClip(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClips"] = "appClips"

                data: Data

            class HeaderImage(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipAdvancedExperienceImages"] = "appClipAdvancedExperienceImages"

                data: Data

            class Localizations(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipAdvancedExperienceLocalizations"] = "appClipAdvancedExperienceLocalizations"

                data: list[Data]

            app_clip: AppClip
            header_image: HeaderImage
            localizations: Localizations

        class Attributes(ApplaudModel):
            default_language: AppClipAdvancedExperienceLanguage
            is_powered_by: bool
            link: AnyUrl
            action: Optional[AppClipAction]
            place: Optional[AppClipAdvancedExperience.Attributes.Place]
            business_category: Optional[AppClipAdvancedExperienceBusinessCategory]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appClipAdvancedExperiences"] = "appClipAdvancedExperiences"

    data: Data
    included: Optional[list[AppClipAdvancedExperienceLocalizationInlineCreate]]

class AppClipAdvancedExperienceUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            action: Optional[AppClipAction]
            is_powered_by: Optional[bool]
            place: Optional[AppClipAdvancedExperience.Attributes.Place]
            business_category: Optional[AppClipAdvancedExperienceBusinessCategory]
            default_language: Optional[AppClipAdvancedExperienceLanguage]
            removed: Optional[bool]

        class Relationships(ApplaudModel):
            class AppClip(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClips"] = "appClips"

                data: Optional[Data]

            class HeaderImage(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipAdvancedExperienceImages"] = "appClipAdvancedExperienceImages"

                data: Optional[Data]

            class Localizations(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipAdvancedExperienceLocalizations"] = "appClipAdvancedExperienceLocalizations"

                data: Optional[list[Data]]

            app_clip: Optional[AppClip]
            header_image: Optional[HeaderImage]
            localizations: Optional[Localizations]

        id: str
        type: Literal["appClipAdvancedExperiences"] = "appClipAdvancedExperiences"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data
    included: Optional[list[AppClipAdvancedExperienceLocalizationInlineCreate]]

class AppClipAppStoreReviewDetailCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppClipDefaultExperience(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

                data: Data

            app_clip_default_experience: AppClipDefaultExperience

        class Attributes(ApplaudModel):
            invocation_urls: Optional[list[str]]

        relationships: Relationships
        type: Literal["appClipAppStoreReviewDetails"] = "appClipAppStoreReviewDetails"
        attributes: Optional[Attributes]

    data: Data

class AppClipAppStoreReviewDetailUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            invocation_urls: Optional[list[str]]

        id: str
        type: Literal["appClipAppStoreReviewDetails"] = "appClipAppStoreReviewDetails"
        attributes: Optional[Attributes]

    data: Data

class AppClipDefaultExperienceLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppClipDefaultExperience(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

                data: Data

            app_clip_default_experience: AppClipDefaultExperience

        class Attributes(ApplaudModel):
            locale: str
            subtitle: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appClipDefaultExperienceLocalizations"] = "appClipDefaultExperienceLocalizations"

    data: Data

class AppClipDefaultExperienceLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            subtitle: Optional[str]

        id: str
        type: Literal["appClipDefaultExperienceLocalizations"] = "appClipDefaultExperienceLocalizations"
        attributes: Optional[Attributes]

    data: Data

class AppClipDefaultExperienceCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppClip(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClips"] = "appClips"

                data: Data

            class ReleaseWithAppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Optional[Data]

            class AppClipDefaultExperienceTemplate(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

                data: Optional[Data]

            app_clip: AppClip
            release_with_app_store_version: Optional[ReleaseWithAppStoreVersion]
            app_clip_default_experience_template: Optional[AppClipDefaultExperienceTemplate]

        class Attributes(ApplaudModel):
            action: Optional[AppClipAction]

        relationships: Relationships
        type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"
        attributes: Optional[Attributes]

    data: Data

class AppClipDefaultExperienceUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            action: Optional[AppClipAction]

        class Relationships(ApplaudModel):
            class ReleaseWithAppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Optional[Data]

            release_with_app_store_version: Optional[ReleaseWithAppStoreVersion]

        id: str
        type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class AppClipHeaderImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppClipDefaultExperienceLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipDefaultExperienceLocalizations"] = "appClipDefaultExperienceLocalizations"

                data: Data

            app_clip_default_experience_localization: AppClipDefaultExperienceLocalization

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["appClipHeaderImages"] = "appClipHeaderImages"

    data: Data

class AppClipHeaderImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appClipHeaderImages"] = "appClipHeaderImages"
        attributes: Optional[Attributes]

    data: Data

class AppCustomProductPageLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppCustomProductPageVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

                data: Data

            app_custom_product_page_version: AppCustomProductPageVersion

        class Attributes(ApplaudModel):
            locale: str
            promotional_text: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

    data: Data

class AppCustomProductPageLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            promotional_text: Optional[str]

        id: str
        type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"
        attributes: Optional[Attributes]

    data: Data

class AppCustomProductPageVersionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppCustomProductPage(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPages"] = "appCustomProductPages"

                data: Data

            class AppCustomProductPageLocalizations(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

                data: Optional[list[Data]]

            app_custom_product_page: AppCustomProductPage
            app_custom_product_page_localizations: Optional[AppCustomProductPageLocalizations]

        class Attributes(ApplaudModel):
            deep_link: Optional[AnyUrl]

        relationships: Relationships
        type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"
        attributes: Optional[Attributes]

    data: Data

class AppCustomProductPageVersionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            deep_link: Optional[AnyUrl]

        id: str
        type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"
        attributes: Optional[Attributes]

    data: Data

class AppCustomProductPageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class AppCustomProductPageVersions(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

                data: Optional[list[Data]]

            class AppStoreVersionTemplate(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Optional[Data]

            class CustomProductPageTemplate(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPages"] = "appCustomProductPages"

                data: Optional[Data]

            app: App
            app_custom_product_page_versions: Optional[AppCustomProductPageVersions]
            app_store_version_template: Optional[AppStoreVersionTemplate]
            custom_product_page_template: Optional[CustomProductPageTemplate]

        class Attributes(ApplaudModel):
            name: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["appCustomProductPages"] = "appCustomProductPages"

    data: Data
    included: Optional[list[Union[AppCustomProductPageLocalizationInlineCreate, AppCustomProductPageVersionInlineCreate]]]

class AppCustomProductPageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            visible: Optional[bool]

        id: str
        type: Literal["appCustomProductPages"] = "appCustomProductPages"
        attributes: Optional[Attributes]

    data: Data

class AppEncryptionDeclarationDocumentCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppEncryptionDeclaration(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

                data: Data

            app_encryption_declaration: AppEncryptionDeclaration

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["appEncryptionDeclarationDocuments"] = "appEncryptionDeclarationDocuments"

    data: Data

class AppEncryptionDeclarationDocumentUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appEncryptionDeclarationDocuments"] = "appEncryptionDeclarationDocuments"
        attributes: Optional[Attributes]

    data: Data

class AppEncryptionDeclarationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            @deprecated
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            available_on_french_store: bool
            app_description: str
            contains_third_party_cryptography: bool
            contains_proprietary_cryptography: bool

        relationships: Relationships
        attributes: Attributes
        type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

    data: Data

class AppEventLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppEvent(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEvents"] = "appEvents"

                data: Data

            app_event: AppEvent

        class Attributes(ApplaudModel):
            locale: str
            name: Optional[str]
            short_description: Optional[str]
            long_description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appEventLocalizations"] = "appEventLocalizations"

    data: Data

class AppEventLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            short_description: Optional[str]
            long_description: Optional[str]

        id: str
        type: Literal["appEventLocalizations"] = "appEventLocalizations"
        attributes: Optional[Attributes]

    data: Data

class AppEventScreenshotCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppEventLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEventLocalizations"] = "appEventLocalizations"

                data: Data

            app_event_localization: AppEventLocalization

        class Attributes(ApplaudModel):
            file_name: str
            app_event_asset_type: AppEventAssetType
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["appEventScreenshots"] = "appEventScreenshots"

    data: Data

class AppEventScreenshotUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            uploaded: Optional[bool]

        id: str
        type: Literal["appEventScreenshots"] = "appEventScreenshots"
        attributes: Optional[Attributes]

    data: Data

class AppEventVideoClipCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppEventLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEventLocalizations"] = "appEventLocalizations"

                data: Data

            app_event_localization: AppEventLocalization

        class Attributes(ApplaudModel):
            file_name: str
            app_event_asset_type: AppEventAssetType
            file_size: int
            preview_frame_time_code: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appEventVideoClips"] = "appEventVideoClips"

    data: Data

class AppEventVideoClipUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            preview_frame_time_code: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appEventVideoClips"] = "appEventVideoClips"
        attributes: Optional[Attributes]

    data: Data

class AppEventCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            class TerritorySchedule(ApplaudModel):
                territories: Optional[list[str]]
                publish_start: Optional[datetime.datetime]
                event_start: Optional[datetime.datetime]
                event_end: Optional[datetime.datetime]

            class Badge(StringEnum):
                LIVE_EVENT = 'LIVE_EVENT'
                PREMIERE = 'PREMIERE'
                CHALLENGE = 'CHALLENGE'
                COMPETITION = 'COMPETITION'
                NEW_SEASON = 'NEW_SEASON'
                MAJOR_UPDATE = 'MAJOR_UPDATE'
                SPECIAL_EVENT = 'SPECIAL_EVENT'

            class Priority(StringEnum):
                HIGH = 'HIGH'
                NORMAL = 'NORMAL'

            class Purpose(StringEnum):
                APPROPRIATE_FOR_ALL_USERS = 'APPROPRIATE_FOR_ALL_USERS'
                ATTRACT_NEW_USERS = 'ATTRACT_NEW_USERS'
                KEEP_ACTIVE_USERS_INFORMED = 'KEEP_ACTIVE_USERS_INFORMED'
                BRING_BACK_LAPSED_USERS = 'BRING_BACK_LAPSED_USERS'

            reference_name: str
            badge: Optional[Badge]
            deep_link: Optional[AnyUrl]
            purchase_requirement: Optional[str]
            primary_locale: Optional[str]
            priority: Optional[Priority]
            purpose: Optional[Purpose]
            territory_schedules: Optional[list[TerritorySchedule]]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appEvents"] = "appEvents"

    data: Data

class AppEventUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class TerritorySchedule(ApplaudModel):
                territories: Optional[list[str]]
                publish_start: Optional[datetime.datetime]
                event_start: Optional[datetime.datetime]
                event_end: Optional[datetime.datetime]

            class Badge(StringEnum):
                LIVE_EVENT = 'LIVE_EVENT'
                PREMIERE = 'PREMIERE'
                CHALLENGE = 'CHALLENGE'
                COMPETITION = 'COMPETITION'
                NEW_SEASON = 'NEW_SEASON'
                MAJOR_UPDATE = 'MAJOR_UPDATE'
                SPECIAL_EVENT = 'SPECIAL_EVENT'

            class Priority(StringEnum):
                HIGH = 'HIGH'
                NORMAL = 'NORMAL'

            class Purpose(StringEnum):
                APPROPRIATE_FOR_ALL_USERS = 'APPROPRIATE_FOR_ALL_USERS'
                ATTRACT_NEW_USERS = 'ATTRACT_NEW_USERS'
                KEEP_ACTIVE_USERS_INFORMED = 'KEEP_ACTIVE_USERS_INFORMED'
                BRING_BACK_LAPSED_USERS = 'BRING_BACK_LAPSED_USERS'

            reference_name: Optional[str]
            badge: Optional[Badge]
            deep_link: Optional[AnyUrl]
            purchase_requirement: Optional[str]
            primary_locale: Optional[str]
            priority: Optional[Priority]
            purpose: Optional[Purpose]
            territory_schedules: Optional[list[TerritorySchedule]]

        id: str
        type: Literal["appEvents"] = "appEvents"
        attributes: Optional[Attributes]

    data: Data

class AppInfoLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppInfo(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appInfos"] = "appInfos"

                data: Data

            app_info: AppInfo

        class Attributes(ApplaudModel):
            name: str
            locale: str
            subtitle: Optional[str]
            privacy_policy_url: Optional[str]
            privacy_choices_url: Optional[str]
            privacy_policy_text: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appInfoLocalizations"] = "appInfoLocalizations"

    data: Data

class AppInfoLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            subtitle: Optional[str]
            privacy_policy_url: Optional[str]
            privacy_choices_url: Optional[str]
            privacy_policy_text: Optional[str]

        id: str
        type: Literal["appInfoLocalizations"] = "appInfoLocalizations"
        attributes: Optional[Attributes]

    data: Data

class AppInfoUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class PrimaryCategory(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCategories"] = "appCategories"

                data: Optional[Data]

            class PrimarySubcategoryOne(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCategories"] = "appCategories"

                data: Optional[Data]

            class PrimarySubcategoryTwo(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCategories"] = "appCategories"

                data: Optional[Data]

            class SecondaryCategory(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCategories"] = "appCategories"

                data: Optional[Data]

            class SecondarySubcategoryOne(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCategories"] = "appCategories"

                data: Optional[Data]

            class SecondarySubcategoryTwo(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCategories"] = "appCategories"

                data: Optional[Data]

            primary_category: Optional[PrimaryCategory]
            primary_subcategory_one: Optional[PrimarySubcategoryOne]
            primary_subcategory_two: Optional[PrimarySubcategoryTwo]
            secondary_category: Optional[SecondaryCategory]
            secondary_subcategory_one: Optional[SecondarySubcategoryOne]
            secondary_subcategory_two: Optional[SecondarySubcategoryTwo]

        id: str
        type: Literal["appInfos"] = "appInfos"
        relationships: Optional[Relationships]

    data: Data

class AppPreviewSetCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            preview_type: PreviewType

        class Relationships(ApplaudModel):
            class AppStoreVersionLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

                data: Optional[Data]

            class AppCustomProductPageLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

                data: Optional[Data]

            class AppStoreVersionExperimentTreatmentLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"

                data: Optional[Data]

            app_store_version_localization: Optional[AppStoreVersionLocalization]
            app_custom_product_page_localization: Optional[AppCustomProductPageLocalization]
            app_store_version_experiment_treatment_localization: Optional[AppStoreVersionExperimentTreatmentLocalization]

        attributes: Attributes
        type: Literal["appPreviewSets"] = "appPreviewSets"
        relationships: Optional[Relationships]

    data: Data

class AppPreviewCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppPreviewSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appPreviewSets"] = "appPreviewSets"

                data: Data

            app_preview_set: AppPreviewSet

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int
            preview_frame_time_code: Optional[str]
            mime_type: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appPreviews"] = "appPreviews"

    data: Data

class AppPreviewUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            preview_frame_time_code: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appPreviews"] = "appPreviews"
        attributes: Optional[Attributes]

    data: Data

class AppPriceScheduleCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class ManualPrices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appPrices"] = "appPrices"

                data: list[Data]

            class BaseTerritory(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Data

            app: App
            manual_prices: ManualPrices
            base_territory: BaseTerritory

        relationships: Relationships
        type: Literal["appPriceSchedules"] = "appPriceSchedules"

    data: Data
    included: Optional[list[Union[AppPriceV2InlineCreate, TerritoryInlineCreate]]]

class AppScreenshotSetCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            screenshot_display_type: ScreenshotDisplayType

        class Relationships(ApplaudModel):
            class AppStoreVersionLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

                data: Optional[Data]

            class AppCustomProductPageLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPageLocalizations"] = "appCustomProductPageLocalizations"

                data: Optional[Data]

            class AppStoreVersionExperimentTreatmentLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"

                data: Optional[Data]

            app_store_version_localization: Optional[AppStoreVersionLocalization]
            app_custom_product_page_localization: Optional[AppCustomProductPageLocalization]
            app_store_version_experiment_treatment_localization: Optional[AppStoreVersionExperimentTreatmentLocalization]

        attributes: Attributes
        type: Literal["appScreenshotSets"] = "appScreenshotSets"
        relationships: Optional[Relationships]

    data: Data

class AppScreenshotCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppScreenshotSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appScreenshotSets"] = "appScreenshotSets"

                data: Data

            app_screenshot_set: AppScreenshotSet

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["appScreenshots"] = "appScreenshots"

    data: Data

class AppScreenshotUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appScreenshots"] = "appScreenshots"
        attributes: Optional[Attributes]

    data: Data

class AppStoreReviewAttachmentCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreReviewDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreReviewDetails"] = "appStoreReviewDetails"

                data: Data

            app_store_review_detail: AppStoreReviewDetail

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["appStoreReviewAttachments"] = "appStoreReviewAttachments"

    data: Data

class AppStoreReviewAttachmentUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["appStoreReviewAttachments"] = "appStoreReviewAttachments"
        attributes: Optional[Attributes]

    data: Data

class AppStoreReviewDetailCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        class Attributes(ApplaudModel):
            contact_first_name: Optional[str]
            contact_last_name: Optional[str]
            contact_phone: Optional[str]
            contact_email: Optional[str]
            demo_account_name: Optional[str]
            demo_account_password: Optional[str]
            demo_account_required: Optional[bool]
            notes: Optional[str]

        relationships: Relationships
        type: Literal["appStoreReviewDetails"] = "appStoreReviewDetails"
        attributes: Optional[Attributes]

    data: Data

class AppStoreReviewDetailUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            contact_first_name: Optional[str]
            contact_last_name: Optional[str]
            contact_phone: Optional[str]
            contact_email: Optional[str]
            demo_account_name: Optional[str]
            demo_account_password: Optional[str]
            demo_account_required: Optional[bool]
            notes: Optional[str]

        id: str
        type: Literal["appStoreReviewDetails"] = "appStoreReviewDetails"
        attributes: Optional[Attributes]

    data: Data

class AppStoreVersionExperimentTreatmentLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersionExperimentTreatment(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"

                data: Data

            app_store_version_experiment_treatment: AppStoreVersionExperimentTreatment

        class Attributes(ApplaudModel):
            locale: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["appStoreVersionExperimentTreatmentLocalizations"] = "appStoreVersionExperimentTreatmentLocalizations"

    data: Data

class AppStoreVersionExperimentTreatmentCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: str
            app_icon_name: Optional[str]

        class Relationships(ApplaudModel):
            class AppStoreVersionExperiment(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

                data: Optional[Data]

            class AppStoreVersionExperimentV2(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

                data: Optional[Data]

            app_store_version_experiment: Optional[AppStoreVersionExperiment]
            app_store_version_experiment_v2: Optional[AppStoreVersionExperimentV2]

        attributes: Attributes
        type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"
        relationships: Optional[Relationships]

    data: Data

class AppStoreVersionExperimentTreatmentUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            app_icon_name: Optional[str]

        id: str
        type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"
        attributes: Optional[Attributes]

    data: Data

class AppStoreVersionExperimentV2CreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            traffic_proportion: int
            name: str
            platform: Platform

        relationships: Relationships
        attributes: Attributes
        type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

    data: Data

class AppStoreVersionExperimentV2UpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            traffic_proportion: Optional[int]
            started: Optional[bool]

        id: str
        type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"
        attributes: Optional[Attributes]

    data: Data

@deprecated
class AppStoreVersionExperimentCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        class Attributes(ApplaudModel):
            traffic_proportion: int
            name: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

    data: Data

@deprecated
class AppStoreVersionExperimentUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            traffic_proportion: Optional[int]
            started: Optional[bool]

        id: str
        type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"
        attributes: Optional[Attributes]

    data: Data

class AppStoreVersionLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        class Attributes(ApplaudModel):
            locale: str
            description: Optional[str]
            keywords: Optional[str]
            marketing_url: Optional[AnyUrl]
            promotional_text: Optional[str]
            support_url: Optional[AnyUrl]
            whats_new: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

    data: Data

class AppStoreVersionLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            description: Optional[str]
            keywords: Optional[str]
            marketing_url: Optional[AnyUrl]
            promotional_text: Optional[str]
            support_url: Optional[AnyUrl]
            whats_new: Optional[str]

        id: str
        type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"
        attributes: Optional[Attributes]

    data: Data

class AppStoreVersionPhasedReleaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        class Attributes(ApplaudModel):
            phased_release_state: Optional[PhasedReleaseState]

        relationships: Relationships
        type: Literal["appStoreVersionPhasedReleases"] = "appStoreVersionPhasedReleases"
        attributes: Optional[Attributes]

    data: Data

class AppStoreVersionPhasedReleaseUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            phased_release_state: Optional[PhasedReleaseState]

        id: str
        type: Literal["appStoreVersionPhasedReleases"] = "appStoreVersionPhasedReleases"
        attributes: Optional[Attributes]

    data: Data

class AppStoreVersionPromotionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersionExperimentTreatment(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperimentTreatments"] = "appStoreVersionExperimentTreatments"

                data: Data

            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version_experiment_treatment: AppStoreVersionExperimentTreatment
            app_store_version: AppStoreVersion

        relationships: Relationships
        type: Literal["appStoreVersionPromotions"] = "appStoreVersionPromotions"

    data: Data

class AppStoreVersionReleaseRequest(ApplaudRequest):
    id: str
    type: Literal["appStoreVersionReleaseRequests"] = "appStoreVersionReleaseRequests"
    links: Optional[ResourceLinks]

class AppStoreVersionReleaseRequestCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        relationships: Relationships
        type: Literal["appStoreVersionReleaseRequests"] = "appStoreVersionReleaseRequests"

    data: Data

class AppStoreVersionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class AppStoreVersionLocalizations(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionLocalizations"] = "appStoreVersionLocalizations"

                data: Optional[list[Data]]

            class Build(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Optional[Data]

            app: App
            app_store_version_localizations: Optional[AppStoreVersionLocalizations]
            build: Optional[Build]

        class Attributes(ApplaudModel):
            class ReviewType(StringEnum):
                APP_STORE = 'APP_STORE'
                NOTARIZATION = 'NOTARIZATION'

            version_string: str
            platform: Platform
            copyright: Optional[str]
            review_type: Optional[ReviewType]
            release_type: Optional[AppStoreVersionReleaseType]
            earliest_release_date: Optional[datetime.datetime]
            uses_idfa: Optional[bool] = Field(None, deprecated=True)

        relationships: Relationships
        attributes: Attributes
        type: Literal["appStoreVersions"] = "appStoreVersions"

    data: Data

class AppStoreVersionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class ReviewType(StringEnum):
                APP_STORE = 'APP_STORE'
                NOTARIZATION = 'NOTARIZATION'

            version_string: Optional[str]
            copyright: Optional[str]
            review_type: Optional[ReviewType]
            release_type: Optional[AppStoreVersionReleaseType]
            earliest_release_date: Optional[datetime.datetime]
            uses_idfa: Optional[bool] = Field(None, deprecated=True)
            downloadable: Optional[bool]

        class Relationships(ApplaudModel):
            class Build(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Optional[Data]

            class AppClipDefaultExperience(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

                data: Optional[Data]

            build: Optional[Build]
            app_clip_default_experience: Optional[AppClipDefaultExperience]

        id: str
        type: Literal["appStoreVersions"] = "appStoreVersions"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class AppTagUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            visible_in_app_store: Optional[bool]

        id: str
        type: Literal["appTags"] = "appTags"
        attributes: Optional[Attributes]

    data: Data

class AppUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            accessibility_url: Optional[AnyUrl]
            bundle_id: Optional[str]
            primary_locale: Optional[str]
            subscription_status_url: Optional[AnyUrl]
            subscription_status_url_version: Optional[SubscriptionStatusUrlVersion]
            subscription_status_url_for_sandbox: Optional[AnyUrl]
            subscription_status_url_version_for_sandbox: Optional[SubscriptionStatusUrlVersion]
            content_rights_declaration: Optional[AppContentRightsDeclaration]
            streamlined_purchasing_enabled: Optional[bool]

        id: str
        type: Literal["apps"] = "apps"
        attributes: Optional[Attributes]

    data: Data

class BackgroundAssetUploadFileCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BackgroundAssetVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

                data: Data

            background_asset_version: BackgroundAssetVersion

        class Attributes(ApplaudModel):
            class AssetType(StringEnum):
                ASSET = 'ASSET'
                MANIFEST = 'MANIFEST'

            file_name: str
            file_size: int
            asset_type: AssetType

        relationships: Relationships
        attributes: Attributes
        type: Literal["backgroundAssetUploadFiles"] = "backgroundAssetUploadFiles"

    data: Data

class BackgroundAssetUploadFileUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str] = Field(None, deprecated=True)
            source_file_checksums: Optional[Checksums]
            uploaded: Optional[bool]

        id: str
        type: Literal["backgroundAssetUploadFiles"] = "backgroundAssetUploadFiles"
        attributes: Optional[Attributes]

    data: Data

class BackgroundAssetVersionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BackgroundAsset(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["backgroundAssets"] = "backgroundAssets"

                data: Data

            background_asset: BackgroundAsset

        relationships: Relationships
        type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

    data: Data

class BackgroundAssetCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            asset_pack_identifier: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["backgroundAssets"] = "backgroundAssets"

    data: Data

class BetaAppClipInvocationLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BetaAppClipInvocation(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["betaAppClipInvocations"] = "betaAppClipInvocations"

                data: Data

            beta_app_clip_invocation: BetaAppClipInvocation

        class Attributes(ApplaudModel):
            locale: str
            title: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["betaAppClipInvocationLocalizations"] = "betaAppClipInvocationLocalizations"

    data: Data

class BetaAppClipInvocationLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            title: Optional[str]

        id: str
        type: Literal["betaAppClipInvocationLocalizations"] = "betaAppClipInvocationLocalizations"
        attributes: Optional[Attributes]

    data: Data

class BetaAppClipInvocationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BuildBundle(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["buildBundles"] = "buildBundles"

                data: Data

            class BetaAppClipInvocationLocalizations(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["betaAppClipInvocationLocalizations"] = "betaAppClipInvocationLocalizations"

                data: list[Data]

            build_bundle: BuildBundle
            beta_app_clip_invocation_localizations: BetaAppClipInvocationLocalizations

        class Attributes(ApplaudModel):
            url: AnyUrl

        relationships: Relationships
        attributes: Attributes
        type: Literal["betaAppClipInvocations"] = "betaAppClipInvocations"

    data: Data
    included: Optional[list[BetaAppClipInvocationLocalizationInlineCreate]]

class BetaAppClipInvocationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            url: Optional[AnyUrl]

        id: str
        type: Literal["betaAppClipInvocations"] = "betaAppClipInvocations"
        attributes: Optional[Attributes]

    data: Data

class BetaAppLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            locale: str
            feedback_email: Optional[str]
            marketing_url: Optional[str]
            privacy_policy_url: Optional[str]
            tv_os_privacy_policy: Optional[str]
            description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["betaAppLocalizations"] = "betaAppLocalizations"

    data: Data

class BetaAppLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            feedback_email: Optional[str]
            marketing_url: Optional[str]
            privacy_policy_url: Optional[str]
            tv_os_privacy_policy: Optional[str]
            description: Optional[str]

        id: str
        type: Literal["betaAppLocalizations"] = "betaAppLocalizations"
        attributes: Optional[Attributes]

    data: Data

class BetaAppReviewDetailUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            contact_first_name: Optional[str]
            contact_last_name: Optional[str]
            contact_phone: Optional[str]
            contact_email: Optional[str]
            demo_account_name: Optional[str]
            demo_account_password: Optional[str]
            demo_account_required: Optional[bool]
            notes: Optional[str]

        id: str
        type: Literal["betaAppReviewDetails"] = "betaAppReviewDetails"
        attributes: Optional[Attributes]

    data: Data

class BetaAppReviewSubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Build(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Data

            build: Build

        relationships: Relationships
        type: Literal["betaAppReviewSubmissions"] = "betaAppReviewSubmissions"

    data: Data

class BetaBuildLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Build(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Data

            build: Build

        class Attributes(ApplaudModel):
            locale: str
            whats_new: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["betaBuildLocalizations"] = "betaBuildLocalizations"

    data: Data

class BetaBuildLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            whats_new: Optional[str]

        id: str
        type: Literal["betaBuildLocalizations"] = "betaBuildLocalizations"
        attributes: Optional[Attributes]

    data: Data

class BetaGroupCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class Builds(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Optional[list[Data]]

            class BetaTesters(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["betaTesters"] = "betaTesters"

                data: Optional[list[Data]]

            app: App
            builds: Optional[Builds]
            beta_testers: Optional[BetaTesters]

        class Attributes(ApplaudModel):
            name: str
            is_internal_group: Optional[bool]
            has_access_to_all_builds: Optional[bool]
            public_link_enabled: Optional[bool]
            public_link_limit_enabled: Optional[bool]
            public_link_limit: Optional[int]
            feedback_enabled: Optional[bool]

        relationships: Relationships
        attributes: Attributes
        type: Literal["betaGroups"] = "betaGroups"

    data: Data

class BetaGroupUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            public_link_enabled: Optional[bool]
            public_link_limit_enabled: Optional[bool]
            public_link_limit: Optional[int]
            feedback_enabled: Optional[bool]
            ios_builds_available_for_apple_silicon_mac: Optional[bool]
            ios_builds_available_for_apple_vision: Optional[bool]

        id: str
        type: Literal["betaGroups"] = "betaGroups"
        attributes: Optional[Attributes]

    data: Data

class BetaLicenseAgreementUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            agreement_text: Optional[str]

        id: str
        type: Literal["betaLicenseAgreements"] = "betaLicenseAgreements"
        attributes: Optional[Attributes]

    data: Data

class BetaRecruitmentCriterionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BetaGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["betaGroups"] = "betaGroups"

                data: Data

            beta_group: BetaGroup

        class Attributes(ApplaudModel):
            device_family_os_version_filters: list[DeviceFamilyOsVersionFilter]

        relationships: Relationships
        attributes: Attributes
        type: Literal["betaRecruitmentCriteria"] = "betaRecruitmentCriteria"

    data: Data

class BetaRecruitmentCriterionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            device_family_os_version_filters: Optional[list[DeviceFamilyOsVersionFilter]]

        id: str
        type: Literal["betaRecruitmentCriteria"] = "betaRecruitmentCriteria"
        attributes: Optional[Attributes]

    data: Data

class BetaTesterInvitationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            @deprecated
            class BetaTester(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["betaTesters"] = "betaTesters"

                data: Optional[Data]

            app: App
            beta_tester: Optional[BetaTester] = Field(None, deprecated=True)

        relationships: Relationships
        type: Literal["betaTesterInvitations"] = "betaTesterInvitations"

    data: Data

class BetaTesterCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            email: EmailStr
            first_name: Optional[str]
            last_name: Optional[str]

        class Relationships(ApplaudModel):
            class BetaGroups(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["betaGroups"] = "betaGroups"

                data: Optional[list[Data]]

            class Builds(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Optional[list[Data]]

            beta_groups: Optional[BetaGroups]
            builds: Optional[Builds]

        attributes: Attributes
        type: Literal["betaTesters"] = "betaTesters"
        relationships: Optional[Relationships]

    data: Data

class BuildBetaDetailUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            auto_notify_enabled: Optional[bool]

        id: str
        type: Literal["buildBetaDetails"] = "buildBetaDetails"
        attributes: Optional[Attributes]

    data: Data

class BuildBetaNotificationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Build(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["builds"] = "builds"

                data: Data

            build: Build

        relationships: Relationships
        type: Literal["buildBetaNotifications"] = "buildBetaNotifications"

    data: Data

class BuildUploadFileCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BuildUpload(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["buildUploads"] = "buildUploads"

                data: Data

            build_upload: BuildUpload

        class Attributes(ApplaudModel):
            class Uti(StringEnum):
                com_apple_binary_property_list = 'com.apple.binary-property-list'
                com_apple_ipa = 'com.apple.ipa'
                com_apple_pkg = 'com.apple.pkg'
                com_apple_xml_property_list = 'com.apple.xml-property-list'
                com_pkware_zip_archive = 'com.pkware.zip-archive'

            class AssetType(StringEnum):
                ASSET = 'ASSET'
                ASSET_DESCRIPTION = 'ASSET_DESCRIPTION'
                ASSET_SPI = 'ASSET_SPI'

            file_name: str
            file_size: int
            uti: Uti
            asset_type: AssetType

        relationships: Relationships
        attributes: Attributes
        type: Literal["buildUploadFiles"] = "buildUploadFiles"

    data: Data

class BuildUploadFileUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksums: Optional[Checksums]
            uploaded: Optional[bool]

        id: str
        type: Literal["buildUploadFiles"] = "buildUploadFiles"
        attributes: Optional[Attributes]

    data: Data

class BuildUploadCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            cf_bundle_version: str
            cf_bundle_short_version_string: str
            platform: Platform

        relationships: Relationships
        attributes: Attributes
        type: Literal["buildUploads"] = "buildUploads"

    data: Data

class BuildUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            expired: Optional[bool]
            uses_non_exempt_encryption: Optional[bool]

        class Relationships(ApplaudModel):
            class AppEncryptionDeclaration(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

                data: Optional[Data]

            app_encryption_declaration: Optional[AppEncryptionDeclaration]

        id: str
        type: Literal["builds"] = "builds"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class BundleIdCapabilityCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class BundleId(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["bundleIds"] = "bundleIds"

                data: Data

            bundle_id: BundleId

        class Attributes(ApplaudModel):
            capability_type: CapabilityType
            settings: Optional[list[CapabilitySetting]]

        relationships: Relationships
        attributes: Attributes
        type: Literal["bundleIdCapabilities"] = "bundleIdCapabilities"

    data: Data

class BundleIdCapabilityUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            capability_type: Optional[CapabilityType]
            settings: Optional[list[CapabilitySetting]]

        id: str
        type: Literal["bundleIdCapabilities"] = "bundleIdCapabilities"
        attributes: Optional[Attributes]

    data: Data

class BundleIdCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            identifier: str
            name: str
            platform: BundleIdPlatform
            seed_id: Optional[str]

        attributes: Attributes
        type: Literal["bundleIds"] = "bundleIds"

    data: Data

class BundleIdUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]

        id: str
        type: Literal["bundleIds"] = "bundleIds"
        attributes: Optional[Attributes]

    data: Data

class CertificateCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            csr_content: str
            certificate_type: CertificateType

        class Relationships(ApplaudModel):
            class MerchantId(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["merchantIds"] = "merchantIds"

                data: Optional[Data]

            class PassTypeId(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["passTypeIds"] = "passTypeIds"

                data: Optional[Data]

            merchant_id: Optional[MerchantId]
            pass_type_id: Optional[PassTypeId]

        attributes: Attributes
        type: Literal["certificates"] = "certificates"
        relationships: Optional[Relationships]

    data: Data

class CertificateUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            activated: Optional[bool]

        id: str
        type: Literal["certificates"] = "certificates"
        attributes: Optional[Attributes]

    data: Data

class CiBuildRunCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            clean: Optional[bool]

        class Relationships(ApplaudModel):
            class BuildRun(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciBuildRuns"] = "ciBuildRuns"

                data: Optional[Data]

            class Workflow(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciWorkflows"] = "ciWorkflows"

                data: Optional[Data]

            class SourceBranchOrTag(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["scmGitReferences"] = "scmGitReferences"

                data: Optional[Data]

            class PullRequest(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["scmPullRequests"] = "scmPullRequests"

                data: Optional[Data]

            build_run: Optional[BuildRun]
            workflow: Optional[Workflow]
            source_branch_or_tag: Optional[SourceBranchOrTag]
            pull_request: Optional[PullRequest]

        type: Literal["ciBuildRuns"] = "ciBuildRuns"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class CiWorkflowCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class MacOsVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciMacOsVersions"] = "ciMacOsVersions"

                data: Data

            class Product(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciProducts"] = "ciProducts"

                data: Data

            class Repository(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["scmRepositories"] = "scmRepositories"

                data: Data

            class XcodeVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciXcodeVersions"] = "ciXcodeVersions"

                data: Data

            mac_os_version: MacOsVersion
            product: Product
            repository: Repository
            xcode_version: XcodeVersion

        class Attributes(ApplaudModel):
            container_file_path: str
            is_enabled: bool
            name: str
            description: str
            clean: bool
            actions: list[CiAction]
            branch_start_condition: Optional[CiBranchStartCondition]
            tag_start_condition: Optional[CiTagStartCondition]
            pull_request_start_condition: Optional[CiPullRequestStartCondition]
            scheduled_start_condition: Optional[CiScheduledStartCondition]
            manual_branch_start_condition: Optional[CiManualBranchStartCondition]
            manual_tag_start_condition: Optional[CiManualTagStartCondition]
            manual_pull_request_start_condition: Optional[CiManualPullRequestStartCondition]
            is_locked_for_editing: Optional[bool]

        relationships: Relationships
        attributes: Attributes
        type: Literal["ciWorkflows"] = "ciWorkflows"

    data: Data

class CiWorkflowUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            description: Optional[str]
            branch_start_condition: Optional[CiBranchStartCondition]
            tag_start_condition: Optional[CiTagStartCondition]
            pull_request_start_condition: Optional[CiPullRequestStartCondition]
            scheduled_start_condition: Optional[CiScheduledStartCondition]
            manual_branch_start_condition: Optional[CiManualBranchStartCondition]
            manual_tag_start_condition: Optional[CiManualTagStartCondition]
            manual_pull_request_start_condition: Optional[CiManualPullRequestStartCondition]
            actions: Optional[list[CiAction]]
            is_enabled: Optional[bool]
            is_locked_for_editing: Optional[bool]
            clean: Optional[bool]
            container_file_path: Optional[str]

        class Relationships(ApplaudModel):
            class XcodeVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciXcodeVersions"] = "ciXcodeVersions"

                data: Optional[Data]

            class MacOsVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["ciMacOsVersions"] = "ciMacOsVersions"

                data: Optional[Data]

            xcode_version: Optional[XcodeVersion]
            mac_os_version: Optional[MacOsVersion]

        id: str
        type: Literal["ciWorkflows"] = "ciWorkflows"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class CustomerReviewResponseV1CreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Review(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["customerReviews"] = "customerReviews"

                data: Data

            review: Review

        class Attributes(ApplaudModel):
            response_body: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["customerReviewResponses"] = "customerReviewResponses"

    data: Data

class DeviceCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: str
            udid: str
            platform: BundleIdPlatform

        attributes: Attributes
        type: Literal["devices"] = "devices"

    data: Data

class DeviceUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            status: Optional[DeviceStatus]

        id: str
        type: Literal["devices"] = "devices"
        attributes: Optional[Attributes]

    data: Data

class EndAppAvailabilityPreOrderCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class TerritoryAvailabilities(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territoryAvailabilities"] = "territoryAvailabilities"

                data: list[Data]

            territory_availabilities: TerritoryAvailabilities

        relationships: Relationships
        type: Literal["endAppAvailabilityPreOrders"] = "endAppAvailabilityPreOrders"

    data: Data

class EndUserLicenseAgreementCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class Territories(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: list[Data]

            app: App
            territories: Territories

        class Attributes(ApplaudModel):
            agreement_text: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["endUserLicenseAgreements"] = "endUserLicenseAgreements"

    data: Data

class EndUserLicenseAgreementUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            agreement_text: Optional[str]

        class Relationships(ApplaudModel):
            class Territories(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Optional[list[Data]]

            territories: Optional[Territories]

        id: str
        type: Literal["endUserLicenseAgreements"] = "endUserLicenseAgreements"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class GameCenterAchievementImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterAchievementLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterAchievementLocalizations"] = "gameCenterAchievementLocalizations"

                data: Data

            game_center_achievement_localization: GameCenterAchievementLocalization

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterAchievementImages"] = "gameCenterAchievementImages"

    data: Data

class GameCenterAchievementImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            uploaded: Optional[bool]

        id: str
        type: Literal["gameCenterAchievementImages"] = "gameCenterAchievementImages"
        attributes: Optional[Attributes]

    data: Data

class GameCenterAchievementLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterAchievement(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

                data: Data

            game_center_achievement: GameCenterAchievement

        class Attributes(ApplaudModel):
            name: str
            before_earned_description: str
            locale: str
            after_earned_description: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterAchievementLocalizations"] = "gameCenterAchievementLocalizations"

    data: Data

class GameCenterAchievementLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            before_earned_description: Optional[str]
            after_earned_description: Optional[str]

        id: str
        type: Literal["gameCenterAchievementLocalizations"] = "gameCenterAchievementLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterAchievementReleaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Data

            class GameCenterAchievement(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

                data: Data

            game_center_detail: GameCenterDetail
            game_center_achievement: GameCenterAchievement

        relationships: Relationships
        type: Literal["gameCenterAchievementReleases"] = "gameCenterAchievementReleases"

    data: Data

class GameCenterAchievementCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            vendor_identifier: str
            repeatable: bool
            show_before_earned: bool
            reference_name: str
            points: int
            activity_properties: Optional[StringToStringMap]

        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Optional[Data]

            class GameCenterGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterGroups"] = "gameCenterGroups"

                data: Optional[Data]

            game_center_detail: Optional[GameCenterDetail]
            game_center_group: Optional[GameCenterGroup]

        attributes: Attributes
        type: Literal["gameCenterAchievements"] = "gameCenterAchievements"
        relationships: Optional[Relationships]

    data: Data

class GameCenterAchievementUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            reference_name: Optional[str]
            points: Optional[int]
            show_before_earned: Optional[bool]
            repeatable: Optional[bool]
            archived: Optional[bool]
            activity_properties: Optional[StringToStringMap]

        id: str
        type: Literal["gameCenterAchievements"] = "gameCenterAchievements"
        attributes: Optional[Attributes]

    data: Data

class GameCenterActivityCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class PlayStyle(StringEnum):
                ASYNCHRONOUS = 'ASYNCHRONOUS'
                SYNCHRONOUS = 'SYNCHRONOUS'

            vendor_identifier: str
            reference_name: str
            play_style: Optional[PlayStyle]
            minimum_players_count: Optional[int]
            maximum_players_count: Optional[int]
            supports_party_code: Optional[bool]
            properties: Optional[StringToStringMap]

        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Optional[Data]

            class GameCenterGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterGroups"] = "gameCenterGroups"

                data: Optional[Data]

            game_center_detail: Optional[GameCenterDetail]
            game_center_group: Optional[GameCenterGroup]

        attributes: Attributes
        type: Literal["gameCenterActivities"] = "gameCenterActivities"
        relationships: Optional[Relationships]

    data: Data

class GameCenterActivityUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class PlayStyle(StringEnum):
                ASYNCHRONOUS = 'ASYNCHRONOUS'
                SYNCHRONOUS = 'SYNCHRONOUS'

            reference_name: Optional[str]
            play_style: Optional[PlayStyle]
            minimum_players_count: Optional[int]
            maximum_players_count: Optional[int]
            supports_party_code: Optional[bool]
            archived: Optional[bool]
            properties: Optional[StringToStringMap]

        id: str
        type: Literal["gameCenterActivities"] = "gameCenterActivities"
        attributes: Optional[Attributes]

    data: Data

class GameCenterActivityImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        class Relationships(ApplaudModel):
            class Localization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterActivityLocalizations"] = "gameCenterActivityLocalizations"

                data: Optional[Data]

            class Version(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"

                data: Optional[Data]

            localization: Optional[Localization]
            version: Optional[Version]

        attributes: Attributes
        type: Literal["gameCenterActivityImages"] = "gameCenterActivityImages"
        relationships: Optional[Relationships]

    data: Data

class GameCenterActivityImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            uploaded: Optional[bool]

        id: str
        type: Literal["gameCenterActivityImages"] = "gameCenterActivityImages"
        attributes: Optional[Attributes]

    data: Data

class GameCenterActivityLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Version(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"

                data: Data

            version: Version

        class Attributes(ApplaudModel):
            name: str
            locale: str
            description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterActivityLocalizations"] = "gameCenterActivityLocalizations"

    data: Data

class GameCenterActivityLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            description: Optional[str]

        id: str
        type: Literal["gameCenterActivityLocalizations"] = "gameCenterActivityLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterActivityVersionReleaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Data

            class Version(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"

                data: Data

            game_center_detail: GameCenterDetail
            version: Version

        relationships: Relationships
        type: Literal["gameCenterActivityVersionReleases"] = "gameCenterActivityVersionReleases"

    data: Data

class GameCenterActivityVersionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Activity(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterActivities"] = "gameCenterActivities"

                data: Data

            activity: Activity

        class Attributes(ApplaudModel):
            fallback_url: Optional[str]

        relationships: Relationships
        type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"
        attributes: Optional[Attributes]

    data: Data

class GameCenterActivityVersionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            fallback_url: Optional[str]

        id: str
        type: Literal["gameCenterActivityVersions"] = "gameCenterActivityVersions"
        attributes: Optional[Attributes]

    data: Data

class GameCenterAppVersionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        relationships: Relationships
        type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"

    data: Data

class GameCenterAppVersionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            enabled: Optional[bool]

        id: str
        type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"
        attributes: Optional[Attributes]

    data: Data

class GameCenterChallengeImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        class Relationships(ApplaudModel):
            class Localization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterChallengeLocalizations"] = "gameCenterChallengeLocalizations"

                data: Optional[Data]

            class Version(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

                data: Optional[Data]

            localization: Optional[Localization]
            version: Optional[Version]

        attributes: Attributes
        type: Literal["gameCenterChallengeImages"] = "gameCenterChallengeImages"
        relationships: Optional[Relationships]

    data: Data

class GameCenterChallengeImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            uploaded: Optional[bool]

        id: str
        type: Literal["gameCenterChallengeImages"] = "gameCenterChallengeImages"
        attributes: Optional[Attributes]

    data: Data

class GameCenterChallengeLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Version(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

                data: Data

            version: Version

        class Attributes(ApplaudModel):
            name: str
            locale: str
            description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterChallengeLocalizations"] = "gameCenterChallengeLocalizations"

    data: Data

class GameCenterChallengeLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            description: Optional[str]

        id: str
        type: Literal["gameCenterChallengeLocalizations"] = "gameCenterChallengeLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterChallengeVersionReleaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Data

            class Version(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

                data: Data

            game_center_detail: GameCenterDetail
            version: Version

        relationships: Relationships
        type: Literal["gameCenterChallengeVersionReleases"] = "gameCenterChallengeVersionReleases"

    data: Data

class GameCenterChallengeVersionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Challenge(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterChallenges"] = "gameCenterChallenges"

                data: Data

            challenge: Challenge

        relationships: Relationships
        type: Literal["gameCenterChallengeVersions"] = "gameCenterChallengeVersions"

    data: Data

class GameCenterChallengeCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class ChallengeType(StringEnum):
                LEADERBOARD = 'LEADERBOARD'

            vendor_identifier: str
            challenge_type: Literal[ChallengeType.LEADERBOARD] = ChallengeType.LEADERBOARD
            reference_name: str
            repeatable: Optional[bool]

        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Optional[Data]

            class GameCenterGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterGroups"] = "gameCenterGroups"

                data: Optional[Data]

            class Leaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Optional[Data]

            game_center_detail: Optional[GameCenterDetail]
            game_center_group: Optional[GameCenterGroup]
            leaderboard: Optional[Leaderboard]

        attributes: Attributes
        type: Literal["gameCenterChallenges"] = "gameCenterChallenges"
        relationships: Optional[Relationships]

    data: Data

class GameCenterChallengeUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            reference_name: Optional[str]
            archived: Optional[bool]
            repeatable: Optional[bool]

        class Relationships(ApplaudModel):
            class Leaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Optional[Data]

            leaderboard: Optional[Leaderboard]

        id: str
        type: Literal["gameCenterChallenges"] = "gameCenterChallenges"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class GameCenterDetailCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            challenge_enabled: Optional[bool] = Field(None, deprecated=True)

        relationships: Relationships
        type: Literal["gameCenterDetails"] = "gameCenterDetails"
        attributes: Optional[Attributes]

    data: Data

class GameCenterDetailUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            challenge_enabled: Optional[bool] = Field(None, deprecated=True)

        class Relationships(ApplaudModel):
            class GameCenterGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterGroups"] = "gameCenterGroups"

                data: Optional[Data]

            class DefaultLeaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Optional[Data]

            class DefaultGroupLeaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Optional[Data]

            game_center_group: Optional[GameCenterGroup]
            default_leaderboard: Optional[DefaultLeaderboard]
            default_group_leaderboard: Optional[DefaultGroupLeaderboard]

        id: str
        type: Literal["gameCenterDetails"] = "gameCenterDetails"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class GameCenterGroupCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            reference_name: Optional[str]

        type: Literal["gameCenterGroups"] = "gameCenterGroups"
        attributes: Optional[Attributes]

    data: Data

class GameCenterGroupUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            reference_name: Optional[str]

        id: str
        type: Literal["gameCenterGroups"] = "gameCenterGroups"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardEntrySubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            vendor_identifier: str
            score: str
            bundle_id: str
            scoped_player_id: str
            challenge_ids: Optional[list[str]]
            context: Optional[str]
            submitted_date: Optional[datetime.datetime]

        attributes: Attributes
        type: Literal["gameCenterLeaderboardEntrySubmissions"] = "gameCenterLeaderboardEntrySubmissions"

    data: Data

class GameCenterLeaderboardImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterLeaderboardLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboardLocalizations"] = "gameCenterLeaderboardLocalizations"

                data: Data

            game_center_leaderboard_localization: GameCenterLeaderboardLocalization

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterLeaderboardImages"] = "gameCenterLeaderboardImages"

    data: Data

class GameCenterLeaderboardImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            uploaded: Optional[bool]

        id: str
        type: Literal["gameCenterLeaderboardImages"] = "gameCenterLeaderboardImages"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterLeaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Data

            game_center_leaderboard: GameCenterLeaderboard

        class Attributes(ApplaudModel):
            name: str
            locale: str
            formatter_override: Optional[GameCenterLeaderboardFormatter]
            formatter_suffix: Optional[str]
            formatter_suffix_singular: Optional[str]
            description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterLeaderboardLocalizations"] = "gameCenterLeaderboardLocalizations"

    data: Data

class GameCenterLeaderboardLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            formatter_override: Optional[GameCenterLeaderboardFormatter]
            formatter_suffix: Optional[str]
            formatter_suffix_singular: Optional[str]
            description: Optional[str]

        id: str
        type: Literal["gameCenterLeaderboardLocalizations"] = "gameCenterLeaderboardLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardReleaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Data

            class GameCenterLeaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Data

            game_center_detail: GameCenterDetail
            game_center_leaderboard: GameCenterLeaderboard

        relationships: Relationships
        type: Literal["gameCenterLeaderboardReleases"] = "gameCenterLeaderboardReleases"

    data: Data

class GameCenterLeaderboardSetImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterLeaderboardSetLocalization(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboardSetLocalizations"] = "gameCenterLeaderboardSetLocalizations"

                data: Data

            game_center_leaderboard_set_localization: GameCenterLeaderboardSetLocalization

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterLeaderboardSetImages"] = "gameCenterLeaderboardSetImages"

    data: Data

class GameCenterLeaderboardSetImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            uploaded: Optional[bool]

        id: str
        type: Literal["gameCenterLeaderboardSetImages"] = "gameCenterLeaderboardSetImages"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardSetLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterLeaderboardSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

                data: Data

            game_center_leaderboard_set: GameCenterLeaderboardSet

        class Attributes(ApplaudModel):
            name: str
            locale: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterLeaderboardSetLocalizations"] = "gameCenterLeaderboardSetLocalizations"

    data: Data

class GameCenterLeaderboardSetLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]

        id: str
        type: Literal["gameCenterLeaderboardSetLocalizations"] = "gameCenterLeaderboardSetLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardSetMemberLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterLeaderboard(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Data

            class GameCenterLeaderboardSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

                data: Data

            game_center_leaderboard: GameCenterLeaderboard
            game_center_leaderboard_set: GameCenterLeaderboardSet

        class Attributes(ApplaudModel):
            name: Optional[str]
            locale: Optional[str]

        relationships: Relationships
        type: Literal["gameCenterLeaderboardSetMemberLocalizations"] = "gameCenterLeaderboardSetMemberLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardSetMemberLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]

        id: str
        type: Literal["gameCenterLeaderboardSetMemberLocalizations"] = "gameCenterLeaderboardSetMemberLocalizations"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardSetReleaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Data

            class GameCenterLeaderboardSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

                data: Data

            game_center_detail: GameCenterDetail
            game_center_leaderboard_set: GameCenterLeaderboardSet

        relationships: Relationships
        type: Literal["gameCenterLeaderboardSetReleases"] = "gameCenterLeaderboardSetReleases"

    data: Data

class GameCenterLeaderboardSetCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            vendor_identifier: str
            reference_name: str

        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Optional[Data]

            class GameCenterGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterGroups"] = "gameCenterGroups"

                data: Optional[Data]

            class GameCenterLeaderboards(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

                data: Optional[list[Data]]

            game_center_detail: Optional[GameCenterDetail]
            game_center_group: Optional[GameCenterGroup]
            game_center_leaderboards: Optional[GameCenterLeaderboards]

        attributes: Attributes
        type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"
        relationships: Optional[Relationships]

    data: Data

class GameCenterLeaderboardSetUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            reference_name: Optional[str]

        id: str
        type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"
        attributes: Optional[Attributes]

    data: Data

class GameCenterLeaderboardCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class SubmissionType(StringEnum):
                BEST_SCORE = 'BEST_SCORE'
                MOST_RECENT_SCORE = 'MOST_RECENT_SCORE'

            class ScoreSortType(StringEnum):
                ASC = 'ASC'
                DESC = 'DESC'

            class Visibility(StringEnum):
                SHOW_FOR_ALL = 'SHOW_FOR_ALL'
                HIDE_FOR_ALL = 'HIDE_FOR_ALL'

            vendor_identifier: str
            submission_type: SubmissionType
            default_formatter: GameCenterLeaderboardFormatter
            score_sort_type: ScoreSortType
            reference_name: str
            score_range_start: Optional[str]
            score_range_end: Optional[str]
            recurrence_start_date: Optional[datetime.datetime]
            recurrence_duration: Optional[str]
            recurrence_rule: Optional[str]
            activity_properties: Optional[StringToStringMap]
            visibility: Optional[Visibility]

        class Relationships(ApplaudModel):
            class GameCenterDetail(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterDetails"] = "gameCenterDetails"

                data: Optional[Data]

            class GameCenterGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterGroups"] = "gameCenterGroups"

                data: Optional[Data]

            class GameCenterLeaderboardSets(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

                data: Optional[list[Data]]

            game_center_detail: Optional[GameCenterDetail]
            game_center_group: Optional[GameCenterGroup]
            game_center_leaderboard_sets: Optional[GameCenterLeaderboardSets]

        attributes: Attributes
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"
        relationships: Optional[Relationships]

    data: Data

class GameCenterLeaderboardUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class SubmissionType(StringEnum):
                BEST_SCORE = 'BEST_SCORE'
                MOST_RECENT_SCORE = 'MOST_RECENT_SCORE'

            class ScoreSortType(StringEnum):
                ASC = 'ASC'
                DESC = 'DESC'

            class Visibility(StringEnum):
                SHOW_FOR_ALL = 'SHOW_FOR_ALL'
                HIDE_FOR_ALL = 'HIDE_FOR_ALL'

            default_formatter: Optional[GameCenterLeaderboardFormatter]
            reference_name: Optional[str]
            submission_type: Optional[SubmissionType]
            score_sort_type: Optional[ScoreSortType]
            score_range_start: Optional[str]
            score_range_end: Optional[str]
            recurrence_start_date: Optional[datetime.datetime]
            recurrence_duration: Optional[str]
            recurrence_rule: Optional[str]
            archived: Optional[bool]
            activity_properties: Optional[StringToStringMap]
            visibility: Optional[Visibility]

        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"
        attributes: Optional[Attributes]

    data: Data

class GameCenterMatchmakingQueueCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class RuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Data

            class ExperimentRuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Optional[Data]

            rule_set: RuleSet
            experiment_rule_set: Optional[ExperimentRuleSet]

        class Attributes(ApplaudModel):
            reference_name: str
            classic_matchmaking_bundle_ids: Optional[list[str]]

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterMatchmakingQueues"] = "gameCenterMatchmakingQueues"

    data: Data

class GameCenterMatchmakingQueueUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            classic_matchmaking_bundle_ids: Optional[list[str]]

        class Relationships(ApplaudModel):
            class RuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Optional[Data]

            class ExperimentRuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Optional[Data]

            rule_set: Optional[RuleSet]
            experiment_rule_set: Optional[ExperimentRuleSet]

        id: str
        type: Literal["gameCenterMatchmakingQueues"] = "gameCenterMatchmakingQueues"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class GameCenterMatchmakingRuleSetTestCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class MatchmakingRuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Data

            class MatchmakingRequests(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingTestRequests"] = "gameCenterMatchmakingTestRequests"

                data: list[Data]

            matchmaking_rule_set: MatchmakingRuleSet
            matchmaking_requests: MatchmakingRequests

        relationships: Relationships
        type: Literal["gameCenterMatchmakingRuleSetTests"] = "gameCenterMatchmakingRuleSetTests"

    data: Data
    included: Optional[list[Union[GameCenterMatchmakingTestPlayerPropertyInlineCreate, GameCenterMatchmakingTestRequestInlineCreate]]]

class GameCenterMatchmakingRuleSetCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            max_players: int
            min_players: int
            reference_name: str
            rule_language_version: int

        attributes: Attributes
        type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

    data: Data

class GameCenterMatchmakingRuleSetUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            min_players: Optional[int]
            max_players: Optional[int]

        id: str
        type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"
        attributes: Optional[Attributes]

    data: Data

class GameCenterMatchmakingRuleCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class RuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Data

            rule_set: RuleSet

        class Attributes(ApplaudModel):
            class Type(StringEnum):
                COMPATIBLE = 'COMPATIBLE'
                DISTANCE = 'DISTANCE'
                MATCH = 'MATCH'
                TEAM = 'TEAM'

            expression: str
            description: str
            type: Type
            reference_name: str
            weight: Optional[float]

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterMatchmakingRules"] = "gameCenterMatchmakingRules"

    data: Data

class GameCenterMatchmakingRuleUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            description: Optional[str]
            expression: Optional[str]
            weight: Optional[float]

        id: str
        type: Literal["gameCenterMatchmakingRules"] = "gameCenterMatchmakingRules"
        attributes: Optional[Attributes]

    data: Data

class GameCenterMatchmakingTeamCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class RuleSet(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["gameCenterMatchmakingRuleSets"] = "gameCenterMatchmakingRuleSets"

                data: Data

            rule_set: RuleSet

        class Attributes(ApplaudModel):
            max_players: int
            min_players: int
            reference_name: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["gameCenterMatchmakingTeams"] = "gameCenterMatchmakingTeams"

    data: Data

class GameCenterMatchmakingTeamUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            min_players: Optional[int]
            max_players: Optional[int]

        id: str
        type: Literal["gameCenterMatchmakingTeams"] = "gameCenterMatchmakingTeams"
        attributes: Optional[Attributes]

    data: Data

class GameCenterMatchmakingTestRequest(ApplaudRequest):
    id: str
    type: Literal["gameCenterMatchmakingTestRequests"] = "gameCenterMatchmakingTestRequests"
    links: Optional[ResourceLinks]

class GameCenterPlayerAchievementSubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            vendor_identifier: str
            percentage_achieved: int
            bundle_id: str
            scoped_player_id: str
            challenge_ids: Optional[list[str]]
            submitted_date: Optional[datetime.datetime]

        attributes: Attributes
        type: Literal["gameCenterPlayerAchievementSubmissions"] = "gameCenterPlayerAchievementSubmissions"

    data: Data

class InAppPurchaseAppStoreReviewScreenshotCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class InAppPurchaseV2(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Data

            in_app_purchase_v2: InAppPurchaseV2

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["inAppPurchaseAppStoreReviewScreenshots"] = "inAppPurchaseAppStoreReviewScreenshots"

    data: Data

class InAppPurchaseAppStoreReviewScreenshotUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["inAppPurchaseAppStoreReviewScreenshots"] = "inAppPurchaseAppStoreReviewScreenshots"
        attributes: Optional[Attributes]

    data: Data

class InAppPurchaseAvailabilityCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class InAppPurchase(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Data

            class AvailableTerritories(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: list[Data]

            in_app_purchase: InAppPurchase
            available_territories: AvailableTerritories

        class Attributes(ApplaudModel):
            available_in_new_territories: bool

        relationships: Relationships
        attributes: Attributes
        type: Literal["inAppPurchaseAvailabilities"] = "inAppPurchaseAvailabilities"

    data: Data

class InAppPurchaseImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class InAppPurchase(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Data

            in_app_purchase: InAppPurchase

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["inAppPurchaseImages"] = "inAppPurchaseImages"

    data: Data

class InAppPurchaseImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["inAppPurchaseImages"] = "inAppPurchaseImages"
        attributes: Optional[Attributes]

    data: Data

class InAppPurchaseLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class InAppPurchaseV2(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Data

            in_app_purchase_v2: InAppPurchaseV2

        class Attributes(ApplaudModel):
            name: str
            locale: str
            description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["inAppPurchaseLocalizations"] = "inAppPurchaseLocalizations"

    data: Data

class InAppPurchaseLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            description: Optional[str]

        id: str
        type: Literal["inAppPurchaseLocalizations"] = "inAppPurchaseLocalizations"
        attributes: Optional[Attributes]

    data: Data

class InAppPurchasePriceScheduleCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class InAppPurchase(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Data

            class ManualPrices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchasePrices"] = "inAppPurchasePrices"

                data: list[Data]

            class BaseTerritory(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Data

            in_app_purchase: InAppPurchase
            manual_prices: ManualPrices
            base_territory: BaseTerritory

        relationships: Relationships
        type: Literal["inAppPurchasePriceSchedules"] = "inAppPurchasePriceSchedules"

    data: Data
    included: Optional[list[Union[InAppPurchasePriceInlineCreate, TerritoryInlineCreate]]]

class InAppPurchaseSubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class InAppPurchaseV2(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Data

            in_app_purchase_v2: InAppPurchaseV2

        relationships: Relationships
        type: Literal["inAppPurchaseSubmissions"] = "inAppPurchaseSubmissions"

    data: Data

class InAppPurchaseV2CreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            product_id: str
            name: str
            in_app_purchase_type: InAppPurchaseType
            review_note: Optional[str]
            family_sharable: Optional[bool]

        relationships: Relationships
        attributes: Attributes
        type: Literal["inAppPurchases"] = "inAppPurchases"

    data: Data

class InAppPurchaseV2UpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            review_note: Optional[str]
            family_sharable: Optional[bool]

        id: str
        type: Literal["inAppPurchases"] = "inAppPurchases"
        attributes: Optional[Attributes]

    data: Data

class MarketplaceSearchDetailCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            catalog_url: AnyUrl

        relationships: Relationships
        attributes: Attributes
        type: Literal["marketplaceSearchDetails"] = "marketplaceSearchDetails"

    data: Data

class MarketplaceSearchDetailUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            catalog_url: Optional[AnyUrl]

        id: str
        type: Literal["marketplaceSearchDetails"] = "marketplaceSearchDetails"
        attributes: Optional[Attributes]

    data: Data

@deprecated
class MarketplaceWebhookCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            endpoint_url: AnyUrl
            secret: str

        attributes: Attributes
        type: Literal["marketplaceWebhooks"] = "marketplaceWebhooks"

    data: Data

@deprecated
class MarketplaceWebhookUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            endpoint_url: Optional[AnyUrl]
            secret: Optional[str]

        id: str
        type: Literal["marketplaceWebhooks"] = "marketplaceWebhooks"
        attributes: Optional[Attributes]

    data: Data

class MerchantIdCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            identifier: str
            name: str

        attributes: Attributes
        type: Literal["merchantIds"] = "merchantIds"

    data: Data

class MerchantIdUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]

        id: str
        type: Literal["merchantIds"] = "merchantIds"
        attributes: Optional[Attributes]

    data: Data

class NominationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class RelatedApps(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: list[Data]

            class InAppEvents(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEvents"] = "appEvents"

                data: Optional[list[Data]]

            class SupportedTerritories(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Optional[list[Data]]

            related_apps: RelatedApps
            in_app_events: Optional[InAppEvents]
            supported_territories: Optional[SupportedTerritories]

        class Attributes(ApplaudModel):
            class Type(StringEnum):
                APP_LAUNCH = 'APP_LAUNCH'
                APP_ENHANCEMENTS = 'APP_ENHANCEMENTS'
                NEW_CONTENT = 'NEW_CONTENT'

            submitted: bool
            publish_start_date: datetime.datetime
            name: str
            description: str
            type: Type
            publish_end_date: Optional[datetime.datetime]
            device_families: Optional[list[DeviceFamily]]
            locales: Optional[list[str]]
            supplemental_materials_uris: Optional[list[str]]
            has_in_app_events: Optional[bool]
            launch_in_select_markets_first: Optional[bool]
            notes: Optional[str]
            pre_order_enabled: Optional[bool]

        relationships: Relationships
        attributes: Attributes
        type: Literal["nominations"] = "nominations"

    data: Data

class NominationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class Type(StringEnum):
                APP_LAUNCH = 'APP_LAUNCH'
                APP_ENHANCEMENTS = 'APP_ENHANCEMENTS'
                NEW_CONTENT = 'NEW_CONTENT'

            name: Optional[str]
            type: Optional[Type]
            description: Optional[str]
            submitted: Optional[bool]
            archived: Optional[bool]
            publish_start_date: Optional[datetime.datetime]
            publish_end_date: Optional[datetime.datetime]
            device_families: Optional[list[DeviceFamily]]
            locales: Optional[list[str]]
            supplemental_materials_uris: Optional[list[str]]
            has_in_app_events: Optional[bool]
            launch_in_select_markets_first: Optional[bool]
            notes: Optional[str]
            pre_order_enabled: Optional[bool]

        class Relationships(ApplaudModel):
            class RelatedApps(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Optional[list[Data]]

            class InAppEvents(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEvents"] = "appEvents"

                data: Optional[list[Data]]

            class SupportedTerritories(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Optional[list[Data]]

            related_apps: Optional[RelatedApps]
            in_app_events: Optional[InAppEvents]
            supported_territories: Optional[SupportedTerritories]

        id: str
        type: Literal["nominations"] = "nominations"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class PassTypeIdCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            identifier: str
            name: str

        attributes: Attributes
        type: Literal["passTypeIds"] = "passTypeIds"

    data: Data

class PassTypeIdUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]

        id: str
        type: Literal["passTypeIds"] = "passTypeIds"
        attributes: Optional[Attributes]

    data: Data

class ProfileCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Certificates(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["certificates"] = "certificates"

                data: list[Data]

            class BundleId(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["bundleIds"] = "bundleIds"

                data: Data

            class Devices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["devices"] = "devices"

                data: Optional[list[Data]]

            certificates: Certificates
            bundle_id: BundleId
            devices: Optional[Devices]

        class Attributes(ApplaudModel):
            profile_type: ProfileType
            name: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["profiles"] = "profiles"

    data: Data

class PromotedPurchaseCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            class InAppPurchaseV2(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["inAppPurchases"] = "inAppPurchases"

                data: Optional[Data]

            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Optional[Data]

            app: App
            in_app_purchase_v2: Optional[InAppPurchaseV2]
            subscription: Optional[Subscription]

        class Attributes(ApplaudModel):
            visible_for_all_users: bool
            enabled: Optional[bool]

        relationships: Relationships
        attributes: Attributes
        type: Literal["promotedPurchases"] = "promotedPurchases"

    data: Data

class PromotedPurchaseUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            visible_for_all_users: Optional[bool]
            enabled: Optional[bool]

        id: str
        type: Literal["promotedPurchases"] = "promotedPurchases"
        attributes: Optional[Attributes]

    data: Data

class ReviewSubmissionItemCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class ReviewSubmission(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["reviewSubmissions"] = "reviewSubmissions"

                data: Data

            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Optional[Data]

            class AppCustomProductPageVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appCustomProductPageVersions"] = "appCustomProductPageVersions"

                data: Optional[Data]

            class AppStoreVersionExperiment(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

                data: Optional[Data]

            class AppStoreVersionExperimentV2(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersionExperiments"] = "appStoreVersionExperiments"

                data: Optional[Data]

            class AppEvent(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appEvents"] = "appEvents"

                data: Optional[Data]

            class BackgroundAssetVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["backgroundAssetVersions"] = "backgroundAssetVersions"

                data: Optional[Data]

            review_submission: ReviewSubmission
            app_store_version: Optional[AppStoreVersion]
            app_custom_product_page_version: Optional[AppCustomProductPageVersion]
            app_store_version_experiment: Optional[AppStoreVersionExperiment]
            app_store_version_experiment_v2: Optional[AppStoreVersionExperimentV2]
            app_event: Optional[AppEvent]
            background_asset_version: Optional[BackgroundAssetVersion]

        relationships: Relationships
        type: Literal["reviewSubmissionItems"] = "reviewSubmissionItems"

    data: Data

class ReviewSubmissionItemUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            resolved: Optional[bool]
            removed: Optional[bool]

        id: str
        type: Literal["reviewSubmissionItems"] = "reviewSubmissionItems"
        attributes: Optional[Attributes]

    data: Data

class ReviewSubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            platform: Optional[Platform]

        relationships: Relationships
        type: Literal["reviewSubmissions"] = "reviewSubmissions"
        attributes: Optional[Attributes]

    data: Data

class ReviewSubmissionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            platform: Optional[Platform]
            submitted: Optional[bool]
            canceled: Optional[bool]

        id: str
        type: Literal["reviewSubmissions"] = "reviewSubmissions"
        attributes: Optional[Attributes]

    data: Data

class RoutingAppCoverageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class AppStoreVersion(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["appStoreVersions"] = "appStoreVersions"

                data: Data

            app_store_version: AppStoreVersion

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["routingAppCoverages"] = "routingAppCoverages"

    data: Data

class RoutingAppCoverageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["routingAppCoverages"] = "routingAppCoverages"
        attributes: Optional[Attributes]

    data: Data

class SandboxTesterV2UpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class SubscriptionRenewalRate(StringEnum):
                MONTHLY_RENEWAL_EVERY_ONE_HOUR = 'MONTHLY_RENEWAL_EVERY_ONE_HOUR'
                MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES = 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES'
                MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES = 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES'
                MONTHLY_RENEWAL_EVERY_FIVE_MINUTES = 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES'
                MONTHLY_RENEWAL_EVERY_THREE_MINUTES = 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES'

            territory: Optional[TerritoryCode]
            interrupt_purchases: Optional[bool]
            subscription_renewal_rate: Optional[SubscriptionRenewalRate]

        id: str
        type: Literal["sandboxTesters"] = "sandboxTesters"
        attributes: Optional[Attributes]

    data: Data

class SandboxTestersClearPurchaseHistoryRequestV2CreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class SandboxTesters(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["sandboxTesters"] = "sandboxTesters"

                data: list[Data]

            sandbox_testers: SandboxTesters

        relationships: Relationships
        type: Literal["sandboxTestersClearPurchaseHistoryRequest"] = "sandboxTestersClearPurchaseHistoryRequest"

    data: Data

class ScmPullRequest(ApplaudRequest):
    class Attributes(ApplaudModel):
        title: Optional[str]
        number: Optional[int]
        web_url: Optional[AnyUrl]
        source_repository_owner: Optional[str]
        source_repository_name: Optional[str]
        source_branch_name: Optional[str]
        destination_repository_owner: Optional[str]
        destination_repository_name: Optional[str]
        destination_branch_name: Optional[str]
        is_closed: Optional[bool]
        is_cross_repository: Optional[bool]

    class Relationships(ApplaudModel):
        class Repository(ApplaudModel):
            class Data(ApplaudModel):
                id: str
                type: Literal["scmRepositories"] = "scmRepositories"

            data: Optional[Data]

        repository: Optional[Repository]

    id: str
    type: Literal["scmPullRequests"] = "scmPullRequests"
    attributes: Optional[Attributes]
    relationships: Optional[Relationships]
    links: Optional[ResourceLinks]

class SubscriptionAppStoreReviewScreenshotCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            subscription: Subscription

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionAppStoreReviewScreenshots"] = "subscriptionAppStoreReviewScreenshots"

    data: Data

class SubscriptionAppStoreReviewScreenshotUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["subscriptionAppStoreReviewScreenshots"] = "subscriptionAppStoreReviewScreenshots"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionAvailabilityCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            class AvailableTerritories(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: list[Data]

            subscription: Subscription
            available_territories: AvailableTerritories

        class Attributes(ApplaudModel):
            available_in_new_territories: bool

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionAvailabilities"] = "subscriptionAvailabilities"

    data: Data

class SubscriptionGracePeriodUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class RenewalType(StringEnum):
                ALL_RENEWALS = 'ALL_RENEWALS'
                PAID_TO_PAID_ONLY = 'PAID_TO_PAID_ONLY'

            opt_in: Optional[bool]
            sandbox_opt_in: Optional[bool]
            duration: Optional[SubscriptionGracePeriodDuration]
            renewal_type: Optional[RenewalType]

        id: str
        type: Literal["subscriptionGracePeriods"] = "subscriptionGracePeriods"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionGroupLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class SubscriptionGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionGroups"] = "subscriptionGroups"

                data: Data

            subscription_group: SubscriptionGroup

        class Attributes(ApplaudModel):
            name: str
            locale: str
            custom_app_name: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionGroupLocalizations"] = "subscriptionGroupLocalizations"

    data: Data

class SubscriptionGroupLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            custom_app_name: Optional[str]

        id: str
        type: Literal["subscriptionGroupLocalizations"] = "subscriptionGroupLocalizations"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionGroupSubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class SubscriptionGroup(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionGroups"] = "subscriptionGroups"

                data: Data

            subscription_group: SubscriptionGroup

        relationships: Relationships
        type: Literal["subscriptionGroupSubmissions"] = "subscriptionGroupSubmissions"

    data: Data

class SubscriptionGroupCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            reference_name: str

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionGroups"] = "subscriptionGroups"

    data: Data

class SubscriptionGroupUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            reference_name: Optional[str]

        id: str
        type: Literal["subscriptionGroups"] = "subscriptionGroups"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionImageCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            subscription: Subscription

        class Attributes(ApplaudModel):
            file_name: str
            file_size: int

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionImages"] = "subscriptionImages"

    data: Data

class SubscriptionImageUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            source_file_checksum: Optional[str]
            uploaded: Optional[bool]

        id: str
        type: Literal["subscriptionImages"] = "subscriptionImages"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionIntroductoryOfferCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            class Territory(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Optional[Data]

            class SubscriptionPricePoint(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

                data: Optional[Data]

            subscription: Subscription
            territory: Optional[Territory]
            subscription_price_point: Optional[SubscriptionPricePoint]

        class Attributes(ApplaudModel):
            duration: SubscriptionOfferDuration
            number_of_periods: int
            offer_mode: SubscriptionOfferMode
            start_date: Optional[datetime.date]
            end_date: Optional[datetime.date]

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"

    data: Data
    included: Optional[list[SubscriptionPricePointInlineCreate]]

class SubscriptionIntroductoryOfferUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            end_date: Optional[datetime.date]

        id: str
        type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionLocalizationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            subscription: Subscription

        class Attributes(ApplaudModel):
            name: str
            locale: str
            description: Optional[str]

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionLocalizations"] = "subscriptionLocalizations"

    data: Data

class SubscriptionLocalizationUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            name: Optional[str]
            description: Optional[str]

        id: str
        type: Literal["subscriptionLocalizations"] = "subscriptionLocalizations"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionOfferCodeCustomCodeCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class OfferCode(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"

                data: Data

            offer_code: OfferCode

        class Attributes(ApplaudModel):
            number_of_codes: int
            custom_code: str
            expiration_date: Optional[datetime.date]

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionOfferCodeCustomCodes"] = "subscriptionOfferCodeCustomCodes"

    data: Data

class SubscriptionOfferCodeCustomCodeUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            active: Optional[bool]

        id: str
        type: Literal["subscriptionOfferCodeCustomCodes"] = "subscriptionOfferCodeCustomCodes"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionOfferCodeOneTimeUseCodeCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class OfferCode(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"

                data: Data

            offer_code: OfferCode

        class Attributes(ApplaudModel):
            number_of_codes: int
            expiration_date: datetime.date

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionOfferCodeOneTimeUseCodes"] = "subscriptionOfferCodeOneTimeUseCodes"

    data: Data

class SubscriptionOfferCodeOneTimeUseCodeUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            active: Optional[bool]

        id: str
        type: Literal["subscriptionOfferCodeOneTimeUseCodes"] = "subscriptionOfferCodeOneTimeUseCodes"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionOfferCodeCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            class Prices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionOfferCodePrices"] = "subscriptionOfferCodePrices"

                data: list[Data]

            subscription: Subscription
            prices: Prices

        class Attributes(ApplaudModel):
            duration: SubscriptionOfferDuration
            offer_eligibility: SubscriptionOfferEligibility
            name: str
            number_of_periods: int
            offer_mode: SubscriptionOfferMode
            customer_eligibilities: list[SubscriptionCustomerEligibility]

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"

    data: Data
    included: Optional[list[SubscriptionOfferCodePriceInlineCreate]]

class SubscriptionOfferCodeUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            active: Optional[bool]

        id: str
        type: Literal["subscriptionOfferCodes"] = "subscriptionOfferCodes"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionPriceCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            class SubscriptionPricePoint(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionPricePoints"] = "subscriptionPricePoints"

                data: Data

            class Territory(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["territories"] = "territories"

                data: Optional[Data]

            subscription: Subscription
            subscription_price_point: SubscriptionPricePoint
            territory: Optional[Territory]

        class Attributes(ApplaudModel):
            start_date: Optional[datetime.date]
            preserve_current_price: Optional[bool]

        relationships: Relationships
        type: Literal["subscriptionPrices"] = "subscriptionPrices"
        attributes: Optional[Attributes]

    data: Data

class SubscriptionPromotionalOfferCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            class Prices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionPromotionalOfferPrices"] = "subscriptionPromotionalOfferPrices"

                data: list[Data]

            subscription: Subscription
            prices: Prices

        class Attributes(ApplaudModel):
            duration: SubscriptionOfferDuration
            offer_code: str
            name: str
            number_of_periods: int
            offer_mode: SubscriptionOfferMode

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptionPromotionalOffers"] = "subscriptionPromotionalOffers"

    data: Data
    included: Optional[list[SubscriptionPromotionalOfferPriceInlineCreate]]

class SubscriptionPromotionalOfferUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Prices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionPromotionalOfferPrices"] = "subscriptionPromotionalOfferPrices"

                data: Optional[list[Data]]

            prices: Optional[Prices]

        id: str
        type: Literal["subscriptionPromotionalOffers"] = "subscriptionPromotionalOffers"
        relationships: Optional[Relationships]

    data: Data
    included: Optional[list[SubscriptionPromotionalOfferPriceInlineCreate]]

class SubscriptionSubmissionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            subscription: Subscription

        relationships: Relationships
        type: Literal["subscriptionSubmissions"] = "subscriptionSubmissions"

    data: Data

class SubscriptionCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Group(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionGroups"] = "subscriptionGroups"

                data: Data

            group: Group

        class Attributes(ApplaudModel):
            class SubscriptionPeriod(StringEnum):
                ONE_WEEK = 'ONE_WEEK'
                ONE_MONTH = 'ONE_MONTH'
                TWO_MONTHS = 'TWO_MONTHS'
                THREE_MONTHS = 'THREE_MONTHS'
                SIX_MONTHS = 'SIX_MONTHS'
                ONE_YEAR = 'ONE_YEAR'

            product_id: str
            name: str
            family_sharable: Optional[bool]
            subscription_period: Optional[SubscriptionPeriod]
            review_note: Optional[str]
            group_level: Optional[int]

        relationships: Relationships
        attributes: Attributes
        type: Literal["subscriptions"] = "subscriptions"

    data: Data

class SubscriptionUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class SubscriptionPeriod(StringEnum):
                ONE_WEEK = 'ONE_WEEK'
                ONE_MONTH = 'ONE_MONTH'
                TWO_MONTHS = 'TWO_MONTHS'
                THREE_MONTHS = 'THREE_MONTHS'
                SIX_MONTHS = 'SIX_MONTHS'
                ONE_YEAR = 'ONE_YEAR'

            name: Optional[str]
            family_sharable: Optional[bool]
            subscription_period: Optional[SubscriptionPeriod]
            review_note: Optional[str]
            group_level: Optional[int]

        class Relationships(ApplaudModel):
            class IntroductoryOffers(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"

                data: Optional[list[Data]]

            class PromotionalOffers(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionPromotionalOffers"] = "subscriptionPromotionalOffers"

                data: Optional[list[Data]]

            class Prices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptionPrices"] = "subscriptionPrices"

                data: Optional[list[Data]]

            introductory_offers: Optional[IntroductoryOffers]
            promotional_offers: Optional[PromotionalOffers]
            prices: Optional[Prices]

        id: str
        type: Literal["subscriptions"] = "subscriptions"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data
    included: Optional[list[Union[SubscriptionPromotionalOfferInlineCreate, SubscriptionPriceInlineCreate, SubscriptionIntroductoryOfferInlineCreate]]]

class TerritoryAvailabilityUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            available: Optional[bool]
            release_date: Optional[datetime.date]
            pre_order_enabled: Optional[bool]

        id: str
        type: Literal["territoryAvailabilities"] = "territoryAvailabilities"
        attributes: Optional[Attributes]

    data: Data

class UserInvitationCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            first_name: str
            last_name: str
            roles: list[UserRole]
            email: EmailStr
            all_apps_visible: Optional[bool]
            provisioning_allowed: Optional[bool]

        class Relationships(ApplaudModel):
            class VisibleApps(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Optional[list[Data]]

            visible_apps: Optional[VisibleApps]

        attributes: Attributes
        type: Literal["userInvitations"] = "userInvitations"
        relationships: Optional[Relationships]

    data: Data

class UserUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            roles: Optional[list[UserRole]]
            all_apps_visible: Optional[bool]
            provisioning_allowed: Optional[bool]

        class Relationships(ApplaudModel):
            class VisibleApps(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Optional[list[Data]]

            visible_apps: Optional[VisibleApps]

        id: str
        type: Literal["users"] = "users"
        attributes: Optional[Attributes]
        relationships: Optional[Relationships]

    data: Data

class WebhookDeliveryCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Template(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["webhookDeliveries"] = "webhookDeliveries"

                data: Data

            template: Template

        relationships: Relationships
        type: Literal["webhookDeliveries"] = "webhookDeliveries"

    data: Data

class WebhookPingCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Webhook(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["webhooks"] = "webhooks"

                data: Data

            webhook: Webhook

        relationships: Relationships
        type: Literal["webhookPings"] = "webhookPings"

    data: Data

class WebhookCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class App(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["apps"] = "apps"

                data: Data

            app: App

        class Attributes(ApplaudModel):
            name: str
            secret: str
            event_types: list[WebhookEventType]
            url: AnyUrl
            enabled: bool

        relationships: Relationships
        attributes: Attributes
        type: Literal["webhooks"] = "webhooks"

    data: Data

class WebhookUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            enabled: Optional[bool]
            event_types: Optional[list[WebhookEventType]]
            name: Optional[str]
            secret: Optional[str]
            url: Optional[AnyUrl]

        id: str
        type: Literal["webhooks"] = "webhooks"
        attributes: Optional[Attributes]

    data: Data

class WinBackOfferCreateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Relationships(ApplaudModel):
            class Subscription(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["subscriptions"] = "subscriptions"

                data: Data

            class Prices(ApplaudModel):
                class Data(ApplaudModel):
                    id: str
                    type: Literal["winBackOfferPrices"] = "winBackOfferPrices"

                data: list[Data]

            subscription: Subscription
            prices: Prices

        class Attributes(ApplaudModel):
            class Priority(StringEnum):
                HIGH = 'HIGH'
                NORMAL = 'NORMAL'

            class PromotionIntent(StringEnum):
                NOT_PROMOTED = 'NOT_PROMOTED'
                USE_AUTO_GENERATED_ASSETS = 'USE_AUTO_GENERATED_ASSETS'

            duration: SubscriptionOfferDuration
            customer_eligibility_time_since_last_subscribed_in_months: IntegerRange
            period_count: int
            offer_id: str
            offer_mode: SubscriptionOfferMode
            priority: Priority
            customer_eligibility_paid_subscription_duration_in_months: int
            start_date: datetime.date
            reference_name: str
            customer_eligibility_wait_between_offers_in_months: Optional[int]
            end_date: Optional[datetime.date]
            promotion_intent: Optional[PromotionIntent]

        relationships: Relationships
        attributes: Attributes
        type: Literal["winBackOffers"] = "winBackOffers"

    data: Data
    included: Optional[list[WinBackOfferPriceInlineCreate]]

class WinBackOfferUpdateRequest(ApplaudRequest):
    class Data(ApplaudModel):
        class Attributes(ApplaudModel):
            class Priority(StringEnum):
                HIGH = 'HIGH'
                NORMAL = 'NORMAL'

            class PromotionIntent(StringEnum):
                NOT_PROMOTED = 'NOT_PROMOTED'
                USE_AUTO_GENERATED_ASSETS = 'USE_AUTO_GENERATED_ASSETS'

            customer_eligibility_paid_subscription_duration_in_months: Optional[int]
            customer_eligibility_time_since_last_subscribed_in_months: Optional[IntegerRange]
            customer_eligibility_wait_between_offers_in_months: Optional[int]
            start_date: Optional[datetime.date]
            end_date: Optional[datetime.date]
            priority: Optional[Priority]
            promotion_intent: Optional[PromotionIntent]

        id: str
        type: Literal["winBackOffers"] = "winBackOffers"
        attributes: Optional[Attributes]

    data: Data

class AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appStoreVersions"] = "appStoreVersions"

    data: Data

class AppCustomProductPageLocalizationSearchKeywordsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appKeywords"] = "appKeywords"

    data: list[Data]

@deprecated
class AppEncryptionDeclarationBuildsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: list[Data]

class AppPreviewSetAppPreviewsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appPreviews"] = "appPreviews"

    data: list[Data]

class AppScreenshotSetAppScreenshotsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appScreenshots"] = "appScreenshots"

    data: list[Data]

class AppStoreVersionLocalizationSearchKeywordsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appKeywords"] = "appKeywords"

    data: list[Data]

class AppStoreVersionAppClipDefaultExperienceLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

    data: Data

class AppStoreVersionBuildLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: Data

class AppBetaTestersLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaTesters"] = "betaTesters"

    data: list[Data]

class AppPromotedPurchasesLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["promotedPurchases"] = "promotedPurchases"

    data: list[Data]

class BetaGroupBetaTestersLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaTesters"] = "betaTesters"

    data: list[Data]

class BetaGroupBuildsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: list[Data]

class BetaTesterAppsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["apps"] = "apps"

    data: list[Data]

class BetaTesterBetaGroupsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaGroups"] = "betaGroups"

    data: list[Data]

class BetaTesterBuildsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: list[Data]

class BuildAppEncryptionDeclarationLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

    data: Data

class BuildBetaGroupsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaGroups"] = "betaGroups"

    data: list[Data]

class BuildIndividualTestersLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaTesters"] = "betaTesters"

    data: list[Data]

class GameCenterAchievementActivityLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterActivities"] = "gameCenterActivities"

    data: Data

@deprecated
class GameCenterAchievementGroupAchievementLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

    data: Data

class GameCenterActivityAchievementsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

    data: list[Data]

class GameCenterActivityLeaderboardsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

    data: list[Data]

class GameCenterAppVersionCompatibilityVersionsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterAppVersions"] = "gameCenterAppVersions"

    data: list[Data]

class GameCenterChallengeLeaderboardLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

    data: Data

class GameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["appStoreVersions"] = "appStoreVersions"

    data: list[Data]

class GameCenterDetailGameCenterAchievementsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

    data: list[Data]

class GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

    data: list[Data]

class GameCenterDetailGameCenterLeaderboardsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

    data: list[Data]

@deprecated
class GameCenterEnabledVersionCompatibleVersionsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterEnabledVersions"] = "gameCenterEnabledVersions"

    data: list[Data]

class GameCenterGroupGameCenterAchievementsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterAchievements"] = "gameCenterAchievements"

    data: list[Data]

class GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

    data: list[Data]

class GameCenterGroupGameCenterLeaderboardsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

    data: list[Data]

class GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

    data: list[Data]

@deprecated
class GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboardSets"] = "gameCenterLeaderboardSets"

    data: Data

class GameCenterLeaderboardActivityLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterActivities"] = "gameCenterActivities"

    data: Data

class GameCenterLeaderboardChallengeLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterChallenges"] = "gameCenterChallenges"

    data: Data

@deprecated
class GameCenterLeaderboardGroupLeaderboardLinkageRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterLeaderboards"] = "gameCenterLeaderboards"

    data: Data

class SubscriptionIntroductoryOffersLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["subscriptionIntroductoryOffers"] = "subscriptionIntroductoryOffers"

    data: list[Data]

class SubscriptionPricesLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["subscriptionPrices"] = "subscriptionPrices"

    data: list[Data]

class UserVisibleAppsLinkagesRequest(ApplaudRequest):
    class Data(ApplaudModel):
        id: str
        type: Literal["apps"] = "apps"

    data: list[Data]

